{
  "id": "tailwind-lesson-17-theming-dark-mode",
  "moduleSlug": "tailwind-advanced",
  "title": "Theming and Dark Mode Strategies",
  "order": 17,
  "objectives": [
    "Implement sophisticated theming systems with Tailwind CSS",
    "Create seamless dark mode experiences with smooth transitions",
    "Develop theme persistence and user preference management",
    "Optimize themes for accessibility and performance"
  ],
  "intro": "Theming and dark mode strategies are essential for creating inclusive, user-friendly applications that adapt to different preferences and environments. This comprehensive lesson explores advanced techniques for implementing sophisticated theming systems and seamless dark mode experiences with Tailwind CSS.\n\nYou'll learn to create themeable components that adapt to different color schemes, implement smooth transitions between themes, and manage user preferences with proper persistence. We'll explore advanced patterns for handling system preferences, creating custom themes, and optimizing themes for accessibility standards.\n\nThe lesson covers practical implementation strategies for managing theme state, creating themeable design systems, and ensuring consistent experiences across different devices and contexts. You'll discover how to balance aesthetic appeal with accessibility requirements and performance considerations.\n\nBy mastering theming and dark mode strategies, you'll be able to create applications that provide personalized experiences while maintaining usability and accessibility for all users.",
  "code": {
    "example": "// Advanced Theming and Dark Mode Implementation\n\n// Tailwind configuration for advanced theming\n// tailwind.config.js\nmodule.exports = {\n  darkMode: 'class', // Enable class-based dark mode\n  theme: {\n    extend: {\n      // Extended color palette with themeable colors\n      colors: {\n        // Primary color palette\n        primary: {\n          50: 'rgb(var(--color-primary-50) / <alpha-value>)',\n          100: 'rgb(var(--color-primary-100) / <alpha-value>)',\n          200: 'rgb(var(--color-primary-200) / <alpha-value>)',\n          300: 'rgb(var(--color-primary-300) / <alpha-value>)',\n          400: 'rgb(var(--color-primary-400) / <alpha-value>)',\n          500: 'rgb(var(--color-primary-500) / <alpha-value>)',\n          600: 'rgb(var(--color-primary-600) / <alpha-value>)',\n          700: 'rgb(var(--color-primary-700) / <alpha-value>)',\n          800: 'rgb(var(--color-primary-800) / <alpha-value>)',\n          900: 'rgb(var(--color-primary-900) / <alpha-value>)',\n        },\n        \n        // Secondary color palette\n        secondary: {\n          50: 'rgb(var(--color-secondary-50) / <alpha-value>)',\n          100: 'rgb(var(--color-secondary-100) / <alpha-value>)',\n          200: 'rgb(var(--color-secondary-200) / <alpha-value>)',\n          300: 'rgb(var(--color-secondary-300) / <alpha-value>)',\n          400: 'rgb(var(--color-secondary-400) / <alpha-value>)',\n          500: 'rgb(var(--color-secondary-500) / <alpha-value>)',\n          600: 'rgb(var(--color-secondary-600) / <alpha-value>)',\n          700: 'rgb(var(--color-secondary-700) / <alpha-value>)',\n          800: 'rgb(var(--color-secondary-800) / <alpha-value>)',\n          900: 'rgb(var(--color-secondary-900) / <alpha-value>)',\n        },\n        \n        // Background colors\n        background: {\n          DEFAULT: 'rgb(var(--color-background) / <alpha-value>)',\n          surface: 'rgb(var(--color-background-surface) / <alpha-value>)',\n          overlay: 'rgb(var(--color-background-overlay) / <alpha-value>)',\n        },\n        \n        // Text colors\n        text: {\n          primary: 'rgb(var(--color-text-primary) / <alpha-value>)',\n          secondary: 'rgb(var(--color-text-secondary) / <alpha-value>)',\n          tertiary: 'rgb(var(--color-text-tertiary) / <alpha-value>)',\n          disabled: 'rgb(var(--color-text-disabled) / <alpha-value>)',\n        }\n      }\n    }\n  },\n  plugins: [\n    // Theme management plugin\n    plugin(function({ addBase, theme }) {\n      addBase({\n        // Light theme variables\n        ':root': {\n          '--color-primary-50': '239 246 255',\n          '--color-primary-100': '219 234 254',\n          '--color-primary-200': '191 219 254',\n          '--color-primary-300': '147 197 253',\n          '--color-primary-400': '96 165 250',\n          '--color-primary-500': '59 130 246',\n          '--color-primary-600': '37 99 235',\n          '--color-primary-700': '29 78 216',\n          '--color-primary-800': '30 64 175',\n          '--color-primary-900': '30 58 138',\n          \n          '--color-secondary-50': '240 249 255',\n          '--color-secondary-100': '224 242 254',\n          '--color-secondary-200': '186 230 253',\n          '--color-secondary-300': '125 211 252',\n          '--color-secondary-400': '56 189 248',\n          '--color-secondary-500': '14 165 233',\n          '--color-secondary-600': '2 132 199',\n          '--color-secondary-700': '3 105 161',\n          '--color-secondary-800': '7 89 133',\n          '--color-secondary-900': '12 74 110',\n          \n          '--color-background': '255 255 255',\n          '--color-background-surface': '248 250 252',\n          '--color-background-overlay': '255 255 255',\n          \n          '--color-text-primary': '15 23 42',\n          '--color-text-secondary': '100 116 139',\n          '--color-text-tertiary': '148 163 184',\n          '--color-text-disabled': '203 213 225',\n        },\n        \n        // Dark theme variables\n        '.dark': {\n          '--color-primary-50': '30 58 138',\n          '--color-primary-100': '30 64 175',\n          '--color-primary-200': '29 78 216',\n          '--color-primary-300': '37 99 235',\n          '--color-primary-400': '59 130 246',\n          '--color-primary-500': '96 165 250',\n          '--color-primary-600': '147 197 253',\n          '--color-primary-700': '191 219 254',\n          '--color-primary-800': '219 234 254',\n          '--color-primary-900': '239 246 255',\n          \n          '--color-secondary-50': '12 74 110',\n          '--color-secondary-100': '7 89 133',\n          '--color-secondary-200': '3 105 161',\n          '--color-secondary-300': '2 132 199',\n          '--color-secondary-400': '14 165 233',\n          '--color-secondary-500': '56 189 248',\n          '--color-secondary-600': '125 211 252',\n          '--color-secondary-700': '186 230 253',\n          '--color-secondary-800': '224 242 254',\n          '--color-secondary-900': '240 249 255',\n          \n          '--color-background': '15 23 42',\n          '--color-background-surface': '30 41 59',\n          '--color-background-overlay': '51 65 85',\n          \n          '--color-text-primary': '241 245 249',\n          '--color-text-secondary': '203 213 225',\n          '--color-text-tertiary': '148 163 184',\n          '--color-text-disabled': '100 116 139',\n        }\n      });\n    })\n  ]\n}\n\n// Theme management JavaScript\n// src/hooks/useTheme.js\nimport { useEffect, useState } from 'react';\n\nexport function useTheme() {\n  const [theme, setTheme] = useState('system');\n  \n  useEffect(() => {\n    // Check for saved theme preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setTheme(savedTheme);\n      applyTheme(savedTheme);\n    } else {\n      // Check system preference\n      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setTheme(systemPrefersDark ? 'dark' : 'light');\n      applyTheme(systemPrefersDark ? 'dark' : 'light');\n    }\n  }, []);\n  \n  const applyTheme = (newTheme) => {\n    if (newTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else if (newTheme === 'light') {\n      document.documentElement.classList.remove('dark');\n    } else {\n      // System preference\n      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      if (systemPrefersDark) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    }\n  };\n  \n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    applyTheme(newTheme);\n  };\n  \n  const setThemePreference = (newTheme) => {\n    setTheme(newTheme);\n    if (newTheme !== 'system') {\n      localStorage.setItem('theme', newTheme);\n    } else {\n      localStorage.removeItem('theme');\n    }\n    applyTheme(newTheme);\n  };\n  \n  return { theme, toggleTheme, setThemePreference };\n}\n\n// Theme switcher component\n// src/components/ThemeSwitcher.js\nimport React from 'react';\nimport { useTheme } from '../hooks/useTheme';\n\nconst ThemeSwitcher = () => {\n  const { theme, setThemePreference } = useTheme();\n  \n  return (\n    <div className=\"flex items-center space-x-2\">\n      <span className=\"text-sm font-medium text-text-primary\">Theme:</span>\n      <select \n        value={theme}\n        onChange={(e) => setThemePreference(e.target.value)}\n        className=\"bg-background-surface border border-border rounded-md px-2 py-1 text-sm text-text-primary focus:outline-none focus:ring-2 focus:ring-primary-500\"\n      >\n        <option value=\"system\">System</option>\n        <option value=\"light\">Light</option>\n        <option value=\"dark\">Dark</option>\n      </select>\n      \n      <button\n        onClick={() => setThemePreference(theme === 'light' ? 'dark' : 'light')}\n        className=\"p-2 rounded-md bg-background-surface border border-border text-text-primary hover:bg-background-overlay transition-colors\"\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'dark' ? (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\" />\n          </svg>\n        ) : (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\" />\n          </svg>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ThemeSwitcher;\n\n// Smooth theme transition CSS\n// Add to your global CSS\n/*\n:root {\n  --transition-duration: 300ms;\n  --transition-timing: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n*,\n*::before,\n*::after {\n  transition: background-color, border-color var(--transition-duration) var(--transition-timing);\n}\n\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    transition: none;\n  }\n}\n*/\n\n// Usage examples:\n// <div className=\"bg-background text-text-primary p-4\">\n//   <h1 className=\"text-2xl font-bold mb-2\">Themeable Content</h1>\n//   <p className=\"mb-4\">This content adapts to the current theme.</p>\n//   <ThemeSwitcher />\n// </div>",
    "explanation": "This example demonstrates advanced theming and dark mode implementation with Tailwind CSS. Key features include:\n\n1. CSS variable-based color system for theme switching\n2. Class-based dark mode configuration\n3. React hook for theme management\n4. Theme persistence with localStorage\n5. System preference detection\n6. Smooth theme transitions\n7. Accessible theme switcher component\n\nThe implementation provides a robust foundation for themeable applications with proper accessibility considerations and performance optimization.",
    "language": "javascript"
  },
  "pitfalls": [
    {
      "mistake": "Not considering accessibility when implementing dark mode",
      "solution": "Ensure proper color contrast ratios and test with accessibility tools",
      "severity": "high"
    },
    {
      "mistake": "Creating jarring theme transitions that disrupt user experience",
      "solution": "Implement smooth transitions and respect user motion preferences",
      "severity": "medium"
    },
    {
      "mistake": "Not handling system preference changes dynamically",
      "solution": "Listen for system preference changes and update themes accordingly",
      "severity": "medium"
    }
  ],
  "exercises": [
    {
      "title": "Implement a Comprehensive Theme System",
      "description": "Create a complete theme system with light/dark modes, system preference detection, and smooth transitions",
      "checkpoints": [
        "Implement CSS variable-based color system",
        "Create theme management with persistence",
        "Build accessible theme switcher component",
        "Add smooth theme transitions",
        "Handle system preference changes"
      ]
    }
  ],
  "next": [],
  "estimatedMinutes": 55,
  "difficulty": "Advanced",
  "tags": [
    "Theming",
    "Dark Mode",
    "Accessibility",
    "CSS Variables",
    "React",
    "Tailwind CSS"
  ],
  "lastUpdated": "2025-10-03T10:00:00Z",
  "version": "1.0.0"
}