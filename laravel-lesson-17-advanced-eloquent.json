{
  "id": "laravel-fundamentals-lesson-17",
  "moduleSlug": "laravel-fundamentals",
  "title": "Advanced Eloquent Relationships",
  "order": 17,
  "objectives": [
    "Master polymorphic relationships in Eloquent ORM",
    "Implement relationship constraints and custom relationship methods",
    "Utilize relationship existence and absence queries effectively",
    "Optimize complex relationship queries with advanced eager loading"
  ],
  "intro": "Advanced Eloquent relationships in Laravel provide powerful mechanisms for modeling complex data associations that go beyond basic one-to-many and many-to-many relationships. This comprehensive lesson explores sophisticated relationship patterns including polymorphic relationships, custom relationship methods, and advanced querying techniques that enable you to build highly flexible and efficient data models.\n\nYou'll learn to implement polymorphic relationships that allow a model to belong to more than one other model on a single association, creating versatile data structures for scenarios like media attachments, comments systems, and activity logs. We'll also explore custom relationship methods that extend Laravel's built-in relationships with domain-specific logic.\n\nAdvanced querying techniques covered include relationship existence and absence queries that enable complex filtering based on related model conditions, and sophisticated eager loading strategies that optimize performance for deeply nested relationships. These techniques are essential for building high-performance applications with complex data requirements.\n\nBy mastering advanced Eloquent relationships, you'll be able to create data models that accurately represent complex business domains while maintaining optimal performance and code maintainability. This knowledge is crucial for senior Laravel developers working on enterprise applications with intricate data relationships.",
  "code": {
    "example": "<?php\n// Polymorphic Relationships\n// Models\n\nclass Photo extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\nclass User extends Model\n{\n    public function photos()\n    {\n        return $this->morphMany(Photo::class, 'imageable');\n    }\n}\n\nclass Post extends Model\n{\n    public function photos()\n    {\n        return $this->morphMany(Photo::class, 'imageable');\n    }\n}\n\n// Usage\n$user = User::find(1);\n$user->photos()->create(['path' => 'user-avatar.jpg']);\n\n$post = Post::find(1);\n$post->photos()->create(['path' => 'post-image.jpg']);\n\n// Querying Polymorphic Relationships\n$photos = Photo::with('imageable')->get();\n\n// Custom Relationship Methods\nclass User extends Model\n{\n    public function posts()\n    {\n        return $this->hasMany(Post::class);\n    }\n    \n    public function publishedPosts()\n    {\n        return $this->posts()->where('status', 'published');\n    }\n    \n    public function recentPosts($limit = 5)\n    {\n        return $this->posts()->latest()->limit($limit);\n    }\n}\n\n// Relationship Existence Queries\n$users = User::has('posts')->get();\n$users = User::has('posts', '>=', 3)->get();\n$users = User::whereHas('posts', function ($query) {\n    $query->where('status', 'published');\n})->get();\n\n// Advanced Eager Loading\n$users = User::with([\n    'posts' => function ($query) {\n        $query->where('status', 'published')\n              ->withCount('comments')\n              ->orderBy('created_at', 'desc');\n    }\n])->get();",
    "explanation": "This example demonstrates advanced Eloquent relationship patterns including polymorphic relationships that allow a single model to belong to multiple types of parent models, custom relationship methods that add domain-specific constraints, relationship existence queries for complex filtering, and advanced eager loading techniques for performance optimization. These patterns enable sophisticated data modeling while maintaining clean, expressive code.",
    "language": "php"
  },
  "pitfalls": [
    {
      "mistake": "Overusing polymorphic relationships when simpler relationships would suffice",
      "solution": "Use polymorphic relationships only when you truly need a model to belong to multiple types of parent models",
      "severity": "medium"
    },
    {
      "mistake": "Not properly constraining eager loaded relationships leading to N+1 query problems",
      "solution": "Always apply appropriate constraints in eager loading callbacks and use relationship existence queries when filtering",
      "severity": "high"
    },
    {
      "mistake": "Creating overly complex custom relationship methods that are difficult to maintain",
      "solution": "Keep custom relationship methods focused and well-documented, following the single responsibility principle",
      "severity": "medium"
    }
  ],
  "exercises": [
    {
      "title": "Build a Content Management System with Polymorphic Relationships",
      "description": "Create a flexible CMS that supports comments on multiple content types (posts, pages, media) using polymorphic relationships, implement custom relationship methods for content filtering, and optimize queries with advanced eager loading",
      "checkpoints": [
        "Implement polymorphic comments system for posts, pages, and media",
        "Create custom relationship methods for content status filtering",
        "Optimize content queries with constrained eager loading",
        "Add relationship existence queries for content statistics"
      ]
    }
  ],
  "next": [],
  "estimatedMinutes": 45,
  "difficulty": "Advanced",
  "tags": [
    "Eloquent",
    "Relationships",
    "Polymorphic",
    "Database",
    "ORM",
    "Laravel"
  ],
  "lastUpdated": "2025-10-03T00:00:00.000Z",
  "version": "1.0.0"
}