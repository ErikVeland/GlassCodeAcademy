{
  "id": "sass-lesson-16-theming-customization",
  "moduleSlug": "sass-advanced",
  "title": "Theming and Customization Strategies",
  "order": 16,
  "objectives": [
    "Master advanced theming techniques with Sass maps and functions",
    "Implement customizable design systems with CSS custom properties",
    "Create flexible component themes with dynamic token systems",
    "Develop theme switching mechanisms for light/dark modes"
  ],
  "intro": "Theming and customization are critical aspects of modern design systems that allow for flexible, maintainable, and scalable user interfaces. This comprehensive lesson explores advanced Sass techniques for creating robust theming systems that can adapt to different brand requirements, user preferences, and accessibility needs.\n\nYou'll learn to implement sophisticated theme architectures using Sass maps, functions, and mixins that enable seamless theme switching and customization. We'll explore how to combine Sass variables with CSS custom properties to create hybrid theming systems that offer both compile-time and runtime flexibility.\n\nThe lesson covers practical implementation patterns for managing color palettes, typography scales, spacing systems, and component variations. You'll discover how to create themeable components that can adapt to different contexts while maintaining consistent design language.\n\nBy mastering these theming strategies, you'll be able to build design systems that scale across multiple products, brands, and user preferences while maintaining code quality and developer experience.",
  "code": {
    "example": "// Advanced Theme System with Sass Maps and CSS Custom Properties\n\n// Theme token definitions\n$themes: (\n  light: (\n    colors: (\n      primary: (\n        base: #007bff,\n        light: #3395ff,\n        dark: #0062cc,\n        contrast: #ffffff\n      ),\n      secondary: (\n        base: #6c757d,\n        light: #868e96,\n        dark: #545b62,\n        contrast: #ffffff\n      ),\n      background: (\n        page: #ffffff,\n        surface: #f8f9fa,\n        overlay: #ffffff\n      ),\n      text: (\n        primary: #212529,\n        secondary: #6c757d,\n        disabled: #adb5bd\n      )\n    ),\n    typography: (\n      font-family: ('Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif),\n      font-sizes: (\n        xs: 0.75rem,\n        sm: 0.875rem,\n        base: 1rem,\n        lg: 1.125rem,\n        xl: 1.25rem,\n        '2xl': 1.5rem,\n        '3xl': 1.875rem\n      ),\n      font-weights: (\n        normal: 400,\n        medium: 500,\n        semibold: 600,\n        bold: 700\n      )\n    ),\n    shadows: (\n      sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05),\n      base: 0 1px 3px 0 rgba(0, 0, 0, 0.1),\n      md: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n      lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\n      xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1)\n    )\n  ),\n  dark: (\n    colors: (\n      primary: (\n        base: #0d6efd,\n        light: #3d8bfd,\n        dark: #0a58ca,\n        contrast: #ffffff\n      ),\n      secondary: (\n        base: #6c757d,\n        light: #7c858d,\n        dark: #5c636a,\n        contrast: #ffffff\n      ),\n      background: (\n        page: #121212,\n        surface: #1e1e1e,\n        overlay: #2d2d2d\n      ),\n      text: (\n        primary: #e9ecef,\n        secondary: #adb5bd,\n        disabled: #6c757d\n      )\n    ),\n    typography: (\n      font-family: ('Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif),\n      font-sizes: (\n        xs: 0.75rem,\n        sm: 0.875rem,\n        base: 1rem,\n        lg: 1.125rem,\n        xl: 1.25rem,\n        '2xl': 1.5rem,\n        '3xl': 1.875rem\n      ),\n      font-weights: (\n        normal: 400,\n        medium: 500,\n        semibold: 600,\n        bold: 700\n      )\n    ),\n    shadows: (\n      sm: 0 1px 2px 0 rgba(0, 0, 0, 0.3),\n      base: 0 1px 3px 0 rgba(0, 0, 0, 0.4),\n      md: 0 4px 6px -1px rgba(0, 0, 0, 0.4),\n      lg: 0 10px 15px -3px rgba(0, 0, 0, 0.4),\n      xl: 0 20px 25px -5px rgba(0, 0, 0, 0.4)\n    )\n  )\n);\n\n// Theme utility functions\n@function theme-get($keys...) {\n  $value: $themes;\n  \n  @each $key in $keys {\n    @if type-of($value) == 'map' and map-has-key($value, $key) {\n      $value: map-get($value, $key);\n    } @else {\n      @return null;\n    }\n  }\n  \n  @return $value;\n}\n\n@function theme-color($color-name, $tone: base, $theme: light) {\n  @return theme-get($theme, colors, $color-name, $tone);\n}\n\n@function theme-font-size($size-name) {\n  @return theme-get(light, typography, font-sizes, $size-name);\n}\n\n@function theme-shadow($shadow-name) {\n  @return theme-get(light, shadows, $shadow-name);\n}\n\n// Generate CSS custom properties for runtime theming\n@mixin generate-theme-variables($theme-name) {\n  $theme: map-get($themes, $theme-name);\n  $colors: map-get($theme, colors);\n  $typography: map-get($theme, typography);\n  $shadows: map-get($theme, shadows);\n  \n  // Generate color variables\n  @each $color-name, $color-map in $colors {\n    @each $tone-name, $tone-value in $color-map {\n      --color-#{$color-name}-#{$tone-name}: #{$tone-value};\n    }\n  }\n  \n  // Generate typography variables\n  $font-sizes: map-get($typography, font-sizes);\n  $font-weights: map-get($typography, font-weights);\n  \n  @each $size-name, $size-value in $font-sizes {\n    --font-size-#{$size-name}: #{$size-value};\n  }\n  \n  @each $weight-name, $weight-value in $font-weights {\n    --font-weight-#{$weight-name}: #{$weight-value};\n  }\n  \n  // Generate shadow variables\n  @each $shadow-name, $shadow-value in $shadows {\n    --shadow-#{$shadow-name}: #{$shadow-value};\n  }\n}\n\n// Theme root classes\n[data-theme=\"light\"] {\n  @include generate-theme-variables(light);\n}\n\n[data-theme=\"dark\"] {\n  @include generate-theme-variables(dark);\n}\n\n// Component theming example\n.button {\n  // Base styles using CSS custom properties\n  background-color: var(--color-primary-base);\n  color: var(--color-primary-contrast);\n  border: none;\n  border-radius: 4px;\n  padding: 0.5rem 1rem;\n  font-size: var(--font-size-base);\n  font-weight: var(--font-weight-medium);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  // Sass fallbacks for older browsers\n  background-color: theme-color(primary, base, light);\n  color: theme-color(primary, contrast, light);\n  \n  &:hover {\n    background-color: var(--color-primary-dark);\n    box-shadow: var(--shadow-md);\n    \n    // Sass fallback\n    background-color: theme-color(primary, dark, light);\n  }\n  \n  // Variant modifiers\n  &--secondary {\n    background-color: var(--color-secondary-base);\n    color: var(--color-secondary-contrast);\n    \n    // Sass fallback\n    background-color: theme-color(secondary, base, light);\n    color: theme-color(secondary, contrast, light);\n    \n    &:hover {\n      background-color: var(--color-secondary-dark);\n      \n      // Sass fallback\n      background-color: theme-color(secondary, dark, light);\n    }\n  }\n  \n  // Size modifiers\n  &--small {\n    padding: 0.25rem 0.75rem;\n    font-size: var(--font-size-sm);\n  }\n  \n  &--large {\n    padding: 0.75rem 1.5rem;\n    font-size: var(--font-size-lg);\n  }\n}\n\n// Theme switching JavaScript\n/*\nconst themeToggle = document.getElementById('theme-toggle');\nconst currentTheme = localStorage.getItem('theme') || 'light';\n\ndocument.documentElement.setAttribute('data-theme', currentTheme);\n\nthemeToggle.addEventListener('click', () => {\n  const current = document.documentElement.getAttribute('data-theme');\n  const next = current === 'light' ? 'dark' : 'light';\n  \n  document.documentElement.setAttribute('data-theme', next);\n  localStorage.setItem('theme', next);\n});\n*/",
    "explanation": "This example demonstrates a comprehensive theming system that combines Sass maps and functions with CSS custom properties. The system provides both compile-time flexibility through Sass and runtime customization through CSS variables. Key features include:\n\n1. Nested theme maps for organizing design tokens\n2. Utility functions for accessing theme values\n3. Mixins for generating CSS custom properties\n4. Component examples with theme-aware styling\n5. JavaScript for theme switching\n\nThe implementation allows for seamless theme switching while maintaining performance through Sass compilation and providing runtime flexibility through CSS variables.",
    "language": "scss"
  },
  "pitfalls": [
    {
      "mistake": "Overcomplicating theme structures with too many nested maps",
      "solution": "Keep theme structures flat and organized by category, use clear naming conventions",
      "severity": "medium"
    },
    {
      "mistake": "Not providing fallbacks for older browsers that don't support CSS custom properties",
      "solution": "Use Sass variables as fallbacks and implement feature detection",
      "severity": "high"
    },
    {
      "mistake": "Hardcoding theme values in components instead of using the theme system",
      "solution": "Always reference theme tokens through the established system",
      "severity": "high"
    }
  ],
  "exercises": [
    {
      "title": "Build a Comprehensive Theme System",
      "description": "Create a complete theme system for a design system with multiple color palettes, typography scales, and spacing systems",
      "checkpoints": [
        "Define theme tokens using Sass maps for light and dark themes",
        "Implement utility functions for accessing theme values",
        "Create mixins for generating CSS custom properties",
        "Build themeable components with proper fallbacks",
        "Implement theme switching with localStorage persistence"
      ]
    }
  ],
  "next": [],
  "estimatedMinutes": 45,
  "difficulty": "Advanced",
  "tags": [
    "Theming",
    "Customization",
    "Design Systems",
    "Sass Maps",
    "CSS Custom Properties",
    "Accessibility"
  ],
  "lastUpdated": "2025-10-03T10:00:00Z",
  "version": "1.0.0"
}