[
  {
    "id": 1,
    "question": "Which command is used to create a new Git repository in the current directory?",
    "topic": "Version Control",
    "choices": [
      "git init",
      "git create",
      "git new",
      "git start"
    ],
    "correctIndex": 0,
    "explanation": "The 'git init' command initializes a new Git repository in the current directory, creating a .git folder that contains all the repository metadata. This is the first step in version controlling any project."
  },
  {
    "id": 2,
    "question": "What is the correct workflow to commit changes in Git?",
    "topic": "Version Control",
    "choices": [
      "git add → git commit",
      "git commit → git add",
      "git push → git commit",
      "git commit only (no add needed)"
    ],
    "correctIndex": 0,
    "explanation": "The correct Git workflow is to first stage changes with 'git add' (adding them to the staging area), then commit them with 'git commit'. This two-step process allows you to carefully control which changes are included in each commit."
  },
  {
    "id": 3,
    "question": "Which command creates a new branch AND switches to it immediately?",
    "topic": "Version Control",
    "choices": [
      "git checkout -b feature-branch",
      "git branch feature-branch",
      "git switch feature-branch",
      "git create feature-branch"
    ],
    "correctIndex": 0,
    "explanation": "'git checkout -b feature-branch' creates a new branch called 'feature-branch' and immediately switches to it. The newer equivalent is 'git switch -c feature-branch'. Option B only creates the branch without switching to it."
  },
  {
    "id": 4,
    "question": "What happens when you encounter a merge conflict in Git?",
    "topic": "Version Control",
    "choices": [
      "Git stops the merge and requires manual resolution",
      "Git automatically chooses the newer version",
      "Git automatically chooses the older version",
      "Git creates two separate files"
    ],
    "correctIndex": 0,
    "explanation": "When Git encounters a merge conflict (same lines modified in different ways), it stops the merge process and marks the conflicted sections in the files. You must manually edit the files to resolve conflicts, then add and commit the resolved files."
  },
  {
    "id": 5,
    "question": "Which file is used to specify which files Git should ignore?",
    "topic": "Version Control",
    "choices": [
      ".gitignore",
      ".gitexclude",
      "ignore.txt",
      ".ignore"
    ],
    "correctIndex": 0,
    "explanation": "The '.gitignore' file contains patterns for files and directories that Git should not track. This is essential for excluding build artifacts, dependencies, IDE files, and sensitive information from version control."
  },
  {
    "id": 6,
    "question": "How do you push a local branch to a remote repository for the first time?",
    "topic": "Version Control",
    "choices": [
      "git push -u origin branch-name",
      "git push branch-name",
      "git push --new origin branch-name",
      "git upload branch-name"
    ],
    "correctIndex": 0,
    "explanation": "The command 'git push -u origin branch-name' pushes a local branch to the remote repository and sets up tracking. The -u flag (or --set-upstream) establishes a relationship between the local and remote branches for future pushes and pulls."
  },
  {
    "id": 7,
    "question": "What is the purpose of 'git stash'?",
    "topic": "Version Control",
    "choices": [
      "Temporarily save changes without committing them",
      "Permanently delete all changes",
      "Create a backup of the entire repository",
      "Synchronize with the remote repository"
    ],
    "correctIndex": 0,
    "explanation": "'git stash' temporarily saves your current changes without committing them, allowing you to switch branches or pull updates without committing incomplete work. You can later restore the stashed changes with 'git stash pop' or 'git stash apply'."
  },
  {
    "id": 8,
    "question": "Which Git workflow is best for continuous deployment?",
    "topic": "Version Control",
    "choices": [
      "GitHub Flow",
      "Git Flow",
      "Centralized Workflow",
      "Forking Workflow"
    ],
    "correctIndex": 0,
    "explanation": "GitHub Flow is a simple workflow ideal for continuous deployment. It involves creating feature branches from main, making changes, opening pull requests for review, and merging back to main for immediate deployment. Git Flow is more complex and better suited for versioned releases."
  },
  {
    "id": 9,
    "question": "What does 'git rebase' do?",
    "topic": "Version Control",
    "choices": [
      "Moves or combines commits to create a linear history",
      "Deletes commits from the repository",
      "Creates a backup of the current branch",
      "Synchronizes with the remote repository"
    ],
    "correctIndex": 0,
    "explanation": "'git rebase' moves or combines commits to create a linear project history. It reapplies commits from the current branch on top of another base tip, resulting in a cleaner, linear history compared to merging."
  },
  {
    "id": 10,
    "question": "How do you create an annotated tag in Git?",
    "topic": "Version Control",
    "choices": [
      "git tag -a v1.0.0 -m \"Release version 1.0.0\"",
      "git tag v1.0.0",
      "git create-tag v1.0.0",
      "git mark v1.0.0"
    ],
    "correctIndex": 0,
    "explanation": "The command 'git tag -a v1.0.0 -m \"Release version 1.0.0\"' creates an annotated tag with a message. Annotated tags store additional metadata including the tagger name, email, date, and message, making them more complete than lightweight tags created with 'git tag v1.0.0'."
  },
  {
    "id": 11,
    "question": "What is the purpose of 'git cherry-pick'?",
    "topic": "Version Control",
    "choices": [
      "To apply the changes introduced by some existing commits",
      "To delete a specific commit",
      "To create a new branch from a commit",
      "To merge two branches together"
    ],
    "correctIndex": 0,
    "explanation": "'git cherry-pick' applies the changes introduced by some existing commits to the current branch. It's useful for applying specific commits from one branch to another without merging the entire branch."
  },
  {
    "id": 12,
    "question": "Which command shows the commit history in a compact format?",
    "topic": "Version Control",
    "choices": [
      "git log --oneline",
      "git history --short",
      "git commits --brief",
      "git show --compact"
    ],
    "correctIndex": 0,
    "explanation": "'git log --oneline' displays the commit history in a compact format, showing each commit on a single line with its abbreviated commit hash and commit message. This is useful for quickly reviewing the commit history."
  },
  {
    "id": 13,
    "question": "What does 'git reset --hard' do?",
    "topic": "Version Control",
    "choices": [
      "Resets the working directory and index to match a specific commit, discarding all changes",
      "Resets only the index to match a specific commit",
      "Resets only the working directory to match a specific commit",
      "Creates a backup of the current state before resetting"
    ],
    "correctIndex": 0,
    "explanation": "'git reset --hard' resets both the working directory and the index to match a specific commit, discarding all changes in both. This is a destructive operation that permanently deletes uncommitted changes, so it should be used with caution."
  },
  {
    "id": 14,
    "question": "Which Git command is used to compare changes between commits?",
    "topic": "Version Control",
    "choices": [
      "git diff",
      "git compare",
      "git changes",
      "git show"
    ],
    "correctIndex": 0,
    "explanation": "'git diff' is used to compare changes between commits, between the working directory and the index, or between branches. It shows the differences in a format similar to the Unix diff command."
  },
  {
    "id": 15,
    "question": "What is the purpose of a Git hook?",
    "topic": "Version Control",
    "choices": [
      "To trigger custom scripts at certain points in the Git workflow",
      "To connect to a remote repository",
      "To merge branches automatically",
      "To compress the repository size"
    ],
    "correctIndex": 0,
    "explanation": "Git hooks are scripts that Git executes before or after events such as commit, push, or merge. They allow you to customize Git's behavior and automate tasks in your development workflow."
  },
  {
    "id": 16,
    "question": "Which command is used to undo the last commit but keep the changes in the working directory?",
    "topic": "Version Control",
    "choices": [
      "git reset --soft HEAD~1",
      "git revert HEAD",
      "git undo last-commit",
      "git commit --undo"
    ],
    "correctIndex": 0,
    "explanation": "'git reset --soft HEAD~1' undoes the last commit but keeps the changes staged in the index. This allows you to modify the commit before committing again. The changes remain in your working directory and index."
  },
  {
    "id": 17,
    "question": "What does 'git bisect' do?",
    "topic": "Version Control",
    "choices": [
      "Helps find the commit that introduced a bug using binary search",
      "Splits a repository into two parts",
      "Compares two branches side by side",
      "Merges multiple commits into one"
    ],
    "correctIndex": 0,
    "explanation": "'git bisect' uses a binary search algorithm to help you find the commit that introduced a bug. You mark a known good commit and a known bad commit, and Git checks out commits in between for you to test until you find the problematic commit."
  },
  {
    "id": 18,
    "question": "Which command is used to fetch changes from a remote repository without merging them?",
    "topic": "Version Control",
    "choices": [
      "git fetch",
      "git pull",
      "git update",
      "git sync"
    ],
    "correctIndex": 0,
    "explanation": "'git fetch' downloads changes from a remote repository but does not merge them into your current branch. This allows you to review the changes before deciding whether to merge them with 'git merge' or 'git pull'."
  },
  {
    "id": 19,
    "question": "What is the purpose of 'git reflog'?",
 "topic": "Version Control",
    "choices": [
      "Shows a log of when the tips of branches and other references were updated",
      "Displays the reference manual for Git commands",
      "Lists all remote repository references",
      "Shows the log of file references in the repository"
    ],
    "correctIndex": 0,
    "explanation": "'git reflog' shows a log of when the tips of branches and other references were updated. It's particularly useful for recovering from mistakes, as it shows commits that might otherwise be lost, including commits that were reset or rebased."
  },
  {
    "id": 20,
    "question": "Which command is used to combine multiple commits into a single commit?",
    "topic": "Version Control",
    "choices": [
      "git rebase -i",
      "git squash",
      "git combine",
      "git merge --flatten"
    ],
    "correctIndex": 0,
    "explanation": "'git rebase -i' (interactive rebase) is used to combine multiple commits into a single commit. During the interactive rebase, you can choose to 'squash' or 'fixup' commits to combine them with previous commits."
  },
  {
    "id": 21,
    "question": "What does 'git blame' do?",
    "topic": "Version Control",
    "choices": [
      "Shows what revision and author last modified each line of a file",
      "Assigns responsibility for bugs to specific developers",
      "Highlights lines of code that have been changed recently",
      "Displays a list of files that have been modified"
    ],
    "correctIndex": 0,
    "explanation": "'git blame' shows what revision and author last modified each line of a file. It's useful for understanding when and why specific lines of code were changed, and who made those changes."
  },
  {
    "id": 22,
    "question": "Which Git command is used to create a bare repository?",
    "topic": "Version Control",
    "choices": [
      "git init --bare",
      "git create --empty",
      "git init --empty",
      "git bare init"
    ],
    "correctIndex": 0,
    "explanation": "'git init --bare' creates a bare repository, which is a repository that doesn't have a working directory. Bare repositories are typically used as central repositories that developers push to and pull from."
  },
  {
    "id": 23,
    "question": "What is the purpose of 'git clean'?",
    "topic": "Version Control",
    "choices": [
      "Removes untracked files from the working directory",
      "Deletes the entire repository",
      "Clears the Git cache",
      "Resets all changes in the repository"
    ],
    "correctIndex": 0,
    "explanation": "'git clean' removes untracked files from the working directory. Untracked files are files that are not being tracked by Git. This command is useful for cleaning up build artifacts or other generated files."
  },
  {
    "id": 24,
    "question": "Which command is used to list all branches in a repository?",
    "topic": "Version Control",
    "choices": [
      "git branch -a",
      "git branches",
      "git list-branches",
      "git show-branches"
    ],
    "correctIndex": 0,
    "explanation": "'git branch -a' lists all branches in a repository, including both local and remote-tracking branches. The '-a' flag stands for 'all'. Without this flag, 'git branch' only shows local branches."
  },
  {
    "id": 25,
    "question": "What does 'git fsck' do?",
    "topic": "Version Control",
    "choices": [
      "Verifies the connectivity and validity of objects in the database",
      "Checks the file system for errors",
      "Fixes corrupted Git repositories",
      "Synchronizes with the file system"
    ],
    "correctIndex": 0,
    "explanation": "'git fsck' (file system check) verifies the connectivity and validity of objects in the Git database. It checks for corrupt objects, dangling commits, and other integrity issues in the repository."
  },
  {
    "id": 26,
    "question": "Which command is used to configure Git user information?",
    "topic": "Version Control",
    "choices": [
      "git config --global user.name \"Your Name\"",
      "git user set \"Your Name\"",
      "git setup user \"Your Name\"",
      "git profile \"Your Name\""
    ],
    "correctIndex": 0,
    "explanation": "'git config --global user.name \"Your Name\"' is used to configure Git user information. The '--global' flag sets the configuration for all repositories on the system. You also need to set the email with 'git config --global user.email \"your.email@example.com\"'."
  },
  {
    "id": 27,
    "question": "What is the purpose of 'git archive'?",
    "topic": "Version Control",
    "choices": [
      "Creates an archive of files from a named tree",
      "Compresses the entire repository",
      "Backs up the repository to a remote location",
      "Archives old commits to save space"
    ],
    "correctIndex": 0,
    "explanation": "'git archive' creates an archive of files from a named tree, such as a specific commit or branch. It's useful for creating distribution packages or snapshots of the code at a specific point in time."
  },
  {
    "id": 28,
    "question": "Which command is used to show the changes staged for the next commit?",
    "topic": "Version Control",
    "choices": [
      "git diff --cached",
      "git diff --staged",
      "git status --changes",
      "Both A and B are correct"
    ],
    "correctIndex": 3,
    "explanation": "Both 'git diff --cached' and 'git diff --staged' show the changes that are staged for the next commit. '--cached' and '--staged' are synonyms. These commands show what will be included in the next commit."
  },
  {
    "id": 29,
    "question": "What does 'git submodule' do?",
    "topic": "Version Control",
    "choices": [
      "Manages external repositories as subdirectories of the main repository",
      "Creates subdirectories within the repository",
      "Splits the repository into smaller modules",
      "Manages different versions of the same file"
    ],
    "correctIndex": 0,
    "explanation": "'git submodule' allows you to keep a Git repository as a subdirectory of another Git repository. This lets you clone another repository into your project and keep your commits separate."
  },
  {
    "id": 30,
    "question": "Which command is used to temporarily store uncommitted changes?",
    "topic": "Version Control",
    "choices": [
      "git stash",
      "git store",
      "git save",
      "git hold"
    ],
    "correctIndex": 0,
    "explanation": "'git stash' is used to temporarily store uncommitted changes. It saves your local modifications away and reverts the working directory to match the HEAD commit, allowing you to work on something else and come back to your changes later."
  }
]