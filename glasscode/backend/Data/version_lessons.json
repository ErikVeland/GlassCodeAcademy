[
  {
    "id": 1,
    "topic": "Version Control",
    "title": "Git Fundamentals and Setup",
    "description": "Learn the essential Git commands and configuration needed to start version controlling your projects. This lesson covers installation, basic configuration, and the fundamental Git workflow that forms the foundation of all Git operations.",
    "codeExample": "# Git Installation and Configuration\n\n# Install Git (varies by operating system)\n# Windows: Download from git-scm.com\n# macOS: brew install git\n# Linux: sudo apt-get install git (Ubuntu/Debian)\n\n# Configure your identity (required for commits)\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Configure helpful settings\ngit config --global init.defaultBranch main\ngit config --global core.editor \"code --wait\"  # Use VS Code as editor\ngit config --global pull.rebase false  # Use merge strategy for pulls\n\n# Check your configuration\ngit config --list\n\n# Get help for any Git command\ngit help <command>\ngit <command> --help\n\n# Initialize a new Git repository\nmkdir my-project\ncd my-project\ngit init\n\n# Check repository status\ngit status\n\n# Create a simple README file\necho \"# My Project\" > README.md\n\n# Add file to staging area\ngit add README.md\n\n# Create your first commit\ngit commit -m \"Initial commit: Add README\"\n\n# View commit history\ngit log\ngit log --oneline  # Compact view\n\n# Check current branch\ngit branch\n\n# View repository status\ngit status",
    "output": "Successfully configured Git with user identity and created a new repository with an initial commit. The repository is ready for version control operations with proper configuration and a clean history."
  },
  {
    "id": 2,
    "topic": "Version Control",
    "title": "Branching and Merging",
    "description": "Master Git's powerful branching capabilities to work on multiple features simultaneously without interfering with each other. Learn how to create, switch, and merge branches effectively while resolving conflicts that may arise.",
    "codeExample": "# Git Branching and Merging Workflow\n\n# View all branches (local and remote)\ngit branch -a\n\n# Create a new branch for feature development\ngit branch feature/user-authentication\n# OR create and switch in one command\ngit checkout -b feature/user-authentication\n# OR using newer syntax\ngit switch -c feature/user-authentication\n\n# Switch between branches\ngit checkout main\ngit switch feature/user-authentication\n\n# Make changes and commit on feature branch\necho \"function login() { /* TODO */ }\" > auth.js\ngit add auth.js\ngit commit -m \"Add basic authentication function\"\n\n# Switch back to main and create another branch\ngit switch main\ngit switch -c feature/user-profile\n\n# Make different changes\necho \"function getUserProfile() { /* TODO */ }\" > profile.js\ngit add profile.js\ngit commit -m \"Add user profile function\"\n\n# Merge feature branch into main\ngit switch main\ngit merge feature/user-authentication\n\n# If there's a merge conflict, you'll see something like:\n# <<<<<<< HEAD\n# Your changes\n# =======\n# Incoming changes\n# >>>>>>> feature/user-authentication\n\n# Resolve conflicts by editing the file, then:\ngit add <conflicted-file>\ngit commit -m \"Resolve merge conflict\"\n\n# Delete merged branch (optional)\ngit branch -d feature/user-authentication\n\n# View branch history with graph\ngit log --oneline --graph --all\n\n# Create a merge commit even for fast-forward merges\ngit merge --no-ff feature/user-profile\n\n# Rebase instead of merge (alternative workflow)\ngit switch feature/user-profile\ngit rebase main\ngit switch main\ngit merge feature/user-profile  # This will be fast-forward\n\n# Undo a merge (if needed)\ngit reset --hard HEAD~1\n\n# View differences between branches\ngit diff main..feature/user-profile",
    "output": "Successfully created and managed multiple feature branches, merged changes into the main branch, and resolved a merge conflict. The repository now contains features from multiple development streams with a clear history."
  },
  {
    "id": 3,
    "topic": "Version Control",
    "title": "Remote Repositories and Collaboration",
    "description": "Work with remote repositories on platforms like GitHub to collaborate with team members. Learn how to push and pull changes, handle merge conflicts, and participate in collaborative development workflows.",
    "codeExample": "# Working with Remote Repositories and Collaboration\n\n# Clone an existing repository\ngit clone https://github.com/username/repository.git\ncd repository\n\n# View remote repositories\ngit remote -v\n\n# Add a new remote repository\ngit remote add upstream https://github.com/original/repository.git\n\n# Push changes to remote repository\ngit push origin main\n\n# Push a new branch to remote\ngit push -u origin feature/new-feature\n\n# Pull changes from remote repository\ngit pull origin main\n\n# Fetch changes without merging (safer approach)\ngit fetch origin\ngit merge origin/main\n\n# Create a pull request workflow\n# 1. Create feature branch\ngit switch -c feature/user-login\n\n# 2. Make changes and commit\necho 'function login() { /* implementation */ }' > login.js\ngit add login.js\ngit commit -m 'Add user login functionality'\n\n# 3. Push branch to remote\ngit push -u origin feature/user-login\n\n# 4. Create pull request on GitHub (done via web interface)\n\n# Sync with upstream repository (for forked projects)\ngit fetch upstream\ngit switch main\ngit merge upstream/main\ngit push origin main\n\n# Handle merge conflicts\n# When git pull shows conflicts:\n# 1. Edit conflicted files to resolve conflicts\n# 2. Add resolved files\ngit add resolved-file.js\n# 3. Commit the merge\ngit commit\n\n# Review collaborators' changes before merging\ngit log --oneline -10\ngit show commit-hash\n\n# Configure remote tracking branches\ngit branch -u origin/feature-branch\n\n# Remove a remote repository\ngit remote remove upstream\n\n# Check remote branch status\ngit remote show origin\n\n# Pull changes with rebase (keeps history cleaner)\ngit pull --rebase origin main\n\n# Push all branches\ngit push --all origin\n\n# Delete remote branch\ngit push origin --delete feature/old-feature",
    "output": "Successfully cloned a remote repository, pushed changes to a feature branch, and synchronized with upstream changes. The workflow demonstrates effective collaboration practices including pull requests and conflict resolution."
  },
  {
    "id": 4,
    "topic": "Version Control",
    "title": "Git Workflows and Best Practices",
    "description": "Implement industry-standard Git workflows like Git Flow and GitHub Flow. Learn best practices for commit messages, branching strategies, and version management to maintain clean, professional repositories.",
    "codeExample": "# Git Workflows and Best Practices\n\n# GitHub Flow (simple workflow for continuous deployment)\n# 1. Create feature branch from main\ngit switch -c feature/user-dashboard\n\n# 2. Add commits with descriptive messages\ngit add dashboard.html\ngit commit -m 'Add user dashboard layout'\n\n# 3. Push branch to remote\ngit push -u origin feature/user-dashboard\n\n# 4. Open pull request (via GitHub UI)\n\n# 5. Code review and discussion\n\n# 6. Merge into main (via GitHub UI)\n\n# 7. Deploy main to production\n\n# Git Flow (more complex workflow for versioned releases)\n# Initialize Git Flow\ngit flow init\n\n# Start a new feature\ngit flow feature start user-authentication\n\n# Finish feature (merge to develop)\ngit flow feature finish user-authentication\n\n# Start a release\ngit flow release start v1.2.0\n\n# Finish release (merge to main and develop, create tag)\ngit flow release finish v1.2.0\n\n# Start a hotfix\ngit flow hotfix start critical-bugfix\n\n# Finish hotfix\ngit flow hotfix finish critical-bugfix\n\n# Best practices for commit messages\n# Use imperative mood, capitalize first letter, no period at end\ngit commit -m 'Add user authentication endpoints'\ngit commit -m 'Fix null pointer exception in profile service'\ngit commit -m 'Update README with installation instructions'\n\n# Semantic versioning with tags\n# Create annotated tag for release\ngit tag -a v1.0.0 -m 'Release version 1.0.0'\n\n# Push tag to remote\ngit push origin v1.0.0\n\n# List all tags\ngit tag -l\n\n# Create lightweight tag for milestone\ngit tag milestone-1\n\n# Check out code at specific tag\ngit checkout v1.0.0\n\n# Delete local tag\ngit tag -d v1.0.0\n\n# Delete remote tag\ngit push --delete origin v1.0.0\n\n# Best practices for branch naming\ngit switch -c feature/payment-integration  # Features\ngit switch -c bugfix/login-error         # Bug fixes\ngit switch -c hotfix/security-patch       # Urgent fixes\ngit switch -c refactor/api-endpoints      # Refactoring\ngit switch -c docs/update-readme          # Documentation\n\n# Squash commits before merging\ngit rebase -i HEAD~3  # Interactive rebase last 3 commits\n\n# Cherry-pick specific commits\ngit cherry-pick commit-hash\n\n# Stash changes temporarily\ngit stash\ngit stash pop\n\n# Clean up merged branches\ngit branch --merged | grep -v main | xargs git branch -d",
    "output": "Successfully implemented both GitHub Flow and Git Flow workflows, created semantic version tags, and demonstrated best practices for commit messages and branch naming. The repository follows professional standards for version control."
  }
]