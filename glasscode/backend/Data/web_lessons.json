[
  {
    "id": 1,
    "topic": "Web Fundamentals",
    "title": "HTML5 Semantic Elements",
    "description": "Learn how to create accessible and SEO-friendly web pages using HTML5 semantic elements. This lesson covers proper document structure, semantic markup, and HTML5 form validation to build professional websites.",
    "codeExample": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Semantic HTML5 Example</title>\n</head>\n<body>\n    <!-- Main page header -->\n    <header>\n        <h1>My Blog</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#about\">About</a></li>\n                <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <!-- Main content area -->\n    <main>\n        <article>\n            <header>\n                <h2>Understanding Semantic HTML</h2>\n                <time datetime=\"2024-01-15\">January 15, 2024</time>\n            </header>\n            <p>Semantic HTML provides meaning to web content...</p>\n            <section>\n                <h3>Benefits of Semantic HTML</h3>\n                <ul>\n                    <li>Better accessibility</li>\n                    <li>Improved SEO</li>\n                    <li>Cleaner code structure</li>\n                </ul>\n            </section>\n        </article>\n\n        <!-- Contact form with HTML5 validation -->\n        <section>\n            <h3>Contact Form</h3>\n            <form action=\"/submit\" method=\"post\">\n                <div>\n                    <label for=\"name\">Name:</label>\n                    <input type=\"text\" id=\"name\" name=\"name\" required>\n                </div>\n                <div>\n                    <label for=\"email\">Email:</label>\n                    <input type=\"email\" id=\"email\" name=\"email\" required>\n                </div>\n                <div>\n                    <label for=\"phone\">Phone:</label>\n                    <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\">\n                </div>\n                <div>\n                    <label for=\"birthdate\">Birth Date:</label>\n                    <input type=\"date\" id=\"birthdate\" name=\"birthdate\">\n                </div>\n                <button type=\"submit\">Submit</button>\n            </form>\n        </section>\n    </main>\n\n    <!-- Sidebar content -->\n    <aside>\n        <section>\n            <h3>Related Articles</h3>\n            <ul>\n                <li><a href=\"#\">CSS Grid Layout</a></li>\n                <li><a href=\"#\">JavaScript ES6</a></li>\n            </ul>\n        </section>\n    </aside>\n\n    <!-- Page footer -->\n    <footer>\n        <p>&copy; 2024 My Blog. All rights reserved.</p>\n    </footer>\n</body>\n</html>",
    "output": "Successfully created a semantic HTML5 document with proper document structure including header, nav, main, article, section, aside, and footer elements. The contact form includes HTML5 validation attributes for enhanced user experience."
  },
  {
    "id": 2,
    "topic": "Web Fundamentals",
    "title": "CSS3 Layout and Styling",
    "description": "Master modern CSS3 layout techniques using Flexbox and Grid to create responsive, visually appealing websites. Learn advanced styling features including animations, transitions, and responsive design patterns.",
    "codeExample": "/* Modern CSS3 Layout and Styling */\n\n/* CSS Reset and Base Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: #333;\n}\n\n/* Flexbox Layout for Navigation */\n.navbar {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem 2rem;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n}\n\n.nav-links {\n    display: flex;\n    list-style: none;\n    gap: 2rem;\n}\n\n.nav-links a {\n    color: white;\n    text-decoration: none;\n    transition: opacity 0.3s ease;\n}\n\n.nav-links a:hover {\n    opacity: 0.8;\n}\n\n/* CSS Grid Layout for Main Content */\n.container {\n    display: grid;\n    grid-template-columns: 1fr 300px;\n    grid-template-rows: auto 1fr auto;\n    grid-template-areas:\n        'header header'\n        'main sidebar'\n        'footer footer';\n    min-height: 100vh;\n    gap: 2rem;\n    padding: 2rem;\n}\n\n.header { grid-area: header; }\n.main { grid-area: main; }\n.sidebar { grid-area: sidebar; }\n.footer { grid-area: footer; }\n\n/* Card Component with Modern CSS */\n.card {\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    padding: 2rem;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* CSS3 Animations */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.animate-in {\n    animation: fadeInUp 0.6s ease forwards;\n}\n\n/* Responsive Design with Media Queries */\n@media (max-width: 768px) {\n    .container {\n        grid-template-columns: 1fr;\n        grid-template-areas:\n            'header'\n            'main'\n            'sidebar'\n            'footer';\n    }\n    \n    .navbar {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .nav-links {\n        flex-direction: column;\n        text-align: center;\n        gap: 1rem;\n    }\n}\n\n/* Modern CSS Features */\n.button {\n    background: linear-gradient(45deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 1rem 2rem;\n    border-radius: 8px;\n    cursor: pointer;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.button::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: rgba(255, 255, 255, 0.2);\n    transition: left 0.5s ease;\n}\n\n.button:hover::before {\n    left: 100%;\n}",
    "output": "Successfully implemented a responsive layout using CSS Grid and Flexbox with modern styling techniques including gradients, shadows, animations, and media queries. The design adapts seamlessly to different screen sizes while maintaining visual appeal."
  },
  {
    "id": 3,
    "topic": "Web Fundamentals",
    "title": "DOM Manipulation and Event Handling",
    "description": "Learn how to dynamically manipulate web page content using JavaScript and the Document Object Model (DOM). Master event handling to create interactive user experiences and responsive web applications.",
    "codeExample": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>DOM Manipulation Example</title>\n</head>\n<body>\n    <div id=\"container\">\n        <h1 id=\"title\">Task Manager</h1>\n        <input type=\"text\" id=\"taskInput\" placeholder=\"Enter a new task\">\n        <button id=\"addButton\">Add Task</button>\n        <ul id=\"taskList\" class=\"task-list\"></ul>\n    </div>\n\n    <script>\n        // DOM Selection - Multiple ways to access elements\n        const container = document.getElementById('container');\n        const title = document.querySelector('#title');\n        const taskInput = document.querySelector('#taskInput');\n        const addButton = document.querySelector('#addButton');\n        const taskList = document.getElementsByClassName('task-list')[0];\n        \n        // DOM Traversal - Navigating the document structure\n        console.log('Parent of title:', title.parentNode);\n        console.log('Children of container:', container.children);\n        console.log('First child of container:', container.firstElementChild);\n        console.log('Next sibling of title:', title.nextElementSibling);\n        \n        // DOM Manipulation - Creating and modifying elements\n        let taskId = 0;\n        \n        function addTask() {\n            const taskText = taskInput.value.trim();\n            \n            if (taskText === '') {\n                alert('Please enter a task');\n                return;\n            }\n            \n            // Create new elements\n            const li = document.createElement('li');\n            li.className = 'task-item';\n            li.id = `task-${taskId++}`;\n            \n            const span = document.createElement('span');\n            span.textContent = taskText;\n            \n            const deleteButton = document.createElement('button');\n            deleteButton.textContent = 'Delete';\n            deleteButton.onclick = function() {\n                li.remove();\n            };\n            \n            // Append elements\n            li.appendChild(span);\n            li.appendChild(deleteButton);\n            taskList.appendChild(li);\n            \n            // Clear input\n            taskInput.value = '';\n            \n            // Update title with task count\n            const taskCount = taskList.children.length;\n            title.textContent = `Task Manager (${taskCount} tasks)`;\n        }\n        \n        // Event handling\n        addButton.addEventListener('click', addTask);\n        \n        taskInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                addTask();\n            }\n        });\n        \n        // Modifying existing elements\n        title.style.color = '#333';\n        title.style.textAlign = 'center';\n        \n        // Working with attributes\n        container.setAttribute('data-initialized', 'true');\n        console.log('Container initialized:', container.getAttribute('data-initialized'));\n    </script>\n</body>\n</html>",
    "output": "Successfully created an interactive task manager that demonstrates DOM selection, traversal, manipulation, and event handling. The application allows users to add and remove tasks dynamically while updating the UI in real-time."
  },
  {
    "id": 4,
    "topic": "Web Fundamentals",
    "title": "Responsive Design and Performance Optimization",
    "description": "Implement responsive web design patterns that work across all devices and screen sizes. Learn performance optimization techniques to create fast-loading, efficient websites that provide excellent user experiences.",
    "codeExample": "/* Responsive Design and Performance Optimization */\n\n/* Mobile-first approach with flexible units */\n.container {\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 15px;\n}\n\n/* Flexible grid using CSS Grid */\n.card-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: 2rem;\n    padding: 3rem 0;\n}\n\n/* Responsive images */\n.hero-image {\n    width: 100%;\n    height: auto;\n    max-width: 100%;\n}\n\n/* Media queries for different breakpoints */\n\n/* Tablets and small desktops */\n@media (max-width: 992px) {\n    .card-grid {\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 1.5rem;\n    }\n}\n\n/* Tablets */\n@media (max-width: 768px) {\n    .container {\n        padding: 0 10px;\n    }\n    \n    .card-grid {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n}\n\n/* Mobile phones */\n@media (max-width: 576px) {\n    .card-grid {\n        grid-template-columns: 1fr;\n        gap: 0.5rem;\n    }\n}\n\n/* Performance optimization techniques */\n\n/* Critical CSS inlined in HTML */\n/* Minimize render-blocking resources */\n\n/* Lazy loading for images */\nimg[data-src] {\n    opacity: 0;\n    transition: opacity 0.3s;\n}\n\nimg.loaded {\n    opacity: 1;\n}\n\n/* CSS for skeleton loading */\n.skeleton {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n    border-radius: 4px;\n}\n\n@keyframes loading {\n    0% {\n        background-position: 200% 0;\n    }\n    100% {\n        background-position: -200% 0;\n    }\n}\n\n/* Font optimization */\n@font-face {\n    font-family: 'CustomFont';\n    src: url('/fonts/custom-font.woff2') format('woff2');\n    font-display: swap; /* Prevents invisible text during font load */\n}\n\n/* Focus styles for accessibility */\na:focus, button:focus, input:focus {\n    outline: 3px solid #4a90e2;\n    outline-offset: 2px;\n}",
    "output": "Successfully implemented a responsive design system with mobile-first approach, flexible grids, and performance optimization techniques. The layout adapts to different screen sizes while maintaining performance through lazy loading, critical CSS, and font optimization."
  }
]