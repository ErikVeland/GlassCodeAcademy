# GraphQL Schema for dotNetQuiz

type Query {
  # .NET Lessons
  dotNetLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [Lesson!]!

  # Next.js Lessons
  nextJsLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [Lesson!]!

  # GraphQL Lessons
  graphQLLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [Lesson!]!

  # Laravel Lessons
  laravelLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [LaravelLesson!]!

  # .NET Interview Questions
  dotNetInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [InterviewQuestion!]!

  # Next.js Interview Questions
  nextJsInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [InterviewQuestion!]!

  # GraphQL Interview Questions
  graphQLInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [InterviewQuestion!]!

  # Laravel Interview Questions
  laravelInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [LaravelInterviewQuestion!]!

  # React Lessons
  reactLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [ReactLesson!]!

  # React Interview Questions
  reactInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [ReactInterviewQuestion!]!

  # Tailwind Lessons
  tailwindLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [TailwindLesson!]!

  # Tailwind Interview Questions
  tailwindInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [TailwindInterviewQuestion!]!

  # Node.js Lessons
  nodeLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [NodeLesson!]!

  # Node.js Interview Questions
  nodeInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [NodeInterviewQuestion!]!

  # SASS Lessons
  sassLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [SassLesson!]!

  # SASS Interview Questions
  sassInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [SassInterviewQuestion!]!

  # Programming Fundamentals Lessons
  programmingLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [ProgrammingLesson!]!

  # Programming Fundamentals Interview Questions
  programmingInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [ProgrammingInterviewQuestion!]!

  # Next.js Lessons
  nextJsLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [NextJsLesson!]!

  # Next.js Interview Questions
  nextJsInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [NextJsInterviewQuestion!]!

  # Performance Optimization Lessons
  performanceLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [PerformanceLesson!]!

  # Performance Optimization Interview Questions
  performanceInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [PerformanceInterviewQuestion!]!

  # Security Fundamentals Lessons
  securityLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [SecurityLesson!]!

  # Security Fundamentals Interview Questions
  securityInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [SecurityInterviewQuestion!]!

  # Version Control Lessons
  versionLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [VersionLesson!]!

  # Version Control Interview Questions
  versionInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [VersionInterviewQuestion!]!

  # Database Systems Lessons
  databaseLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [DatabaseLesson!]!

  # Database Systems Interview Questions
  databaseInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [DatabaseInterviewQuestion!]!

  # Testing Fundamentals Lessons
  testingLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [TestingLesson!]!

  # Testing Fundamentals Interview Questions
  testingInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [TestingInterviewQuestion!]!

  # TypeScript Fundamentals Lessons
  typescriptLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [TypescriptLesson!]!

  # TypeScript Fundamentals Interview Questions
  typescriptInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [TypescriptInterviewQuestion!]!

  # Vue Advanced Lessons
  vueLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [VueLesson!]!

  # Vue Advanced Interview Questions
  vueInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [VueInterviewQuestion!]!

  # Web Fundamentals Lessons
  webLessons(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [WebLesson!]!

  # Web Fundamentals Interview Questions
  webInterviewQuestions(
    topic: String
    sortBy: String
    sortOrder: String
    limit: Int
    offset: Int
  ): [WebInterviewQuestion!]!
}

type Mutation {
  # Submit an answer to an interview question
  submitAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Laravel interview question
  submitLaravelAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a React interview question
  submitReactAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Tailwind interview question
  submitTailwindAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Node.js interview question
  submitNodeAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a SASS interview question
  submitSassAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Programming Fundamentals interview question
  submitProgrammingAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Next.js interview question
  submitNextJsAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Performance Optimization interview question
  submitPerformanceAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Security Fundamentals interview question
  submitSecurityAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Version Control interview question
  submitVersionAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Database Systems interview question
  submitDatabaseAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Testing Fundamentals interview question
  submitTestingAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a TypeScript Fundamentals interview question
  submitTypescriptAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Vue Advanced interview question
  submitVueAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Submit an answer to a Web Fundamentals interview question
  submitWebAnswer(questionId: Int!, answerIndex: Int!): AnswerResult!

  # Track progress for a lesson
  trackProgress(userId: Int!, lessonId: Int!, module: String!): ProgressResult!
}

# Represents a learning lesson with code examples
type Lesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents an interview question with multiple choice or open-ended format
type InterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Laravel learning lesson with code examples
type LaravelLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Laravel interview question with multiple choice or open-ended format
type LaravelInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents the result of answering a question
type AnswerResult {
  isCorrect: Boolean!
  explanation: String
}

# Represents a user's progress on a lesson
type ProgressResult {
  userId: Int!
  lessonId: Int!
  module: String!
  status: String!
}

# Represents a React learning lesson with code examples
type ReactLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a React interview question with multiple choice or open-ended format
type ReactInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Tailwind CSS learning lesson with code examples
type TailwindLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Tailwind CSS interview question with multiple choice or open-ended format
type TailwindInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Node.js learning lesson with code examples
type NodeLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Node.js interview question with multiple choice or open-ended format
type NodeInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a SASS learning lesson with code examples
type SassLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a SASS interview question with multiple choice or open-ended format
type SassInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Programming Fundamentals learning lesson with code examples
type ProgrammingLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Programming Fundamentals interview question with multiple choice or open-ended format
type ProgrammingInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Next.js learning lesson with code examples
type NextJsLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Next.js interview question with multiple choice or open-ended format
type NextJsInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Performance Optimization learning lesson with code examples
type PerformanceLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Performance Optimization interview question with multiple choice or open-ended format
type PerformanceInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Security Fundamentals learning lesson with code examples
type SecurityLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Security Fundamentals interview question with multiple choice or open-ended format
type SecurityInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Version Control learning lesson with code examples
type VersionLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Version Control interview question with multiple choice or open-ended format
type VersionInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Database Systems learning lesson with code examples
type DatabaseLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Database Systems interview question with multiple choice or open-ended format
type DatabaseInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Testing Fundamentals learning lesson with code examples
type TestingLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Testing Fundamentals interview question with multiple choice or open-ended format
type TestingInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a TypeScript Fundamentals learning lesson with code examples
type TypescriptLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a TypeScript Fundamentals interview question with multiple choice or open-ended format
type TypescriptInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Vue Advanced learning lesson with code examples
type VueLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Vue Advanced interview question with multiple choice or open-ended format
type VueInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}

# Represents a Web Fundamentals learning lesson with code examples
type WebLesson {
  id: Int!
  topic: String
  title: String!
  description: String!
  codeExample: String!
  output: String!
}

# Represents a Web Fundamentals interview question with multiple choice or open-ended format
type WebInterviewQuestion {
  id: Int!
  topic: String
  type: String
  question: String!
  choices: [String!]
  correctAnswer: Int
  explanation: String
}