{
  "id": "tailwind-lesson-16-component-library",
  "moduleSlug": "tailwind-advanced",
  "title": "Component Library Development",
  "order": 16,
  "objectives": [
    "Build comprehensive component libraries with Tailwind CSS",
    "Implement design system components with consistent APIs",
    "Create reusable, accessible, and themeable components",
    "Establish component library documentation and distribution"
  ],
  "intro": "Component library development with Tailwind CSS enables teams to create consistent, reusable UI components that accelerate development while maintaining design integrity. This advanced lesson explores the principles and practices of building professional component libraries that serve as the foundation for scalable user interfaces.\n\nYou'll learn to implement components with consistent APIs, create accessible interfaces that meet WCAG standards, and develop themeable components that adapt to different contexts. We'll explore advanced patterns for component composition, state management, and integration with popular frameworks.\n\nThe lesson covers practical strategies for organizing component libraries, establishing naming conventions, and creating comprehensive documentation systems. You'll discover how to balance component flexibility with consistency, implement proper testing strategies, and establish processes for library maintenance and evolution.\n\nBy mastering component library development, you'll be able to create development resources that significantly improve team productivity, ensure design consistency, and provide reliable building blocks for complex applications.",
  "code": {
    "example": "// Component Library Development with Tailwind CSS\n\n// Component library structure\n/*\nsrc/\n├── components/\n│   ├── Button/\n│   │   ├── Button.js\n│   │   ├── Button.stories.js\n│   │   ├── Button.test.js\n│   │   └── index.js\n│   ├── Card/\n│   │   ├── Card.js\n│   │   ├── CardHeader.js\n│   │   ├── CardBody.js\n│   │   ├── CardFooter.js\n│   │   ├── Card.stories.js\n│   │   ├── Card.test.js\n│   │   └── index.js\n│   ├── Form/\n│   │   ├── Input.js\n│   │   ├── Select.js\n│   │   ├── Checkbox.js\n│   │   ├── Radio.js\n│   │   ├── Form.stories.js\n│   │   ├── Form.test.js\n│   │   └── index.js\n│   └── index.js\n├── hooks/\n├── utils/\n└── stories/\n*/\n\n// Button Component Implementation\n// src/components/Button/Button.js\nimport React from 'react';\n\nconst Button = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  disabled = false,\n  fullWidth = false,\n  icon,\n  iconPosition = 'left',\n  onClick,\n  className = '',\n  ...props\n}) => {\n  // Base button classes\n  const baseClasses = [\n    'inline-flex',\n    'items-center',\n    'justify-center',\n    'font-medium',\n    'rounded-md',\n    'transition-colors',\n    'focus:outline-none',\n    'focus:ring-2',\n    'focus:ring-offset-2',\n    'whitespace-nowrap'\n  ];\n  \n  // Variant classes\n  const variantClasses = {\n    primary: [\n      'bg-primary-600',\n      'text-white',\n      'hover:bg-primary-700',\n      'focus:ring-primary-500',\n      'border-transparent',\n      disabled ? 'bg-primary-400' : ''\n    ],\n    secondary: [\n      'bg-secondary-600',\n      'text-white',\n      'hover:bg-secondary-700',\n      'focus:ring-secondary-500',\n      'border-transparent',\n      disabled ? 'bg-secondary-400' : ''\n    ],\n    outline: [\n      'bg-transparent',\n      'border',\n      'border-primary-600',\n      'text-primary-600',\n      'hover:bg-primary-50',\n      'focus:ring-primary-500',\n      disabled ? 'border-primary-300 text-primary-300' : ''\n    ],\n    ghost: [\n      'bg-transparent',\n      'text-primary-600',\n      'hover:bg-primary-50',\n      'focus:ring-primary-500',\n      'border-transparent'\n    ]\n  };\n  \n  // Size classes\n  const sizeClasses = {\n    sm: ['text-xs', 'py-1.5', 'px-3'],\n    md: ['text-sm', 'py-2', 'px-4'],\n    lg: ['text-base', 'py-2.5', 'px-5']\n  };\n  \n  // State classes\n  const stateClasses = [\n    disabled ? 'cursor-not-allowed' : 'cursor-pointer'\n  ];\n  \n  // Layout classes\n  const layoutClasses = [\n    fullWidth ? 'w-full' : ''\n  ];\n  \n  // Combine all classes\n  const classes = [\n    ...baseClasses,\n    ...variantClasses[variant],\n    ...sizeClasses[size],\n    ...stateClasses,\n    ...layoutClasses,\n    className\n  ].filter(Boolean).join(' ');\n  \n  // Handle icon rendering\n  const renderIcon = () => icon && (\n    <span className={children ? (iconPosition === 'left' ? 'mr-2' : 'ml-2') : ''}>\n      {icon}\n    </span>\n  );\n  \n  return (\n    <button\n      className={classes}\n      disabled={disabled}\n      onClick={onClick}\n      {...props}\n    >\n      {iconPosition === 'left' && renderIcon()}\n      {children}\n      {iconPosition === 'right' && renderIcon()}\n    </button>\n  );\n};\n\nexport default Button;\n\n// Card Component Implementation\n// src/components/Card/Card.js\nimport React from 'react';\n\nconst Card = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst CardHeader = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`px-6 py-4 border-b border-gray-200 ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst CardBody = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`px-6 py-4 ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst CardFooter = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`px-6 py-4 bg-gray-50 border-t border-gray-200 ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\n\nexport default Card;\n\n// Component library index\n// src/components/index.js\nexport { default as Button } from './Button';\nexport { default as Card } from './Card';\n\n// Usage examples:\n// import { Button, Card } from './components';\n// \n// <Button variant=\"primary\" size=\"lg\">\n//   Get Started\n// </Button>\n// \n// <Card>\n//   <Card.Header>\n//     <h3 className=\"text-lg font-medium\">Card Title</h3>\n//   </Card.Header>\n//   <Card.Body>\n//     <p className=\"text-gray-600\">Card content goes here...</p>\n//   </Card.Body>\n//   <Card.Footer>\n//     <Button variant=\"outline\">Cancel</Button>\n//     <Button className=\"ml-2\">Save</Button>\n//   </Card.Footer>\n// </Card>",
    "explanation": "This example demonstrates a comprehensive component library implementation with Tailwind CSS. It includes:\n\n1. A well-structured component library directory\n2. A Button component with multiple variants, sizes, and states\n3. A Card component with sub-components (Header, Body, Footer)\n4. Proper component composition patterns\n5. Accessibility considerations\n6. Consistent API design\n\nThe implementation shows how to create reusable, themeable components that maintain design consistency while providing flexibility for different use cases.",
    "language": "javascript"
  },
  "pitfalls": [
    {
      "mistake": "Creating components that are too complex and hard to maintain",
      "solution": "Follow the single responsibility principle and break complex components into smaller, composable parts",
      "severity": "high"
    },
    {
      "mistake": "Not considering accessibility in component design",
      "solution": "Implement proper ARIA attributes, keyboard navigation, and focus management",
      "severity": "high"
    },
    {
      "mistake": "Inconsistent component APIs across the library",
      "solution": "Establish clear API conventions and document them thoroughly",
      "severity": "medium"
    }
  ],
  "exercises": [
    {
      "title": "Build a Professional Component Library",
      "description": "Create a comprehensive component library with at least 10 components, proper documentation, and testing",
      "checkpoints": [
        "Design and implement a consistent component API",
        "Create accessible components that meet WCAG standards",
        "Implement proper state management and event handling",
        "Write comprehensive documentation and usage examples",
        "Set up testing for components"
      ]
    }
  ],
  "next": [],
  "estimatedMinutes": 60,
  "difficulty": "Advanced",
  "tags": [
    "Component Library",
    "Components",
    "Accessibility",
    "API Design",
    "Testing",
    "Documentation",
    "Tailwind CSS"
  ],
  "lastUpdated": "2025-10-03T10:00:00Z",
  "version": "1.0.0"
}