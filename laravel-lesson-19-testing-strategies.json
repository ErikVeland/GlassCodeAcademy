{
  "id": "laravel-lesson-19-testing-strategies",
  "moduleSlug": "laravel-fundamentals",
  "title": "Advanced Testing Strategies with Pest and PHPUnit",
  "order": 19,
  "objectives": [
    "Master advanced testing patterns with Pest and PHPUnit",
    "Implement comprehensive test coverage for Laravel applications",
    "Create effective mocking strategies for complex dependencies",
    "Optimize test performance and maintainability"
  ],
  "intro": "Advanced testing strategies in Laravel applications go beyond basic unit testing to encompass comprehensive coverage of complex application logic, database interactions, and integration scenarios. This comprehensive lesson explores sophisticated testing techniques that ensure application reliability and maintainability at scale.\n\nYou'll learn to implement advanced testing patterns with both Pest and PHPUnit, create effective mocking strategies for complex dependencies like external APIs and services, and optimize test performance and maintainability through proper organization and database management. We'll explore advanced patterns for testing Eloquent models, HTTP controllers, console commands, and event broadcasting.\n\nThe lesson covers practical implementation strategies for organizing large test suites, implementing proper test data management with factories and seeders, and creating tests that provide meaningful coverage while remaining maintainable. You'll discover how to balance test coverage with development velocity, implement proper continuous integration testing, and optimize tests for performance.\n\nBy mastering advanced testing strategies, you'll be able to create Laravel applications with high confidence in their correctness and reliability, enabling faster development cycles and reduced bug rates.",
  "code": {
    "example": "<?php\n// Advanced Testing Strategies with Pest and PHPUnit\n\n// Pest test examples\n// tests/Feature/UserRegistrationTest.php\n\nuse App\\Models\\User;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Facades\\Notification;\nuse function Pest\\Laravel\\postJson;\nuse function Pest\\Laravel\\assertDatabaseHas;\nuse function Pest\\Laravel\\assertDatabaseMissing;\nuse Tests\\TestCase;\n\ndescribe('User Registration', function () {\n    uses(RefreshDatabase::class);\n    \n    beforeEach(function () {\n        // Mock external service\n        Http::fake([\n            'api.payment-provider.com/*' => Http::response(['status' => 'success'], 200),\n        ]);\n        \n        // Prevent actual emails\n        Mail::fake();\n        Notification::fake();\n        Event::fake();\n    });\n    \n    it('registers a new user successfully', function () {\n        $response = postJson('/api/register', [\n            'name' => 'John Doe',\n            'email' => 'john@example.com',\n            'password' => 'password123',\n            'password_confirmation' => 'password123',\n        ]);\n        \n        $response->assertStatus(201)\n                 ->assertJsonStructure([\n                     'user' => ['id', 'name', 'email'],\n                     'token'\n                 ]);\n        \n        assertDatabaseHas('users', [\n            'name' => 'John Doe',\n            'email' => 'john@example.com'\n        ]);\n        \n        // Assert emails were sent\n        Mail::assertSent(\\App\\Mail\\WelcomeEmail::class);\n        \n        // Assert notifications were sent\n        Notification::assertSentTo(\n            User::where('email', 'john@example.com')->first(),\n            \\App\\Notifications\\WelcomeNotification::class\n        );\n    });\n    \n    it('prevents duplicate email registration', function () {\n        // Create existing user\n        User::factory()->create([\n            'email' => 'john@example.com'\n        ]);\n        \n        $response = postJson('/api/register', [\n            'name' => 'Jane Doe',\n            'email' => 'john@example.com',\n            'password' => 'password123',\n            'password_confirmation' => 'password123',\n        ]);\n        \n        $response->assertStatus(422)\n                 ->assertJsonValidationErrors(['email']);\n        \n        // Assert only one user exists\n        expect(User::where('email', 'john@example.com')->count())->toBe(1);\n    });\n    \n    it('validates required fields', function (string $field) {\n        $data = [\n            'name' => 'John Doe',\n            'email' => 'john@example.com',\n            'password' => 'password123',\n            'password_confirmation' => 'password123',\n        ];\n        \n        unset($data[$field]);\n        \n        $response = postJson('/api/register', $data);\n        \n        $response->assertStatus(422)\n                 ->assertJsonValidationErrors([$field]);\n    })->with([\n        'name',\n        'email',\n        'password',\n    ]);\n    \n    it('validates password confirmation', function () {\n        $response = postJson('/api/register', [\n            'name' => 'John Doe',\n            'email' => 'john@example.com',\n            'password' => 'password123',\n            'password_confirmation' => 'different123',\n        ]);\n        \n        $response->assertStatus(422)\n                 ->assertJsonValidationErrors(['password']);\n    });\n    \n    it('handles external service failures gracefully', function () {\n        // Mock external service failure\n        Http::fake([\n            'api.payment-provider.com/*' => Http::response(['error' => 'Service unavailable'], 503),\n        ]);\n        \n        $response = postJson('/api/register', [\n            'name' => 'John Doe',\n            'email' => 'john@example.com',\n            'password' => 'password123',\n            'password_confirmation' => 'password123',\n        ]);\n        \n        $response->assertStatus(503);\n        \n        // Assert user was not created due to external service failure\n        assertDatabaseMissing('users', [\n            'email' => 'john@example.com'\n        ]);\n    });\n});\n\n// Advanced Unit Testing with PHPUnit\n// tests/Unit/Services/UserServiceTest.php\n\nuse App\\Models\\User;\nuse App\\Services\\UserService;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Support\\Facades\\Http;\nuse Mockery;\nuse Tests\\TestCase;\n\nclass UserServiceTest extends TestCase\n{\n    use RefreshDatabase;\n    \n    protected UserService $userService;\n    protected $mockPaymentService;\n    \n    protected function setUp(): void\n    {\n        parent::setUp();\n        \n        // Create mock for external service\n        $this->mockPaymentService = Mockery::mock('App\\Services\\PaymentService');\n        $this->app->instance('App\\Services\\PaymentService', $this->mockPaymentService);\n        \n        $this->userService = new UserService();\n    }\n    \n    protected function tearDown(): void\n    {\n        Mockery::close();\n        parent::tearDown();\n    }\n    \n    /**\n     * @test\n     */\n    public function it_creates_user_with_subscription()\n    {\n        // Arrange\n        $userData = [\n            'name' => 'John Doe',\n            'email' => 'john@example.com',\n            'password' => 'password123',\n        ];\n        \n        $this->mockPaymentService\n             ->shouldReceive('createSubscription')\n             ->once()\n             ->with(Mockery::type(User::class), 'premium')\n             ->andReturn(['subscription_id' => 'sub_123']);\n        \n        // Act\n        $user = $this->userService->createUserWithSubscription($userData, 'premium');\n        \n        // Assert\n        $this->assertInstanceOf(User::class, $user);\n        $this->assertEquals('john@example.com', $user->email);\n        $this->assertDatabaseHas('users', [\n            'email' => 'john@example.com',\n            'subscription_id' => 'sub_123'\n        ]);\n    }\n    \n    /**\n     * @test\n     */\n    public function it_handles_payment_service_exceptions()\n    {\n        // Arrange\n        $userData = [\n            'name' => 'John Doe',\n            'email' => 'john@example.com',\n            'password' => 'password123',\n        ];\n        \n        $this->mockPaymentService\n             ->shouldReceive('createSubscription')\n             ->once()\n             ->with(Mockery::type(User::class), 'premium')\n             ->andThrow(new \\Exception('Payment service unavailable'));\n        \n        // Act & Assert\n        $this->expectException(\\Exception::class);\n        $this->expectExceptionMessage('Payment service unavailable');\n        \n        $this->userService->createUserWithSubscription($userData, 'premium');\n        \n        // Assert user was not created due to exception\n        $this->assertDatabaseMissing('users', [\n            'email' => 'john@example.com'\n        ]);\n    }\n    \n    /**\n     * @test\n     * @dataProvider userRoleDataProvider\n     */\n    public function it_assigns_correct_permissions_based_on_role($role, $expectedPermissions)\n    {\n        // Arrange\n        $user = User::factory()->create(['role' => $role]);\n        \n        // Act\n        $permissions = $this->userService->getUserPermissions($user);\n        \n        // Assert\n        $this->assertEquals($expectedPermissions, $permissions);\n    }\n    \n    public function userRoleDataProvider()\n    {\n        return [\n            ['admin', ['create', 'read', 'update', 'delete']],\n            ['editor', ['create', 'read', 'update']],\n            ['user', ['read']],\n        ];\n    }\n}\n\n// Database Testing with Factories and Seeders\n// tests/Feature/PostManagementTest.php\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse function Pest\\Laravel\\get;\nuse function Pest\\Laravel\\post;\nuse function Pest\\Laravel\\put;\nuse function Pest\\Laravel\\delete;\nuse Tests\\TestCase;\n\ndescribe('Post Management', function () {\n    uses(RefreshDatabase::class, TestCase::class);\n    \n    let('author', fn() => User::factory()->create());\n    let('admin', fn() => User::factory()->admin()->create());\n    \n    beforeEach(function () {\n        // Create posts using factories\n        Post::factory()\n            ->count(10)\n            ->sequence(\n                ['status' => 'draft'],\n                ['status' => 'published'],\n            )\n            ->create();\n    });\n    \n    it('lists published posts for guests', function () {\n        $response = get('/api/posts');\n        \n        $response->assertStatus(200)\n                 ->assertJsonCount(5, 'data') // Only published posts\n                 ->assertJsonStructure([\n                     'data' => [\n                         '*' => ['id', 'title', 'excerpt', 'published_at']\n                     ]\n                 ]);\n    });\n    \n    it('lists all posts for admin', function () {\n        $response = get('/api/posts')\n            ->actingAs($this->admin);\n        \n        $response->assertStatus(200)\n                 ->assertJsonCount(10, 'data') // All posts\n                 ->assertJsonStructure([\n                     'data' => [\n                         '*' => ['id', 'title', 'status', 'created_at']\n                     ]\n                 ]);\n    });\n    \n    it('allows author to update their own post', function () {\n        $post = Post::factory()->for($this->author)->create();\n        \n        $response = put(\"/api/posts/{$post->id}\", [\n            'title' => 'Updated Title',\n            'content' => 'Updated content',\n        ])->actingAs($this->author);\n        \n        $response->assertStatus(200);\n        $this->assertDatabaseHas('posts', [\n            'id' => $post->id,\n            'title' => 'Updated Title',\n        ]);\n    });\n    \n    it('prevents user from updating others posts', function () {\n        $otherUser = User::factory()->create();\n        $post = Post::factory()->for($this->author)->create();\n        \n        $response = put(\"/api/posts/{$post->id}\", [\n            'title' => 'Hacked Title',\n        ])->actingAs($otherUser);\n        \n        $response->assertStatus(403);\n        $this->assertDatabaseMissing('posts', [\n            'id' => $post->id,\n            'title' => 'Hacked Title',\n        ]);\n    });\n});",
    "explanation": "This example demonstrates advanced Laravel testing strategies including:\n\n1. Comprehensive feature testing with Pest for API endpoints\n2. Advanced unit testing with PHPUnit and Mockery\n3. Database testing with factories and proper data setup\n4. Mocking external services and dependencies\n5. Testing validation and error conditions\n6. Testing authorization and permission systems\n7. Data provider patterns for testing multiple scenarios\n8. Proper test organization and setup/teardown patterns\n\nThese patterns enable developers to create comprehensive test suites that provide high confidence in application correctness while remaining maintainable and performant.",
    "language": "php"
  },
  "pitfalls": [
    {
      "mistake": "Creating tests that depend on database state from other tests",
      "solution": "Use database transactions and proper test isolation with RefreshDatabase trait",
      "severity": "high"
    },
    {
      "mistake": "Not testing edge cases and error conditions thoroughly",
      "solution": "Test validation errors, authorization failures, and external service failures",
      "severity": "high"
    },
    {
      "mistake": "Ignoring test performance which slows down development",
      "solution": "Use proper database seeding, mock external services, and optimize test data",
      "severity": "medium"
    }
  ],
  "exercises": [
    {
      "title": "Implement Comprehensive Laravel Testing",
      "description": "Create a complete testing suite with advanced patterns for feature, unit, and database tests",
      "checkpoints": [
        "Implement feature tests for API endpoints with proper validation",
        "Create unit tests with mocking for service classes",
        "Build database tests with factories and proper data setup",
        "Add tests for authorization and permission systems",
        "Implement proper error handling and edge case tests"
      ]
    }
  ],
  "next": ["laravel-lesson-20-queue-workers"],
  "estimatedMinutes": 60,
  "difficulty": "Advanced",
  "tags": [
    "Testing",
    "Pest",
    "PHPUnit",
    "Database Testing",
    "Mocking",
    "Laravel"
  ],
  "lastUpdated": "2025-10-03T10:00:00Z",
  "version": "1.0.0"
}