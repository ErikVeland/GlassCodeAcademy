server {
  listen 80;
  server_name api.glasscode.academy;

  access_log /var/log/nginx/api.glasscode.academy_access.log;
  error_log /var/log/nginx/api.glasscode.academy_error.log;

  # Webroot for ACME challenges (for webroot-validated cert issuance)
  root /var/www/api.glasscode.academy;
  location /.well-known/acme-challenge/ {
    allow all;
  }

  # Health on HTTP for external checks
  location = /health {
    return 200 "ok";
  }

  # Proxy API over HTTP (redirect will happen once HTTPS block is active)
  location / {
    proxy_pass http://127.0.0.1:8080;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}

# HTTPS server block using a separate certificate for api.glasscode.academy
server {
  listen 443 ssl http2;
  server_name api.glasscode.academy;

  access_log /var/log/nginx/api.glasscode.academy_access.log;
  error_log /var/log/nginx/api.glasscode.academy_error.log;

  # TLS
  ssl_certificate /etc/letsencrypt/live/api.glasscode.academy/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/api.glasscode.academy/privkey.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;

  # Security headers
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  add_header Content-Security-Policy-Report-Only "default-src 'self'; object-src 'none'; base-uri 'self'; frame-ancestors 'self'; form-action 'self'; upgrade-insecure-requests; script-src 'self' https: blob: 'unsafe-inline'; style-src 'self' https: 'unsafe-inline'; img-src 'self' data: blob: https:; font-src 'self' data: https:; connect-src 'self' https: wss:" always;

  # Proxy API over HTTPS
  location / {
    proxy_pass http://127.0.0.1:8080;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_cache_bypass $http_upgrade;
  }

  # Health over HTTPS
  location = /health {
    return 200 "ok";
  }
}