[
  {
    "id": "web-fundamentals-lesson-1",
    "moduleSlug": "web-fundamentals",
    "title": "HTML5 Semantic Elements",
    "order": 1,
    "objectives": [
      "Understand HTML5 document structure and semantic elements",
      "Create accessible and SEO-friendly markup",
      "Learn proper HTML5 form elements and validation"
    ],
    "intro": "HTML5 semantic elements provide meaningful structure to web documents, making them accessible to screen readers and search engines while improving code maintainability.\n\nIn this lesson, you'll learn about semantic elements like header, nav, main, article, section, and footer that replace generic div elements. These elements convey meaning about the content they contain, making your websites more accessible.\n\nProper HTML structure is the foundation of web development. You'll discover how semantic markup improves SEO rankings, helps assistive technologies understand your content, and creates a logical document outline.\n\nHTML5 also introduced new form input types and validation attributes that enhance user experience without requiring JavaScript. You'll learn about email, date, number inputs and built-in validation features.\n\nBy mastering semantic HTML5, you'll create websites that are accessible to all users, rank better in search engines, and provide a solid foundation for CSS styling and JavaScript interactions. This knowledge is essential for modern web development.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Semantic HTML5 Example</title>\n</head>\n<body>\n    <!-- Main page header -->\n    <header>\n        <h1>My Blog</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#about\">About</a></li>\n                <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <!-- Main content area -->\n    <main>\n        <article>\n            <header>\n                <h2>Understanding Semantic HTML</h2>\n                <time datetime=\"2024-01-15\">January 15, 2024</time>\n            </header>\n            <p>Semantic HTML provides meaning to web content...</p>\n            <section>\n                <h3>Benefits of Semantic HTML</h3>\n                <ul>\n                    <li>Better accessibility</li>\n                    <li>Improved SEO</li>\n                    <li>Cleaner code structure</li>\n                </ul>\n            </section>\n        </article>\n\n        <!-- Contact form with HTML5 validation -->\n        <section>\n            <h3>Contact Form</h3>\n            <form action=\"/submit\" method=\"post\">\n                <div>\n                    <label for=\"name\">Name:</label>\n                    <input type=\"text\" id=\"name\" name=\"name\" required>\n                </div>\n                <div>\n                    <label for=\"email\">Email:</label>\n                    <input type=\"email\" id=\"email\" name=\"email\" required>\n                </div>\n                <div>\n                    <label for=\"phone\">Phone:</label>\n                    <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\">\n                </div>\n                <div>\n                    <label for=\"birthdate\">Birth Date:</label>\n                    <input type=\"date\" id=\"birthdate\" name=\"birthdate\">\n                </div>\n                <button type=\"submit\">Submit</button>\n            </form>\n        </section>\n    </main>\n\n    <!-- Sidebar content -->\n    <aside>\n        <section>\n            <h3>Related Articles</h3>\n            <ul>\n                <li><a href=\"#\">CSS Grid Layout</a></li>\n                <li><a href=\"#\">JavaScript ES6</a></li>\n            </ul>\n        </section>\n    </aside>\n\n    <!-- Page footer -->\n    <footer>\n        <p>&copy; 2024 My Blog. All rights reserved.</p>\n    </footer>\n</body>\n</html>",
      "explanation": "This example demonstrates semantic HTML5 elements including header, nav, main, article, section, aside, and footer. Notice the proper nesting, accessibility features like labels and ARIA attributes, and HTML5 form validation.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Using div elements instead of semantic HTML5 elements",
        "solution": "Use header, nav, main, article, section, aside, footer for better accessibility and SEO",
        "severity": "medium"
      },
      {
        "mistake": "Missing alt attributes on images",
        "solution": "Always include descriptive alt text for images to support screen readers",
        "severity": "high"
      },
      {
        "mistake": "Not associating form labels with input elements",
        "solution": "Use the 'for' attribute on labels to connect them with input 'id' attributes",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Build a Semantic Blog Post",
        "description": "Create a complete blog post page using semantic HTML5 elements and proper form validation.",
        "checkpoints": [
          "Use semantic elements (header, nav, main, article, aside, footer)",
          "Create a contact form with HTML5 input types and validation",
          "Include proper heading hierarchy (h1, h2, h3)",
          "Validate your HTML using the W3C validator"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 30,
    "difficulty": "Beginner",
    "tags": [
      "HTML5",
      "CSS3",
      "JavaScript"
    ],
    "lastUpdated": "2025-10-01T06:42:16.315Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-2",
    "moduleSlug": "web-fundamentals",
    "title": "CSS3 Layout and Styling",
    "order": 2,
    "objectives": [
      "Master CSS3 layout techniques (Flexbox and Grid)",
      "Implement responsive design with media queries",
      "Apply modern CSS3 features and animations"
    ],
    "intro": "CSS3 provides powerful layout systems and styling capabilities that make creating beautiful, responsive websites easier than ever. Modern CSS eliminates the need for complex float-based layouts.\n\nIn this lesson, you'll master Flexbox for one-dimensional layouts and CSS Grid for two-dimensional layouts. These layout systems are essential for creating professional, responsive designs that work across all devices.\n\nResponsive design ensures your websites look great on smartphones, tablets, and desktops. You'll learn media queries, flexible units, and responsive design patterns that adapt to different screen sizes.\n\nCSS3 also introduces powerful visual effects including transitions, animations, transforms, and advanced selectors. These features help create engaging user experiences without requiring JavaScript.\n\nBy the end of this lesson, you'll confidently create responsive layouts, implement smooth animations, and use modern CSS3 features to build visually appealing websites that work perfectly across all devices and browsers.",
    "code": {
      "example": "/* Modern CSS3 Layout and Styling */\n\n/* CSS Reset and Base Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: #333;\n}\n\n/* Flexbox Layout for Navigation */\n.navbar {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem 2rem;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n}\n\n.nav-links {\n    display: flex;\n    list-style: none;\n    gap: 2rem;\n}\n\n.nav-links a {\n    color: white;\n    text-decoration: none;\n    transition: opacity 0.3s ease;\n}\n\n.nav-links a:hover {\n    opacity: 0.8;\n}\n\n/* CSS Grid Layout for Main Content */\n.container {\n    display: grid;\n    grid-template-columns: 1fr 300px;\n    grid-template-rows: auto 1fr auto;\n    grid-template-areas:\n        'header header'\n        'main sidebar'\n        'footer footer';\n    min-height: 100vh;\n    gap: 2rem;\n    padding: 2rem;\n}\n\n.header { grid-area: header; }\n.main { grid-area: main; }\n.sidebar { grid-area: sidebar; }\n.footer { grid-area: footer; }\n\n/* Card Component with Modern CSS */\n.card {\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    padding: 2rem;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* CSS3 Animations */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.animate-in {\n    animation: fadeInUp 0.6s ease forwards;\n}\n\n/* Responsive Design with Media Queries */\n@media (max-width: 768px) {\n    .container {\n        grid-template-columns: 1fr;\n        grid-template-areas:\n            'header'\n            'main'\n            'sidebar'\n            'footer';\n    }\n    \n    .navbar {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .nav-links {\n        flex-direction: column;\n        text-align: center;\n        gap: 1rem;\n    }\n}\n\n/* Modern CSS Features */\n.button {\n    background: linear-gradient(45deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 1rem 2rem;\n    border-radius: 8px;\n    cursor: pointer;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.button::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: rgba(255, 255, 255, 0.2);\n    transition: left 0.5s ease;\n}\n\n.button:hover::before {\n    left: 100%;\n}",
      "explanation": "This example demonstrates modern CSS3 features including Flexbox, Grid, gradients, animations, transitions, media queries, and advanced selectors. Notice the responsive design patterns and modern visual effects.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Using floats instead of Flexbox or Grid for layout",
        "solution": "Use modern layout systems like Flexbox for 1D layouts and Grid for 2D layouts",
        "severity": "medium"
      },
      {
        "mistake": "Not using relative units (rem, em, %) for responsive design",
        "solution": "Use relative units and avoid fixed pixel values for better responsiveness",
        "severity": "medium"
      },
      {
        "mistake": "Missing vendor prefixes for CSS3 properties",
        "solution": "Use autoprefixer or include vendor prefixes for older browser support",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Responsive Portfolio Layout",
        "description": "Create a responsive portfolio website using CSS Grid and Flexbox with animations.",
        "checkpoints": [
          "Build a responsive navigation using Flexbox",
          "Create a portfolio grid layout using CSS Grid",
          "Add CSS3 animations and transitions",
          "Test responsiveness across different screen sizes"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 30,
    "difficulty": "Beginner",
    "tags": [
      "HTML5",
      "CSS3",
      "JavaScript"
    ],
    "lastUpdated": "2025-10-01T06:42:16.315Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-3",
    "moduleSlug": "web-fundamentals",
    "title": "DOM Manipulation and Traversal",
    "order": 3,
    "objectives": [
      "Understand the Document Object Model (DOM) structure",
      "Manipulate HTML elements dynamically using JavaScript",
      "Traverse the DOM tree efficiently",
      "Handle DOM events and create interactive web pages"
    ],
    "intro": "The Document Object Model (DOM) is a programming interface for web documents that represents the structure of HTML and XML documents as a tree of objects. Understanding DOM manipulation is essential for creating dynamic, interactive web applications.\n\nIn this lesson, you'll learn how to select, create, modify, and remove HTML elements using JavaScript. You'll explore different methods for accessing elements by ID, class, tag name, and CSS selectors, enabling you to build rich user interfaces.\n\nDOM traversal techniques allow you to navigate through the hierarchical structure of web pages. You'll discover how to move between parent, child, and sibling elements, making it easier to manipulate complex document structures.\n\nDynamic content creation and modification are core skills for modern web development. You'll learn to add new elements, update text and attributes, and respond to user interactions in real-time.\n\nBy mastering DOM manipulation, you'll be able to create engaging user experiences, validate forms, build interactive components, and develop single-page applications that respond to user actions without page reloads.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>DOM Manipulation Example</title>\n</head>\n<body>\n    <div id=\"container\">\n        <h1 id=\"title\">Task Manager</h1>\n        <input type=\"text\" id=\"taskInput\" placeholder=\"Enter a new task\">\n        <button id=\"addButton\">Add Task</button>\n        <ul id=\"taskList\" class=\"task-list\"></ul>\n    </div>\n\n    <script>\n        // DOM Selection - Multiple ways to access elements\n        const container = document.getElementById('container');\n        const title = document.querySelector('#title');\n        const taskInput = document.querySelector('#taskInput');\n        const addButton = document.querySelector('#addButton');\n        const taskList = document.getElementsByClassName('task-list')[0];\n        \n        // DOM Traversal - Navigating the document structure\n        console.log('Parent of title:', title.parentNode);\n        console.log('Children of container:', container.children);\n        console.log('First child of container:', container.firstElementChild);\n        console.log('Next sibling of title:', title.nextElementSibling);\n        \n        // DOM Manipulation - Creating and modifying elements\n        let taskId = 0;\n        \n        function addTask() {\n            const taskText = taskInput.value.trim();\n            \n            if (taskText === '') {\n                alert('Please enter a task');\n                return;\n            }\n            \n            // Create new elements\n            const li = document.createElement('li');\n            li.className = 'task-item';\n            li.id = `task-${taskId++}`;\n            \n            const span = document.createElement('span');\n            span.textContent = taskText;\n            \n            const deleteButton = document.createElement('button');\n            deleteButton.textContent = 'Delete';\n            deleteButton.onclick = function() {\n                li.remove();\n            };\n            \n            // Append elements\n            li.appendChild(span);\n            li.appendChild(deleteButton);\n            taskList.appendChild(li);\n            \n            // Clear input\n            taskInput.value = '';\n            \n            // Update title with task count\n            const taskCount = taskList.children.length;\n            title.textContent = `Task Manager (${taskCount} tasks)`;\n        }\n        \n        // Event handling\n        addButton.addEventListener('click', addTask);\n        \n        taskInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                addTask();\n            }\n        });\n        \n        // Modifying existing elements\n        title.style.color = '#333';\n        title.style.textAlign = 'center';\n        \n        // Working with attributes\n        container.setAttribute('data-initialized', 'true');\n        console.log('Container initialized:', container.getAttribute('data-initialized'));\n    </script>\n</body>\n</html>",
      "explanation": "This example demonstrates core DOM manipulation techniques including element selection using different methods (getElementById, querySelector, `getElementsByClassName`), DOM traversal (parentNode, children, firstElementChild, nextElementSibling), element creation and modification (createElement, appendChild, remove), event handling (addEventListener), and attribute manipulation (setAttribute, getAttribute). The code creates a functional task manager that showcases real-world DOM manipulation patterns.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Directly manipulating innerHTML without sanitization",
        "solution": "Use textContent for text or properly sanitize HTML content to prevent XSS attacks",
        "severity": "high"
      },
      {
        "mistake": "Not checking if elements exist before manipulating them",
        "solution": "Always verify elements exist before accessing their properties or methods",
        "severity": "high"
      },
      {
        "mistake": "Using inefficient selectors that impact performance",
        "solution": "Use specific selectors and cache DOM references when accessing elements multiple times",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Interactive Image Gallery",
        "description": "Create an interactive image gallery that allows users to add, remove, and filter images using DOM manipulation techniques.",
        "checkpoints": [
          "Implement functions to add and remove images dynamically",
          "Add filtering functionality based on image categories",
          "Use DOM traversal to update gallery statistics",
          "Ensure proper event handling for all interactive elements"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 45,
    "difficulty": "Intermediate",
    "tags": [
      "DOM",
      "JavaScript",
      "Event Handling",
      "Web APIs"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-4",
    "moduleSlug": "web-fundamentals",
    "title": "JavaScript Event Handling",
    "order": 4,
    "objectives": [
      "Master different types of JavaScript events and event handlers",
      "Implement event delegation for efficient event management",
      "Handle form events and user input validation",
      "Prevent default browser behavior and event propagation"
    ],
    "intro": "Event handling is a cornerstone of interactive web development, allowing you to respond to user actions like clicks, keyboard input, form submissions, and more. Understanding how to effectively manage events is crucial for creating responsive and engaging user interfaces.\n\nIn this lesson, you'll learn about the event object, event phases, and different methods for attaching event listeners. You'll explore various event types including mouse events, keyboard events, form events, and touch events for mobile devices.\n\nEvent delegation is a powerful technique that allows you to handle events for multiple elements with a single listener, improving performance and memory usage. You'll discover how to implement this pattern effectively in your applications.\n\nForm validation and user input handling are essential skills for web developers. You'll learn to capture and validate user input in real-time, providing immediate feedback and preventing invalid submissions.\n\nBy mastering JavaScript event handling, you'll be able to create dynamic user interfaces, implement complex interactions, and build web applications that respond intuitively to user actions across all devices.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>JavaScript Event Handling</title>\n    <style>\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n        input, textarea {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        .error {\n            border-color: #ff0000;\n            background-color: #ffe6e6;\n        }\n        .error-message {\n            color: #ff0000;\n            font-size: 14px;\n            margin-top: 5px;\n        }\n        button {\n            background-color: #007bff;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n        .button-group {\n            display: flex;\n            gap: 10px;\n            margin: 20px 0;\n        }\n        .dynamic-list {\n            list-style-type: none;\n            padding: 0;\n        }\n        .dynamic-list li {\n            background: #f8f9fa;\n            margin: 5px 0;\n            padding: 10px;\n            border-radius: 4px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        .dynamic-list button {\n            background-color: #dc3545;\n            padding: 5px 10px;\n            font-size: 12px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Event Handling Examples</h1>\n        \n        <!-- Form with validation -->\n        <form id=\"userForm\">\n            <div class=\"form-group\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n                <div id=\"usernameError\" class=\"error-message\"></div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\" required>\n                <div id=\"emailError\" class=\"error-message\"></div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"message\">Message:</label>\n                <textarea id=\"message\" name=\"message\" rows=\"4\" required></textarea>\n                <div id=\"messageError\" class=\"error-message\"></div>\n            </div>\n            \n            <button type=\"submit\">Submit</button>\n        </form>\n        \n        <!-- Event delegation example -->\n        <div class=\"button-group\">\n            <button id=\"addItem\">Add Item</button>\n            <button id=\"clearList\">Clear List</button>\n        </div>\n        \n        <ul id=\"itemList\" class=\"dynamic-list\"></ul>\n        \n        <div id=\"output\"></div>\n    </div>\n\n    <script>\n        // Event Handling Examples\n        \n        // 1. Form validation with event handling\n        const userForm = document.getElementById('userForm');\n        const usernameInput = document.getElementById('username');\n        const emailInput = document.getElementById('email');\n        const messageInput = document.getElementById('message');\n        \n        // Real-time validation\n        usernameInput.addEventListener('blur', function(e) {\n            validateUsername(e.target.value);\n        });\n        \n        emailInput.addEventListener('input', function(e) {\n            // Clear error as user types\n            clearError('emailError');\n            emailInput.classList.remove('error');\n        });\n        \n        messageInput.addEventListener('focus', function() {\n            console.log('User focused on message field');\n        });\n        \n        // Form submission with validation\n        userForm.addEventListener('submit', function(e) {\n            e.preventDefault(); // Prevent default form submission\n            \n            // Validate all fields\n            const isUsernameValid = validateUsername(usernameInput.value);\n            const isEmailValid = validateEmail(emailInput.value);\n            const isMessageValid = validateMessage(messageInput.value);\n            \n            if (isUsernameValid && isEmailValid && isMessageValid) {\n                // Form is valid, process submission\n                alert('Form submitted successfully!');\n                userForm.reset();\n                clearAllErrors();\n            } else {\n                console.log('Form validation failed');\n            }\n        });\n        \n        // Validation functions\n        function validateUsername(value) {\n            const errorElement = document.getElementById('usernameError');\n            \n            if (!value.trim()) {\n                showError(errorElement, 'Username is required');\n                usernameInput.classList.add('error');\n                return false;\n            }\n            \n            if (value.length < 3) {\n                showError(errorElement, 'Username must be at least 3 characters');\n                usernameInput.classList.add('error');\n                return false;\n            }\n            \n            clearError('usernameError');\n            usernameInput.classList.remove('error');\n            return true;\n        }\n        \n        function validateEmail(value) {\n            const errorElement = document.getElementById('emailError');\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            \n            if (!value.trim()) {\n                showError(errorElement, 'Email is required');\n                emailInput.classList.add('error');\n                return false;\n            }\n            \n            if (!emailRegex.test(value)) {\n                showError(errorElement, 'Please enter a valid email address');\n                emailInput.classList.add('error');\n                return false;\n            }\n            \n            clearError('emailError');\n            emailInput.classList.remove('error');\n            return true;\n        }\n        \n        function validateMessage(value) {\n            const errorElement = document.getElementById('messageError');\n            \n            if (!value.trim()) {\n                showError(errorElement, 'Message is required');\n                messageInput.classList.add('error');\n                return false;\n            }\n            \n            if (value.length < 10) {\n                showError(errorElement, 'Message must be at least 10 characters');\n                messageInput.classList.add('error');\n                return false;\n            }\n            \n            clearError('messageError');\n            messageInput.classList.remove('error');\n            return true;\n        }\n        \n        function showError(element, message) {\n            element.textContent = message;\n        }\n        \n        function clearError(elementId) {\n            document.getElementById(elementId).textContent = '';\n        }\n        \n        function clearAllErrors() {\n            const errorElements = document.querySelectorAll('.error-message');\n            errorElements.forEach(element => element.textContent = '');\n        }\n        \n        // 2. Event delegation example\n        const addItemButton = document.getElementById('addItem');\n        const clearListButton = document.getElementById('clearList');\n        const itemList = document.getElementById('itemList');\n        let itemCounter = 1;\n        \n        // Add item to list\n        addItemButton.addEventListener('click', function() {\n            const li = document.createElement('li');\n            li.innerHTML = `\n                Item ${itemCounter} \n                <button class=\"delete-btn\" data-id=\"${itemCounter}\">Delete</button>\n            `;\n            itemList.appendChild(li);\n            itemCounter++;\n        });\n        \n        // Clear all items\n        clearListButton.addEventListener('click', function() {\n            itemList.innerHTML = '';\n            itemCounter = 1;\n        });\n        \n        // Event delegation for delete buttons\n        itemList.addEventListener('click', function(e) {\n            if (e.target.classList.contains('delete-btn')) {\n                e.target.parentElement.remove();\n                \n                const output = document.getElementById('output');\n                output.innerHTML = `<p>Deleted item ${e.target.dataset.id}</p>`;\n                \n                setTimeout(() => {\n                    output.innerHTML = '';\n                }, 2000);\n            }\n        });\n        \n        // 3. Keyboard event handling\n        document.addEventListener('keydown', function(e) {\n            if (e.ctrlKey && e.key === 'Enter') {\n                console.log('Ctrl+Enter pressed');\n            }\n            \n            if (e.key === 'Escape') {\n                userForm.reset();\n                clearAllErrors();\n                itemList.innerHTML = '';\n                itemCounter = 1;\n            }\n        });\n        \n        // 4. Mouse event examples\n        const container = document.querySelector('.container');\n        \n        container.addEventListener('mouseenter', function() {\n            console.log('Mouse entered container');\n        });\n        \n        container.addEventListener('mouseleave', function() {\n            console.log('Mouse left container');\n        });\n        \n        container.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            console.log('Right-click prevented');\n        });\n    </script>\n</body>\n</html>",
      "explanation": "This example demonstrates comprehensive JavaScript event handling techniques including form validation with real-time feedback, event delegation for efficient event management, keyboard event handling for special key combinations, and mouse event handling. The code shows how to prevent default browser behavior, validate user input, and create interactive components using various event types.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Not properly removing event listeners, causing memory leaks",
        "solution": "Always remove event listeners when they're no longer needed, especially in single-page applications",
        "severity": "high"
      },
      {
        "mistake": "Using inline event handlers instead of addEventListener",
        "solution": "Use addEventListener for better separation of concerns and support for multiple listeners",
        "severity": "medium"
      },
      {
        "mistake": "Not preventing default behavior when necessary",
        "solution": "Use preventDefault() to stop default browser actions when implementing custom behavior",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Interactive Quiz Application",
        "description": "Create an interactive quiz application that handles user selections, validates answers, and provides immediate feedback using JavaScript event handling.",
        "checkpoints": [
          "Implement event handlers for multiple choice selections",
          "Add real-time validation for user answers",
          "Use event delegation for efficient handling of quiz controls",
          "Provide visual feedback for correct/incorrect answers"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 45,
    "difficulty": "Intermediate",
    "tags": [
      "JavaScript",
      "Event Handling",
      "Form Validation",
      "DOM"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-5",
    "moduleSlug": "web-fundamentals",
    "title": "AJAX and Asynchronous Programming",
    "order": 5,
    "objectives": [
      "Understand asynchronous programming concepts and the event loop",
      "Make HTTP requests using Fetch API and XMLHttpRequest",
      "Handle asynchronous operations with Promises and async/await",
      "Implement error handling for network requests"
    ],
    "intro": "Asynchronous programming is fundamental to modern web development, enabling applications to perform non-blocking operations like network requests, file operations, and timers. Understanding how to work with asynchronous code is essential for creating responsive user interfaces that don't freeze while waiting for operations to complete.\n\nIn this lesson, you'll learn about the JavaScript event loop and how it manages asynchronous operations. You'll explore different approaches to handling asynchronous code, from callbacks to Promises to the modern async/await syntax.\n\nAJAX (Asynchronous JavaScript and XML) allows web pages to update dynamically without requiring a full page reload. You'll master making HTTP requests using both the traditional XMLHttpRequest and the modern Fetch API, learning how to send and receive data from servers.\n\nError handling in asynchronous code requires special attention. You'll discover how to properly catch and handle errors in Promise chains and async functions, ensuring your applications gracefully handle network failures and other issues.\n\nBy mastering AJAX and asynchronous programming, you'll be able to create dynamic web applications that communicate with servers, update content in real-time, and provide smooth user experiences without page refreshes.",
    "code": {
      "example": "<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>AJAX and Asynchronous Programming</title>\\n    <style>\\n        .container {\\n            max-width: 800px;\\n            margin: 0 auto;\\n            padding: 20px;\\n            font-family: Arial, sans-serif;\\n        }\\n        .user-card {\\n            border: 1px solid #ddd;\\n            border-radius: 8px;\\n            padding: 15px;\\n            margin: 10px 0;\\n            background: #f9f9f9;\\n        }\\n        .loading {\\n            text-align: center;\\n            padding: 20px;\\n            color: #666;\\n        }\\n        .error {\\n            background: #ffe6e6;\\n            color: #cc0000;\\n            padding: 15px;\\n            border-radius: 4px;\\n            margin: 10px 0;\\n        }\\n        button {\\n            background: #007bff;\\n            color: white;\\n            border: none;\\n            padding: 10px 15px;\\n            border-radius: 4px;\\n            cursor: pointer;\\n            margin: 5px;\\n        }\\n        button:hover {\\n            background: #0056b3;\\n        }\\n        button:disabled {\\n            background: #ccc;\\n            cursor: not-allowed;\\n        }\\n        .button-group {\\n            margin: 20px 0;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"container\\\">\\n        <h1>AJAX and Asynchronous Programming Examples</h1>\\n        \\n        <div class=\\\"button-group\\\">\\n            <button id=\\\"fetchUsersBtn\\\">Fetch Users (Fetch API)</button>\\n            <button id=\\\"fetchUsersXhrBtn\\\">Fetch Users (XMLHttpRequest)</button>\\n            <button id=\\\"fetchWithErrorBtn\\\">Fetch with Error Handling</button>\\n            <button id=\\\"sequentialBtn\\\">Sequential Requests</button>\\n            <button id=\\\"parallelBtn\\\">Parallel Requests</button>\\n        </div>\\n        \\n        <div id=\\\"output\\\"></div>\\n    </div>\\n\\n    <script>\\n        // Asynchronous Programming Examples\\n        \\n        // 1. Using Fetch API (Modern approach)\\n        document.getElementById('fetchUsersBtn').addEventListener('click', async () => {\\n            const output = document.getElementById('output');\\n            output.innerHTML = '<div class=\\\"loading\\\">Loading users...</div>';\\n\\n            try {\\n                // Using async/await with Fetch API\\n                const response = await fetch('https://jsonplaceholder.typicode.com/users');\\n                \\n                // Check if the response is successful\\n                if (!response.ok) {\\n                    throw new Error(`HTTP error! status: ${response.status}`);\\n                }\\n                \\n                const users = await response.json();\\n                displayUsers(users, 'Fetch API Result');\\n            } catch (error) {\\n                output.innerHTML = `<div class=\\\"error\\\">Error fetching users: ${error.message}</div>`;\\n            }\\n        });\\n        \\n        // 2. Using XMLHttpRequest (Traditional approach)\\n        document.getElementById('fetchUsersXhrBtn').addEventListener('click', () => {\\n            const output = document.getElementById('output');\\n            output.innerHTML = '<div class=\\\"loading\\\">Loading users with XMLHttpRequest...</div>';\\n\\n            const xhr = new XMLHttpRequest();\\n            xhr.open('GET', 'https://jsonplaceholder.typicode.com/users', true);\\n            \\n            xhr.onload = function() {\\n                if (xhr.status >= 200 && xhr.status < 300) {\\n                    try {\\n                        const users = JSON.parse(xhr.responseText);\\n                        displayUsers(users, 'XMLHttpRequest Result');\\n                    } catch (e) {\\n                        output.innerHTML = '<div class=\\\"error\\\">Error parsing response</div>';\\n                    }\\n                } else {\\n                    output.innerHTML = `<div class=\\\"error\\\">Error: ${xhr.status} ${xhr.statusText}</div>`;\\n                }\\n            };\\n            \\n            xhr.onerror = function() {\\n                output.innerHTML = '<div class=\\\"error\\\">Network error occurred</div>';\\n            };\\n            \\n            xhr.send();\\n        });\\n        \\n        // 3. Error handling with Promises\\n        document.getElementById('fetchWithErrorBtn').addEventListener('click', () => {\\n            const output = document.getElementById('output');\\n            output.innerHTML = '<div class=\\\"loading\\\">Testing error handling...</div>';\\n\\n            // Intentionally request a non-existent endpoint\\n            fetch('https://jsonplaceholder.typicode.com/nonexistent')\\n                .then(response => {\\n                    if (!response.ok) {\\n                        throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`);\\n                    }\\n                    return response.json();\\n                })\\n                .then(data => {\\n                    displayUsers(data, 'Success (This shouldn\\u2019t happen)');\\n                })\\n                .catch(error => {\\n                    output.innerHTML = `<div class=\\\"error\\\">Caught error: ${error.message}</div>`;\\n                    console.error('Error details:', error);\\n                });\\n        });\\n        \\n        // 4. Sequential asynchronous operations\\n        document.getElementById('sequentialBtn').addEventListener('click', async () => {\\n            const output = document.getElementById('output');\\n            output.innerHTML = '<div class=\\\"loading\\\">Performing sequential requests...</div>';\\n\\n            try {\\n                // First request\\n                const userResponse = await fetch('https://jsonplaceholder.typicode.com/users/1');\\n                const user = await userResponse.json();\\n                \\n                // Second request using data from first\\n                const postsResponse = await fetch(`https://jsonplaceholder.typicode.com/users/${user.id}/posts`);\\n                const posts = await postsResponse.json();\\n                \\n                // Display combined result\\n                output.innerHTML = `\\n                    <div class=\\\"user-card\\\">\\n                        <h3>User: ${user.name}</h3>\\n                        <p>Email: ${user.email}</p>\\n                        <p>Number of posts: ${posts.length}</p>\\n                    </div>\\n                    <h4>First 3 Posts:</h4>\\n                `;\\n                \\n                posts.slice(0, 3).forEach(post => {\\n                    output.innerHTML += `\\n                        <div class=\\\"user-card\\\">\\n                            <h4>${post.title}</h4>\\n                            <p>${post.body.substring(0, 100)}...</p>\\n                        </div>\\n                    `;\\n                });\\n            } catch (error) {\\n                output.innerHTML = `<div class=\\\"error\\\">Error in sequential requests: ${error.message}</div>`;\\n            }\\n        });\\n        \\n        // 5. Parallel asynchronous operations\\n        document.getElementById('parallelBtn').addEventListener('click', async () => {\\n            const output = document.getElementById('output');\\n            output.innerHTML = '<div class=\\\"loading\\\">Performing parallel requests...</div>';\\n\\n            try {\\n                // Start multiple requests simultaneously\\n                const [usersResponse, postsResponse, albumsResponse] = await Promise.all([\\n                    fetch('https://jsonplaceholder.typicode.com/users'),\\n                    fetch('https://jsonplaceholder.typicode.com/posts'),\\n                    fetch('https://jsonplaceholder.typicode.com/albums')\\n                ]);\\n                \\n                // Process responses\\n                const [users, posts, albums] = await Promise.all([\\n                    usersResponse.json(),\\n                    postsResponse.json(),\\n                    albumsResponse.json()\\n                ]);\\n                \\n                // Display results\\n                output.innerHTML = `\\n                    <div class=\\\"user-card\\\">\\n                        <h3>Parallel Requests Results</h3>\\n                        <p>Users loaded: ${users.length}</p>\\n                        <p>Posts loaded: ${posts.length}</p>\\n                        <p>Albums loaded: ${albums.length}</p>\\n                    </div>\\n                `;\\n            } catch (error) {\\n                output.innerHTML = `<div class=\\\"error\\\">Error in parallel requests: ${error.message}</div>`;\\n            }\\n        });\\n        \\n        // Helper function to display users\\n        function displayUsers(users, title) {\\n            const output = document.getElementById('output');\\n            let html = `<h3>${title}</h3>`;\\n            \\n            users.slice(0, 5).forEach(user => {\\n                html += `\\n                    <div class=\\\"user-card\\\">\\n                        <h4>${user.name}</h4>\\n                        <p>Email: ${user.email}</p>\\n                        <p>Company: ${user.company?.name || 'N/A'}</p>\\n                    </div>\\n                `;\\n            });\\n            \\n            if (users.length > 5) {\\n                html += `<p>... and ${users.length - 5} more users</p>`;\\n            }\\n            \\n            output.innerHTML = html;\\n        }\\n        \\n        // 6. Understanding the event loop\\n        console.log('1. Synchronous code');\\n        \\n        setTimeout(() => {\\n            console.log('3. Timeout callback');\\n        }, 0);\\n        \\n        Promise.resolve().then(() => {\\n            console.log('2. Promise callback');\\n        });\\n        \\n        console.log('1. Synchronous code (end)');\\n    </script>\\n</body>\\n</html>",
      "explanation": "This example demonstrates various asynchronous programming techniques including the Fetch API with async/await, XMLHttpRequest, Promise-based error handling, sequential and parallel asynchronous operations. The code shows how to properly handle errors in asynchronous code, make HTTP requests to external APIs, and understand the JavaScript event loop. The example also includes practical UI implementations for loading states and error messages.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Not handling network errors properly",
        "solution": "Always implement both .catch() for Promises and try/catch for async/await to handle network failures",
        "severity": "high"
      },
      {
        "mistake": "Blocking the main thread with synchronous operations",
        "solution": "Use asynchronous operations for network requests, file operations, and other time-consuming tasks",
        "severity": "high"
      },
      {
        "mistake": "Not checking response status before parsing JSON",
        "solution": "Always check if response.ok is true or handle specific HTTP status codes before calling .json()",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Weather Dashboard",
        "description": "Create a weather dashboard that fetches data from a weather API and displays current conditions and forecasts using asynchronous programming techniques.",
        "checkpoints": [
          "Implement async/await for API requests",
          "Handle network errors gracefully with user-friendly messages",
          "Display loading states during data fetching",
          "Cache results to minimize API calls"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 60,
    "difficulty": "Intermediate",
    "tags": [
      "AJAX",
      "Asynchronous Programming",
      "Fetch API",
      "Promises",
      "async/await"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-6",
    "moduleSlug": "web-fundamentals",
    "title": "Responsive Design Patterns",
    "order": 6,
    "objectives": [
      "Implement responsive design using CSS media queries and flexible layouts",
      "Create mobile-first designs that adapt to different screen sizes",
      "Use CSS Grid and Flexbox for responsive layouts",
      "Optimize images and content for various devices and viewports"
    ],
    "intro": "Responsive web design is essential in today's multi-device world, ensuring your websites look and function beautifully across smartphones, tablets, laptops, and desktops. With mobile traffic accounting for over half of all web traffic, creating responsive designs is no longer optional but a fundamental requirement.\n\nIn this lesson, you'll learn the core principles of responsive design, including the mobile-first approach, flexible grids, media queries, and scalable images. You'll discover how to create layouts that adapt seamlessly to different screen sizes and orientations.\n\nCSS Grid and Flexbox are powerful layout systems that make responsive design much easier than traditional float-based approaches. You'll master these modern layout techniques to create complex, flexible designs with minimal code.\n\nPerformance optimization is crucial for mobile users who may have limited bandwidth. You'll learn techniques for optimizing images, reducing HTTP requests, and creating efficient CSS that loads quickly on all devices.\n\nBy mastering responsive design patterns, you'll create websites that provide excellent user experiences regardless of the device or screen size, improving accessibility, SEO rankings, and user engagement.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Design Patterns</title>\n    <style>\n        /* CSS Reset and Base Styles */\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            color: #333;\n        }\n\n        /* Container with max-width for larger screens */\n        .container {\n            width: 100%;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 15px;\n        }\n\n        /* Header with flexible navigation */\n        .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 1rem 0;\n        }\n\n        .nav-container {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            flex-wrap: wrap;\n        }\n\n        .logo {\n            font-size: 1.5rem;\n            font-weight: bold;\n        }\n\n        .nav-menu {\n            display: flex;\n            list-style: none;\n            gap: 2rem;\n        }\n\n        .nav-menu a {\n            color: white;\n            text-decoration: none;\n            transition: opacity 0.3s ease;\n        }\n\n        .nav-menu a:hover {\n            opacity: 0.8;\n        }\n\n        /* Hero section with responsive typography */\n        .hero {\n            background: #f8f9fa;\n            padding: 4rem 0;\n            text-align: center;\n        }\n\n        .hero h1 {\n            font-size: 2.5rem;\n            margin-bottom: 1rem;\n            color: #333;\n        }\n\n        .hero p {\n            font-size: 1.2rem;\n            color: #666;\n            max-width: 600px;\n            margin: 0 auto 2rem;\n        }\n\n        .cta-button {\n            display: inline-block;\n            background: #007bff;\n            color: white;\n            padding: 1rem 2rem;\n            text-decoration: none;\n            border-radius: 4px;\n            font-weight: bold;\n            transition: background 0.3s ease;\n        }\n\n        .cta-button:hover {\n            background: #0056b3;\n        }\n\n        /* Card Grid using CSS Grid */\n        .card-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n            gap: 2rem;\n            padding: 3rem 0;\n        }\n\n        .card {\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            overflow: hidden;\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);\n        }\n\n        .card-img {\n            width: 100%;\n            height: 200px;\n            object-fit: cover;\n        }\n\n        .card-content {\n            padding: 1.5rem;\n        }\n\n        .card h3 {\n            margin-bottom: 0.5rem;\n            color: #333;\n        }\n\n        .card p {\n            color: #666;\n            margin-bottom: 1rem;\n        }\n\n        /* Responsive Flexbox Section */\n        .features {\n            background: #e9ecef;\n            padding: 3rem 0;\n        }\n\n        .section-title {\n            text-align: center;\n            margin-bottom: 2rem;\n            font-size: 2rem;\n            color: #333;\n        }\n\n        .features-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 2rem;\n            justify-content: center;\n        }\n\n        .feature {\n            flex: 1 1 300px;\n            background: white;\n            padding: 2rem;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            text-align: center;\n        }\n\n        .feature-icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n            color: #007bff;\n        }\n\n        /* Footer with flexible layout */\n        .footer {\n            background: #343a40;\n            color: white;\n            padding: 2rem 0;\n        }\n\n        .footer-content {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: space-between;\n            gap: 2rem;\n        }\n\n        .footer-section {\n            flex: 1 1 250px;\n        }\n\n        .footer-section h3 {\n            margin-bottom: 1rem;\n            color: #007bff;\n        }\n\n        .footer-section ul {\n            list-style: none;\n        }\n\n        .footer-section ul li {\n            margin-bottom: 0.5rem;\n        }\n\n        .footer-section a {\n            color: #adb5bd;\n            text-decoration: none;\n            transition: color 0.3s ease;\n        }\n\n        .footer-section a:hover {\n            color: white;\n        }\n\n        .copyright {\n            text-align: center;\n            padding-top: 2rem;\n            margin-top: 2rem;\n            border-top: 1px solid #495057;\n            color: #adb5bd;\n        }\n\n        /* Media Queries for Responsive Design */\n\n        /* Large Desktops */\n        @media (min-width: 1200px) {\n            .hero h1 {\n                font-size: 3rem;\n            }\n            \n            .hero p {\n                font-size: 1.3rem;\n            }\n        }\n\n        /* Tablets and Small Desktops */\n        @media (max-width: 992px) {\n            .hero {\n                padding: 3rem 0;\n            }\n            \n            .hero h1 {\n                font-size: 2rem;\n            }\n            \n            .hero p {\n                font-size: 1.1rem;\n            }\n            \n            .card-grid {\n                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n                gap: 1.5rem;\n            }\n        }\n\n        /* Tablets */\n        @media (max-width: 768px) {\n            .nav-menu {\n                gap: 1rem;\n            }\n            \n            .hero {\n                padding: 2rem 0;\n            }\n            \n            .hero h1 {\n                font-size: 1.8rem;\n            }\n            \n            .section-title {\n                font-size: 1.5rem;\n            }\n            \n            .card-grid {\n                grid-template-columns: 1fr;\n                gap: 1rem;\n            }\n            \n            .features-container {\n                flex-direction: column;\n            }\n        }\n\n        /* Mobile Phones */\n        @media (max-width: 576px) {\n            .container {\n                padding: 0 10px;\n            }\n            \n            .nav-container {\n                flex-direction: column;\n                gap: 1rem;\n            }\n            \n            .nav-menu {\n                flex-wrap: wrap;\n                justify-content: center;\n            }\n            \n            .hero {\n                padding: 1.5rem 0;\n            }\n            \n            .hero h1 {\n                font-size: 1.5rem;\n            }\n            \n            .hero p {\n                font-size: 1rem;\n            }\n            \n            .cta-button {\n                padding: 0.8rem 1.5rem;\n                font-size: 0.9rem;\n            }\n            \n            .section-title {\n                font-size: 1.3rem;\n            }\n            \n            .feature {\n                padding: 1.5rem;\n            }\n            \n            .footer-content {\n                flex-direction: column;\n                text-align: center;\n            }\n        }\n\n        /* High Resolution Screens */\n        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n            body {\n                -webkit-font-smoothing: antialiased;\n                -moz-osx-font-smoothing: grayscale;\n            }\n        }\n\n        /* Print Styles */\n        @media print {\n            .header, .footer {\n                background: none;\n                color: black;\n            }\n            \n            .cta-button, .nav-menu {\n                display: none;\n            }\n            \n            .card, .feature {\n                box-shadow: none;\n                border: 1px solid #ccc;\n            }\n        }\n\n        /* Dark Mode Support */\n        @media (prefers-color-scheme: dark) {\n            body {\n                background: #121212;\n                color: #e0e0e0;\n            }\n            \n            .card, .feature {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            .hero {\n                background: #1a1a1a;\n            }\n            \n            .hero h1, .card h3, .section-title {\n                color: #ffffff;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header class=\"header\">\n        <div class=\"container nav-container\">\n            <div class=\"logo\">ResponsiveDesign</div>\n            <ul class=\"nav-menu\">\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#features\">Features</a></li>\n                <li><a href=\"#about\">About</a></li>\n                <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </div>\n    </header>\n\n    <section class=\"hero\">\n        <div class=\"container\">\n            <h1>Modern Responsive Web Design</h1>\n            <p>Create beautiful websites that work perfectly on all devices, from smartphones to desktops.</p>\n            <a href=\"#features\" class=\"cta-button\">Explore Features</a>\n        </div>\n    </section>\n\n    <main class=\"container\">\n        <section class=\"card-grid\">\n            <article class=\"card\">\n                <img src=\"https://placehold.co/600x400/667eea/ffffff?text=Mobile+First\" alt=\"Mobile First Design\" class=\"card-img\">\n                <div class=\"card-content\">\n                    <h3>Mobile First Approach</h3>\n                    <p>Start with mobile design and progressively enhance for larger screens. This ensures optimal performance on all devices.</p>\n                </div>\n            </article>\n\n            <article class=\"card\">\n                <img src=\"https://placehold.co/600x400/764ba2/ffffff?text=Flexible+Grids\" alt=\"Flexible Grids\" class=\"card-img\">\n                <div class=\"card-content\">\n                    <h3>Flexible Grid Systems</h3>\n                    <p>Use CSS Grid and Flexbox to create layouts that adapt to any screen size without breaking.</p>\n                </div>\n            </article>\n\n            <article class=\"card\">\n                <img src=\"https://placehold.co/600x400/4ecdc4/ffffff?text=Media+Queries\" alt=\"Media Queries\" class=\"card-img\">\n                <div class=\"card-content\">\n                    <h3>Media Queries</h3>\n                    <p>Apply different styles based on device characteristics like width, height, and orientation.</p>\n                </div>\n            </article>\n        </section>\n\n        <section class=\"features\" id=\"features\">\n            <div class=\"container\">\n                <h2 class=\"section-title\">Key Features</h2>\n                <div class=\"features-container\">\n                    <div class=\"feature\">\n                        <div class=\"feature-icon\">📱</div>\n                        <h3>Touch Friendly</h3>\n                        <p>Optimized for touch interactions with appropriate sizing and spacing for fingers.</p>\n                    </div>\n\n                    <div class=\"feature\">\n                        <div class=\"feature-icon\">⚡</div>\n                        <h3>Fast Loading</h3>\n                        <p>Optimized assets and code splitting ensure quick loading on all connections.</p>\n                    </div>\n\n                    <div class=\"feature\">\n                        <div class=\"feature-icon\">🔍</div>\n                        <h3>SEO Friendly</h3>\n                        <p>Semantic HTML and proper structure help search engines understand your content.</p>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </main>\n\n    <footer class=\"footer\">\n        <div class=\"container\">\n            <div class=\"footer-content\">\n                <div class=\"footer-section\">\n                    <h3>Company</h3>\n                    <ul>\n                        <li><a href=\"#about\">About Us</a></li>\n                        <li><a href=\"#team\">Our Team</a></li>\n                        <li><a href=\"#careers\">Careers</a></li>\n                    </ul>\n                </div>\n\n                <div class=\"footer-section\">\n                    <h3>Resources</h3>\n                    <ul>\n                        <li><a href=\"#blog\">Blog</a></li>\n                        <li><a href=\"#docs\">Documentation</a></li>\n                        <li><a href=\"#support\">Support</a></li>\n                    </ul>\n                </div>\n\n                <div class=\"footer-section\">\n                    <h3>Connect</h3>\n                    <ul>\n                        <li><a href=\"#twitter\">Twitter</a></li>\n                        <li><a href=\"#facebook\">Facebook</a></li>\n                        <li><a href=\"#linkedin\">LinkedIn</a></li>\n                    </ul>\n                </div>\n            </div>\n            <div class=\"copyright\">\n                <p>&copy; 2025 ResponsiveDesign. All rights reserved.</p>\n            </div>\n        </div>\n    </footer>\n</body>\n</html>",
      "explanation": "This example demonstrates comprehensive responsive design patterns including mobile-first approach with CSS media queries, flexible layouts using CSS Grid and Flexbox, scalable images, and adaptive typography. The code shows how to create a complete responsive website with header, hero section, card grid, feature section, and footer that adapts to different screen sizes. Key techniques include using relative units, flexible grids, media queries for different breakpoints, and accessibility considerations.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not using a mobile-first approach",
        "solution": "Start with mobile styles and use min-width media queries to enhance for larger screens",
        "severity": "high"
      },
      {
        "mistake": "Using fixed widths instead of flexible units",
        "solution": "Use relative units like %, em, rem, vw, vh instead of fixed pixel values",
        "severity": "high"
      },
      {
        "mistake": "Not optimizing images for different screen sizes",
        "solution": "Use srcset attribute or CSS techniques to serve appropriately sized images",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Responsive Portfolio Website",
        "description": "Create a responsive portfolio website that showcases your work and adapts to different screen sizes using modern CSS techniques.",
        "checkpoints": [
          "Implement a mobile-first navigation that transforms into a desktop menu",
          "Create a responsive image gallery using CSS Grid",
          "Design adaptive typography that scales appropriately for all devices",
          "Test your design on multiple device sizes and orientations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 60,
    "difficulty": "Intermediate",
    "tags": [
      "Responsive Design",
      "CSS Grid",
      "Flexbox",
      "Media Queries",
      "Mobile First"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-7",
    "moduleSlug": "web-fundamentals",
    "title": "CSS Preprocessors",
    "order": 7,
    "objectives": [
      "Understand the benefits of using CSS preprocessors like Sass and Less",
      "Implement variables, nesting, and mixins to write more maintainable CSS",
      "Use advanced features like functions, conditionals, and loops in preprocessors",
      "Set up build processes to compile preprocessors into standard CSS"
    ],
    "intro": "CSS preprocessors extend the capabilities of standard CSS by adding features like variables, nesting, mixins, functions, and more. These tools compile into regular CSS that browsers can understand, while allowing developers to write more maintainable, organized, and powerful stylesheets.\n\nIn this lesson, you'll learn about the most popular CSS preprocessors, including Sass (Syntactically Awesome Style Sheets) and Less. You'll discover how variables can make your color schemes and typography consistent throughout your project, and how nesting can mirror your HTML structure for more intuitive styling.\n\nMixins and functions are powerful features that allow you to create reusable code blocks and perform calculations. You'll learn how to create parameterized mixins, use built-in functions, and even write your own custom functions to streamline your workflow.\n\nAdvanced features like conditionals, loops, and inheritance provide programming-like capabilities in your stylesheets. You'll explore how to use these features to create dynamic, data-driven styles that adapt to different contexts and requirements.\n\nBy mastering CSS preprocessors, you'll write cleaner, more maintainable CSS that's easier to update and scale, ultimately saving time and reducing errors in your projects.",
    "code": {
      "example": "// Sass (SCSS syntax) example demonstrating key preprocessor features\n\n// 1. Variables for consistent theming\n$primary-color: #007bff;\n$secondary-color: #6c757d;\n$success-color: #28a745;\n$font-family-base: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n$font-size-base: 16px;\n$border-radius: 4px;\n\n// 2. Nesting to mirror HTML structure\n.navbar {\n  background-color: $primary-color;\n  padding: 1rem;\n  \n  // Nested selectors\n  .nav-menu {\n    display: flex;\n    list-style: none;\n    \n    li {\n      margin-right: 1rem;\n      \n      &:last-child {\n        margin-right: 0;\n      }\n      \n      a {\n        color: white;\n        text-decoration: none;\n        padding: 0.5rem 1rem;\n        border-radius: $border-radius;\n        transition: background-color 0.3s ease;\n        \n        &:hover {\n          background-color: darken($primary-color, 10%);\n        }\n        \n        &.active {\n          background-color: darken($primary-color, 15%);\n          font-weight: bold;\n        }\n      }\n    }\n  }\n  \n  // Parent selector reference\n  &--transparent {\n    background-color: transparent;\n    \n    .nav-menu a {\n      color: $secondary-color;\n      \n      &:hover {\n        background-color: rgba($secondary-color, 0.1);\n      }\n    }\n  }\n}\n\n// 3. Mixins for reusable code blocks\n@mixin button-base {\n  display: inline-block;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: $border-radius;\n  cursor: pointer;\n  text-decoration: none;\n  text-align: center;\n  transition: all 0.3s ease;\n  font-family: $font-family-base;\n  font-size: $font-size-base;\n}\n\n@mixin button-variant($bg-color, $text-color: white) {\n  @include button-base;\n  background-color: $bg-color;\n  color: $text-color;\n  \n  &:hover {\n    background-color: darken($bg-color, 10%);\n  }\n  \n  &:focus {\n    outline: 2px solid lighten($bg-color, 20%);\n    outline-offset: 2px;\n  }\n  \n  &:disabled {\n    background-color: lighten($bg-color, 20%);\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n}\n\n// 4. Using mixins\n.btn {\n  @include button-base;\n  \n  &--primary {\n    @include button-variant($primary-color);\n  }\n  \n  &--secondary {\n    @include button-variant($secondary-color);\n  }\n  \n  &--success {\n    @include button-variant($success-color);\n  }\n  \n  &--large {\n    padding: 0.75rem 1.5rem;\n    font-size: 1.1rem;\n  }\n  \n  &--small {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.875rem;\n  }\n}\n\n// 5. Functions for calculations and logic\n@function calculate-rem($px-value) {\n  @return ($px-value / $font-size-base) * 1rem;\n}\n\n@function tint($color, $percentage) {\n  @return mix(white, $color, $percentage);\n}\n\n@function shade($color, $percentage) {\n  @return mix(black, $color, $percentage);\n}\n\n// 6. Using functions\n.responsive-text {\n  font-size: calculate-rem(18px); // Compiles to 1.125rem\n  padding: calculate-rem(20px) calculate-rem(30px); // Compiles to 1.25rem 1.875rem\n}\n\n// 7. Loops for generating repetitive styles\n$sizes: 10, 20, 30, 40, 50;\n\n@each $size in $sizes {\n  .margin-#{$size} {\n    margin: #{$size}px;\n  }\n  \n  .padding-#{$size} {\n    padding: #{$size}px;\n  }\n}\n\n// 8. Conditionals for responsive design\n$breakpoints: (\n  small: 576px,\n  medium: 768px,\n  large: 992px,\n  xlarge: 1200px\n);\n\n@mixin respond-to($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  } @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n         + \"Available breakpoints are: #{map-keys($breakpoints)}.\";\n  }\n}\n\n// 9. Using conditionals\n.hero {\n  padding: 2rem;\n  background-color: $primary-color;\n  color: white;\n  text-align: center;\n  \n  @include respond-to(small) {\n    padding: 3rem;\n  }\n  \n  @include respond-to(medium) {\n    padding: 4rem;\n    font-size: 1.2rem;\n  }\n  \n  @include respond-to(large) {\n    padding: 5rem;\n    font-size: 1.5rem;\n  }\n}\n\n// 10. Extending classes for shared styles\n%message-base {\n  padding: 1rem;\n  border-radius: $border-radius;\n  margin-bottom: 1rem;\n}\n\n.message--info {\n  @extend %message-base;\n  background-color: tint($primary-color, 80%);\n  border: 1px solid tint($primary-color, 50%);\n  color: shade($primary-color, 20%);\n}\n\n.message--success {\n  @extend %message-base;\n  background-color: tint($success-color, 80%);\n  border: 1px solid tint($success-color, 50%);\n  color: shade($success-color, 20%);\n}\n\n.message--error {\n  @extend %message-base;\n  background-color: tint(#dc3545, 80%);\n  border: 1px solid tint(#dc3545, 50%);\n  color: shade(#dc3545, 20%);\n}",
      "explanation": "This example demonstrates key features of CSS preprocessors using Sass (SCSS syntax). It shows variables for consistent theming, nesting to mirror HTML structure, mixins for reusable code blocks, functions for calculations, loops for generating repetitive styles, conditionals for responsive design, and extending classes for shared styles. These features make CSS more maintainable, organized, and powerful compared to standard CSS.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Over-nesting selectors, creating overly specific CSS",
        "solution": "Limit nesting to 3-4 levels and mirror HTML structure rather than creating complex selector chains",
        "severity": "medium"
      },
      {
        "mistake": "Creating too many global variables that are hard to maintain",
        "solution": "Organize variables into logical groups and use descriptive names. Consider using maps for related variables.",
        "severity": "medium"
      },
      {
        "mistake": "Not leveraging the full power of mixins and functions",
        "solution": "Use parameterized mixins and functions to create flexible, reusable components rather than static code blocks",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Create a Responsive Component Library",
        "description": "Build a set of reusable UI components using Sass features like variables, mixins, and functions.",
        "checkpoints": [
          "Define a consistent color palette and typography scale using variables",
          "Create mixins for common components like buttons, cards, and alerts",
          "Implement responsive utility classes using loops and conditionals",
          "Organize your code into partials for better maintainability"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 60,
    "difficulty": "Intermediate",
    "tags": [
      "CSS Preprocessors",
      "Sass",
      "Less",
      "Variables",
      "Mixins"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-8",
    "moduleSlug": "web-fundamentals",
    "title": "Web Accessibility",
    "order": 8,
    "objectives": [
      "Understand the principles of web accessibility and inclusive design",
      "Implement semantic HTML and ARIA attributes for assistive technologies",
      "Create accessible forms, navigation, and interactive components",
      "Test and validate accessibility using automated tools and manual techniques"
    ],
    "intro": "Web accessibility ensures that websites and applications can be used by everyone, including people with disabilities such as blindness, low vision, deafness, hearing impairments, motor impairments, cognitive limitations, and more. Creating accessible web experiences is not only a moral imperative but also a legal requirement in many jurisdictions and a business advantage that expands your potential audience.\n\nIn this lesson, you'll learn the four principles of accessibility defined by the Web Content Accessibility Guidelines (WCAG): Perceivable, Operable, Understandable, and Robust. You'll understand how to implement these principles through proper semantic HTML, ARIA attributes, and inclusive design patterns.\n\nSemantic HTML is the foundation of web accessibility. You'll discover how to use appropriate HTML elements, structure content logically, and provide meaningful labels and descriptions that assistive technologies can interpret.\n\nARIA (Accessible Rich Internet Applications) attributes enhance accessibility for dynamic content and complex UI components. You'll learn when and how to use ARIA roles, properties, and states to make custom components accessible.\n\nTesting and validation are crucial for ensuring accessibility. You'll explore automated testing tools, manual testing techniques, and user testing with people who have disabilities to create truly inclusive experiences.\n\nBy mastering web accessibility, you'll create websites that work for everyone, comply with legal requirements, and demonstrate social responsibility while potentially improving SEO and usability for all users.",
    "code": {
      "example": "<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Accessible Web Components</title>\\n    <style>\\n        /* Base styles with accessibility considerations */\\n        body {\\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n            line-height: 1.6;\\n            color: #333;\\n            background-color: #fff;\\n            margin: 0;\\n            padding: 1rem;\\n        }\\n\\n        /* Focus indicators for keyboard navigation */\\n        a:focus, button:focus, input:focus, textarea:focus, select:focus {\\n            outline: 3px solid #4a90e2;\\n            outline-offset: 2px;\\n        }\\n\\n        /* Skip link for keyboard users */\\n        .skip-link {\\n            position: absolute;\\n            top: -40px;\\n            left: 6px;\\n            background: #4a90e2;\\n            color: white;\\n            padding: 8px;\\n            text-decoration: none;\\n            z-index: 1000;\\n            transition: top 0.3s;\\n        }\\n\\n        .skip-link:focus {\\n            top: 6px;\\n        }\\n\\n        /* Header with proper heading hierarchy */\\n        header {\\n            background: #f8f9fa;\\n            padding: 1rem;\\n            border-bottom: 1px solid #dee2e6;\\n        }\\n\\n        /* Navigation with ARIA attributes */\\n        nav[role=\\\"navigation\\\"] {\\n            margin: 1rem 0;\\n        }\\n\\n        nav ul {\\n            list-style: none;\\n            padding: 0;\\n            margin: 0;\\n            display: flex;\\n            flex-wrap: wrap;\\n            gap: 1rem;\\n        }\\n\\n        nav a {\\n            display: block;\\n            padding: 0.5rem 1rem;\\n            text-decoration: none;\\n            color: #007bff;\\n            border-radius: 4px;\\n            transition: background-color 0.2s;\\n        }\\n\\n        nav a:hover,\\n        nav a:focus {\\n            background-color: #e9ecef;\\n        }\\n\\n        nav a[aria-current=\\\"page\\\"] {\\n            background-color: #007bff;\\n            color: white;\\n        }\\n\\n        /* Main content area */\\n        main {\\n            max-width: 800px;\\n            margin: 0 auto;\\n            padding: 1rem;\\n        }\\n\\n        /* Accessible form with proper labeling */\\n        .form-group {\\n            margin-bottom: 1.5rem;\\n        }\\n\\n        label {\\n            display: block;\\n            margin-bottom: 0.5rem;\\n            font-weight: bold;\\n        }\\n\\n        input,\\n        textarea,\\n        select {\\n            width: 100%;\\n            padding: 0.75rem;\\n            border: 2px solid #ced4da;\\n            border-radius: 4px;\\n            font-family: inherit;\\n            font-size: 1rem;\\n            transition: border-color 0.2s;\\n        }\\n\\n        input:focus,\\n        textarea:focus,\\n        select:focus {\\n            border-color: #4a90e2;\\n        }\\n\\n        input[aria-invalid=\\\"true\\\"] {\\n            border-color: #dc3545;\\n        }\\n\\n        .error-message {\\n            color: #dc3545;\\n            font-size: 0.875rem;\\n            margin-top: 0.25rem;\\n        }\\n\\n        /* Accessible buttons */\\n        .btn {\\n            display: inline-block;\\n            padding: 0.75rem 1.5rem;\\n            border: none;\\n            border-radius: 4px;\\n            font-family: inherit;\\n            font-size: 1rem;\\n            cursor: pointer;\\n            text-decoration: none;\\n            text-align: center;\\n            transition: background-color 0.2s;\\n        }\\n\\n        .btn--primary {\\n            background-color: #007bff;\\n            color: white;\\n        }\\n\\n        .btn--primary:hover,\\n        .btn--primary:focus {\\n            background-color: #0056b3;\\n        }\\n\\n        .btn--secondary {\\n            background-color: #6c757d;\\n            color: white;\\n        }\\n\\n        .btn--secondary:hover,\\n        .btn--secondary:focus {\\n            background-color: #545b62;\\n        }\\n\\n        /* Accessible modal dialog */\\n        .modal {\\n            position: fixed;\\n            top: 0;\\n            left: 0;\\n            right: 0;\\n            bottom: 0;\\n            background-color: rgba(0, 0, 0, 0.5);\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            z-index: 1000;\\n            opacity: 0;\\n            visibility: hidden;\\n            transition: opacity 0.3s, visibility 0.3s;\\n        }\\n\\n        .modal[aria-hidden=\\\"false\\\"] {\\n            opacity: 1;\\n            visibility: visible;\\n        }\\n\\n        .modal-content {\\n            background: white;\\n            border-radius: 8px;\\n            padding: 2rem;\\n            max-width: 500px;\\n            width: 90%;\\n            position: relative;\\n            transform: translateY(-20px);\\n            transition: transform 0.3s;\\n        }\\n\\n        .modal[aria-hidden=\\\"false\\\"] .modal-content {\\n            transform: translateY(0);\\n        }\\n\\n        .modal-close {\\n            position: absolute;\\n            top: 1rem;\\n            right: 1rem;\\n            background: none;\\n            border: none;\\n            font-size: 1.5rem;\\n            cursor: pointer;\\n            width: 2rem;\\n            height: 2rem;\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            border-radius: 50%;\\n        }\\n\\n        .modal-close:hover,\\n        .modal-close:focus {\\n            background-color: #f8f9fa;\\n        }\\n\\n        /* Accessible data table */\\n        .data-table {\\n            width: 100%;\\n            border-collapse: collapse;\\n            margin: 1rem 0;\\n        }\\n\\n        .data-table th,\\n        .data-table td {\\n            padding: 0.75rem;\\n            text-align: left;\\n            border-bottom: 1px solid #dee2e6;\\n        }\\n\\n        .data-table th {\\n            background-color: #f8f9fa;\\n            font-weight: bold;\\n        }\\n\\n        .data-table caption {\\n            caption-side: top;\\n            text-align: left;\\n            font-size: 1.25rem;\\n            font-weight: bold;\\n            margin-bottom: 1rem;\\n        }\\n\\n        /* Accessible image with proper alt text */\\n        .hero-image {\\n            width: 100%;\\n            height: auto;\\n            border-radius: 8px;\\n        }\\n\\n        /* Accessible color contrast */\\n        .high-contrast {\\n            background-color: #000;\\n            color: #fff;\\n            padding: 1rem;\\n            border-radius: 4px;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <!-- Skip link for keyboard users -->\\n    <a href=\\\"#main-content\\\" class=\\\"skip-link\\\">Skip to main content</a>\\n\\n    <header>\\n        <h1>Web Accessibility Examples</h1>\\n        <nav role=\\\"navigation\\\" aria-label=\\\"Main navigation\\\">\\n            <ul>\\n                <li><a href=\\\"#home\\\" aria-current=\\\"page\\\">Home</a></li>\\n                <li><a href=\\\"#about\\\">About</a></li>\\n                <li><a href=\\\"#services\\\">Services</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n\\n    <main id=\\\"main-content\\\">\\n        <section>\\n            <h2>Accessible Form Example</h2>\\n            <form id=\\\"contact-form\\\" novalidate>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"name\\\">Full Name <span aria-label=\\\"required\\\">*</span></label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required aria-describedby=\\\"name-error\\\" aria-invalid=\\\"false\\\">\\n                    <div id=\\\"name-error\\\" class=\\\"error-message\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\"></div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"email\\\">Email Address <span aria-label=\\\"required\\\">*</span></label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required aria-describedby=\\\"email-error\\\" aria-invalid=\\\"false\\\">\\n                    <div id=\\\"email-error\\\" class=\\\"error-message\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\"></div>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"message\\\">Your Message</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\" rows=\\\"5\\\" aria-describedby=\\\"message-error\\\" aria-invalid=\\\"false\\\"></textarea>\\n                    <div id=\\\"message-error\\\" class=\\\"error-message\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\"></div>\\n                </div>\\n\\n                <button type=\\\"submit\\\" class=\\\"btn btn--primary\\\">Send Message</button>\\n            </form>\\n        </section>\\n\\n        <section>\\n            <h2>Accessible Components</h2>\\n            \\n            <button id=\\\"open-modal\\\" class=\\\"btn btn--secondary\\\">Open Modal Dialog</button>\\n            \\n            <div id=\\\"modal\\\" class=\\\"modal\\\" role=\\\"dialog\\\" aria-labelledby=\\\"modal-title\\\" aria-describedby=\\\"modal-description\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\">\\n                <div class=\\\"modal-content\\\">\\n                    <button id=\\\"close-modal\\\" class=\\\"modal-close\\\" aria-label=\\\"Close dialog\\\">&times;</button>\\n                    <h3 id=\\\"modal-title\\\">Confirmation</h3>\\n                    <p id=\\\"modal-description\\\">Are you sure you want to proceed with this action?</p>\\n                    <button id=\\\"confirm-action\\\" class=\\\"btn btn--primary\\\">Confirm</button>\\n                    <button id=\\\"cancel-action\\\" class=\\\"btn btn--secondary\\\">Cancel</button>\\n                </div>\\n            </div>\\n        </section>\\n\\n        <section>\\n            <h2>Data Table Example</h2>\\n            <table class=\\\"data-table\\\">\\n                <caption>Product Sales Data</caption>\\n                <thead>\\n                    <tr>\\n                        <th scope=\\\"col\\\">Product</th>\\n                        <th scope=\\\"col\\\">Category</th>\\n                        <th scope=\\\"col\\\">Price</th>\\n                        <th scope=\\\"col\\\">Units Sold</th>\\n                        <th scope=\\\"col\\\">Revenue</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr>\\n                        <td>Wireless Headphones</td>\\n                        <td>Electronics</td>\\n                        <td>$129.99</td>\\n                        <td>150</td>\\n                        <td>$19,498.50</td>\\n                    </tr>\\n                    <tr>\\n                        <td>Smart Watch</td>\\n                        <td>Electronics</td>\\n                        <td>$249.99</td>\\n                        <td>85</td>\\n                        <td>$21,249.15</td>\\n                    </tr>\\n                    <tr>\\n                        <td>Bluetooth Speaker</td>\\n                        <td>Electronics</td>\\n                        <td>$79.99</td>\\n                        <td>200</td>\\n                        <td>$15,998.00</td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </section>\\n\\n        <section>\\n            <h2>Accessible Image</h2>\\n            <img src=\\\"https://placehold.co/800x400/007bff/ffffff?text=Accessible+Image\\\" alt=\\\"A placeholder image demonstrating proper alt text for accessibility\\\" class=\\\"hero-image\\\">\\n        </section>\\n    </main>\\n\\n    <script>\\n        // Accessible JavaScript functionality\\n\\n        // Form validation with accessibility considerations\\n        const form = document.getElementById('contact-form');\\n        const nameInput = document.getElementById('name');\\n        const emailInput = document.getElementById('email');\\n        const messageInput = document.getElementById('message');\\n\\n        form.addEventListener('submit', function(e) {\\n            e.preventDefault();\\n            \\n            // Reset error states\\n            clearErrors();\\n            \\n            // Validate form\\n            let isValid = true;\\n            \\n            if (!nameInput.value.trim()) {\\n                showError('name', 'Please enter your full name');\\n                isValid = false;\\n            }\\n            \\n            if (!emailInput.value.trim()) {\\n                showError('email', 'Please enter your email address');\\n                isValid = false;\\n            } else if (!isValidEmail(emailInput.value)) {\\n                showError('email', 'Please enter a valid email address');\\n                isValid = false;\\n            }\\n            \\n            if (isValid) {\\n                // Form is valid, show success message\\n                alert('Form submitted successfully!');\\n                form.reset();\\n            }\\n        });\\n\\n        function showError(fieldId, message) {\\n            const input = document.getElementById(fieldId);\\n            const errorElement = document.getElementById(fieldId + '-error');\\n            \\n            input.setAttribute('aria-invalid', 'true');\\n            errorElement.textContent = message;\\n            \\n            // Focus the first invalid field\\n            if (!document.querySelector('[aria-invalid=\\\"true\\\"]')) {\\n                input.focus();\\n            }\\n        }\\n\\n        function clearErrors() {\\n            const invalidFields = document.querySelectorAll('[aria-invalid=\\\"true\\\"]');\\n            invalidFields.forEach(field => {\\n                field.setAttribute('aria-invalid', 'false');\\n            });\\n            \\n            const errorMessages = document.querySelectorAll('.error-message');\\n            errorMessages.forEach(error => {\\n                error.textContent = '';\\n            });\\n        }\\n\\n        function isValidEmail(email) {\\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\\n            return emailRegex.test(email);\\n        }\\n\\n        // Accessible modal dialog functionality\\n        const openModalBtn = document.getElementById('open-modal');\\n        const closeModalBtn = document.getElementById('close-modal');\\n        const modal = document.getElementById('modal');\\n        const confirmBtn = document.getElementById('confirm-action');\\n        const cancelBtn = document.getElementById('cancel-action');\\n\\n        openModalBtn.addEventListener('click', function() {\\n            modal.setAttribute('aria-hidden', 'false');\\n            // Focus the modal when opened\\n            modal.focus();\\n            // Prevent background scrolling\\n            document.body.style.overflow = 'hidden';\\n        });\\n\\n        function closeModal() {\\n            modal.setAttribute('aria-hidden', 'true');\\n            // Return focus to the open button\\n            openModalBtn.focus();\\n            // Restore background scrolling\\n            document.body.style.overflow = '';\\n        }\\n\\n        closeModalBtn.addEventListener('click', closeModal);\\n        cancelBtn.addEventListener('click', closeModal);\\n        confirmBtn.addEventListener('click', function() {\\n            alert('Action confirmed!');\\n            closeModal();\\n        });\\n\\n        // Close modal with Escape key\\n        modal.addEventListener('keydown', function(e) {\\n            if (e.key === 'Escape') {\\n                closeModal();\\n            }\\n        });\\n\\n        // Trap focus within modal\\n        modal.addEventListener('keydown', function(e) {\\n            if (e.key === 'Tab') {\\n                const focusableElements = modal.querySelectorAll(\\n                    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\\\"-1\\\"])'\\n                );\\n                const firstElement = focusableElements[0];\\n                const lastElement = focusableElements[focusableElements.length - 1];\\n\\n                if (e.shiftKey) {\\n                    if (document.activeElement === firstElement) {\\n                        lastElement.focus();\\n                        e.preventDefault();\\n                    }\\n                } else {\\n                    if (document.activeElement === lastElement) {\\n                        firstElement.focus();\\n                        e.preventDefault();\\n                    }\\n                }\\n            }\\n        });\\n\\n        // Keyboard accessibility for all interactive elements\\n        document.addEventListener('keydown', function(e) {\\n            // Allow Space key to activate buttons (in addition to Enter)\\n            if (e.key === ' ' && e.target.matches('button')) {\\n                e.preventDefault();\\n                e.target.click();\\n            }\\n        });\\n    </script>\\n</body>\\n</html>",
      "explanation": "This example demonstrates key web accessibility principles including semantic HTML, ARIA attributes, proper form labeling, keyboard navigation, focus management, and accessible components. It shows how to create accessible forms with proper error handling, modal dialogs with focus trapping, data tables with proper headers, and skip links for keyboard users. The JavaScript includes accessible form validation and modal dialog functionality that maintains focus and prevents background scrolling.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Using generic divs and spans instead of semantic HTML elements",
        "solution": "Use appropriate HTML elements like header, nav, main, article, section, and aside to provide meaning and structure",
        "severity": "high"
      },
      {
        "mistake": "Missing or improper alt text for images",
        "solution": "Provide descriptive alt text for informative images, empty alt text for decorative images, and proper labeling for complex images",
        "severity": "high"
      },
      {
        "mistake": "Insufficient color contrast for text and interactive elements",
        "solution": "Ensure a contrast ratio of at least 4.5:1 for normal text and 3:1 for large text using tools like axe or WAVE",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Audit and Improve Website Accessibility",
        "description": "Evaluate an existing website for accessibility issues and implement improvements using accessibility best practices.",
        "checkpoints": [
          "Use automated tools like axe or Lighthouse to identify accessibility issues",
          "Test keyboard navigation and screen reader compatibility",
          "Implement proper semantic HTML and ARIA attributes where needed",
          "Ensure sufficient color contrast and provide alternative text for images"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 75,
    "difficulty": "Intermediate",
    "tags": [
      "Accessibility",
      "ARIA",
      "WCAG",
      "Inclusive Design",
      "Screen Readers"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-9",
    "moduleSlug": "web-fundamentals",
    "title": "Web Performance Optimization",
    "order": 9,
    "objectives": [
      "Measure and analyze website performance using browser dev tools and online tools",
      "Optimize images, fonts, and assets for faster loading times",
      "Implement lazy loading, code splitting, and caching strategies",
      "Reduce bundle size and improve runtime performance through efficient coding practices"
    ],
    "intro": "Web performance is critical for user experience, search engine rankings, and business success. Studies show that even a one-second delay in page load time can result in a 7% reduction in conversions. Understanding how to optimize web performance is essential for creating successful modern web applications.\n\nIn this lesson, you'll learn how to measure performance using tools like Google Lighthouse, WebPageTest, and browser developer tools. You'll understand key metrics such as First Contentful Paint (FCP), Largest Contentful Paint (LCP), and Cumulative Layout Shift (CLS) that impact user experience.\n\nAsset optimization is a fundamental aspect of performance. You'll discover techniques for optimizing images through compression, format selection, and responsive sizing. You'll also learn about font loading strategies, CSS and JavaScript minification, and efficient asset delivery.\n\nAdvanced optimization techniques include lazy loading for images and components, code splitting to reduce initial bundle sizes, and caching strategies that leverage browser and CDN capabilities. You'll explore how to implement these techniques to create faster, more efficient websites.\n\nBy mastering web performance optimization, you'll create websites that load quickly, respond rapidly to user interactions, and provide excellent user experiences that drive engagement and conversions.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Performance Optimized Web Page</title>\n    \n    <!-- Preload critical resources -->\n    <link rel=\"preload\" href=\"/fonts/main-font.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n    <link rel=\"preload\" href=\"/images/hero-image.webp\" as=\"image\">\n    \n    <!-- Critical CSS inlined to prevent render-blocking -->\n    <style>\n        /* Critical above-the-fold CSS */\n        body {\n            font-family: 'Main Font', sans-serif;\n            margin: 0;\n            padding: 0;\n            line-height: 1.6;\n        }\n        \n        .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 1rem;\n        }\n        \n        .hero {\n            padding: 2rem;\n            text-align: center;\n        }\n        \n        .hero-image {\n            width: 100%;\n            height: auto;\n            max-width: 800px;\n        }\n        \n        .content {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 2rem;\n        }\n        \n        /* Lazy loading styles */\n        .lazy-image {\n            opacity: 0;\n            transition: opacity 0.3s;\n        }\n        \n        .lazy-image.loaded {\n            opacity: 1;\n        }\n        \n        /* Skeleton loading */\n        .skeleton {\n            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n            background-size: 200% 100%;\n            animation: loading 1.5s infinite;\n            border-radius: 4px;\n        }\n        \n        @keyframes loading {\n            0% {\n                background-position: 200% 0;\n            }\n            100% {\n                background-position: -200% 0;\n            }\n        }\n        \n        .skeleton-text {\n            height: 1rem;\n            margin-bottom: 0.5rem;\n            border-radius: 4px;\n        }\n        \n        /* Responsive design for performance */\n        @media (max-width: 768px) {\n            .content {\n                padding: 1rem;\n            }\n            \n            .hero {\n                padding: 1rem;\n            }\n        }\n    </style>\n    \n    <!-- Preconnect to external domains -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n</head>\n<body>\n    <header class=\"header\">\n        <h1>Performance Optimized Website</h1>\n        <nav>\n            <a href=\"#home\">Home</a>\n            <a href=\"#about\">About</a>\n            <a href=\"#contact\">Contact</a>\n        </nav>\n    </header>\n    \n    <section class=\"hero\">\n        <h2>Welcome to Our Site</h2>\n        <!-- Hero image with loading=lazy for non-critical images -->\n        <img src=\"/images/hero-image.webp\" alt=\"Hero Image\" class=\"hero-image\" loading=\"lazy\">\n    </section>\n    \n    <main class=\"content\">\n        <h2>About Our Services</h2>\n        <p>This page demonstrates various performance optimization techniques including critical CSS inlining, image optimization, lazy loading, and efficient resource loading.</p>\n        \n        <!-- Lazy-loaded images with skeleton loading -->\n        <div class=\"image-gallery\">\n            <img data-src=\"/images/gallery-1.webp\" alt=\"Gallery Image 1\" class=\"lazy-image\" loading=\"lazy\">\n            <img data-src=\"/images/gallery-2.webp\" alt=\"Gallery Image 2\" class=\"lazy-image\" loading=\"lazy\">\n            <img data-src=\"/images/gallery-3.webp\" alt=\"Gallery Image 3\" class=\"lazy-image\" loading=\"lazy\">\n        </div>\n        \n        <h3>Performance Features</h3>\n        <ul>\n            <li>Critical CSS inlined to prevent render-blocking</li>\n            <li>Preloading of critical resources</li>\n            <li>Lazy loading for non-critical images</li>\n            <li>Efficient font loading with preconnect</li>\n            <li>Skeleton loading for better perceived performance</li>\n        </ul>\n        \n        <!-- Skeleton loading example -->\n        <div class=\"skeleton-content\">\n            <div class=\"skeleton-text\" style=\"width: 90%;\"></div>\n            <div class=\"skeleton-text\" style=\"width: 80%;\"></div>\n            <div class=\"skeleton-text\" style=\"width: 95%;\"></div>\n        </div>\n    </main>\n    \n    <!-- Non-critical JavaScript loaded asynchronously -->\n    <script src=\"/js/analytics.js\" async></script>\n    <script src=\"/js/lazy-load.js\" defer></script>\n    \n    <script>\n        // Critical JavaScript inlined to avoid additional HTTP requests\n        \n        // Font loading optimization\n        document.fonts.ready.then(() => {\n            console.log('Fonts loaded');\n        });\n        \n        // Intersection Observer for lazy loading\n        if ('IntersectionObserver' in window) {\n            const lazyImages = document.querySelectorAll('.lazy-image');\n            const imageObserver = new IntersectionObserver((entries, observer) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        const img = entry.target;\n                        const src = img.dataset.src;\n                        \n                        if (src) {\n                            img.src = src;\n                            img.classList.add('loaded');\n                            img.removeAttribute('data-src');\n                            observer.unobserve(img);\n                        }\n                    }\n                });\n            });\n            \n            lazyImages.forEach(img => imageObserver.observe(img));\n        }\n        \n        // Performance monitoring\n        window.addEventListener('load', () => {\n            // Send performance metrics to analytics\n            const perfData = performance.getEntriesByType('navigation')[0];\n            console.log('Page Load Time:', perfData.loadEventEnd - perfData.fetchStart);\n            console.log('DNS Lookup Time:', perfData.domainLookupEnd - perfData.domainLookupStart);\n            console.log('TCP Connection Time:', perfData.connectEnd - perfData.connectStart);\n        });\n        \n        // Resource hint for next page\n        const nextUrl = '/next-page';\n        const link = document.createElement('link');\n        link.rel = 'prefetch';\n        link.href = nextUrl;\n        document.head.appendChild(link);\n    </script>\n</body>\n</html>",
      "explanation": "This example demonstrates key web performance optimization techniques including critical CSS inlining to prevent render-blocking, resource preloading and preconnecting, lazy loading for images, skeleton loading for better perceived performance, and efficient JavaScript loading with async and defer attributes. The code also shows how to implement Intersection Observer for lazy loading and performance monitoring using the Navigation Timing API.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Not optimizing images for web delivery",
        "solution": "Use modern formats like WebP, compress images appropriately, implement responsive images with srcset, and consider lazy loading for non-critical images",
        "severity": "high"
      },
      {
        "mistake": "Blocking render with large CSS and JavaScript files",
        "solution": "Inline critical CSS, defer non-critical JavaScript, split code into bundles, and use async loading for third-party scripts",
        "severity": "high"
      },
      {
        "mistake": "Ignoring caching strategies",
        "solution": "Implement proper HTTP caching headers, use service workers for offline functionality, and leverage CDN caching for static assets",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Optimize a Slow Website",
        "description": "Take an existing website with performance issues and implement optimization techniques to improve loading times and user experience.",
        "checkpoints": [
          "Audit the site using Lighthouse and identify performance bottlenecks",
          "Optimize images and implement lazy loading for better loading performance",
          "Minimize and split CSS/JavaScript bundles to reduce initial load time",
          "Implement caching strategies and measure the performance improvements"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 75,
    "difficulty": "Intermediate",
    "tags": [
      "Performance Optimization",
      "Lazy Loading",
      "Caching",
      "Bundle Splitting",
      "Web Vitals"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-10",
    "moduleSlug": "web-fundamentals",
    "title": "Browser Developer Tools",
    "order": 10,
    "objectives": [
      "Master the Elements panel for inspecting and editing HTML/CSS",
      "Use the Console for JavaScript debugging and testing",
      "Analyze network requests and performance with DevTools",
      "Debug JavaScript code using breakpoints and the Sources panel"
    ],
    "intro": "Browser developer tools are essential for modern web development, providing powerful capabilities for debugging, testing, and optimizing web applications. These tools, built into every major browser, allow developers to inspect elements, debug JavaScript, analyze network performance, and audit accessibility and performance.\n\nIn this lesson, you'll learn to navigate the various panels of developer tools including Elements, Console, Sources, Network, Performance, and Application. You'll discover how to inspect and modify HTML and CSS in real-time, making it easy to experiment with design changes and debug layout issues.\n\nThe Console panel is a powerful environment for JavaScript debugging, logging, and testing. You'll learn how to use console methods effectively, evaluate expressions, and interact with the DOM and JavaScript objects directly.\n\nNetwork analysis helps you understand how your web application loads resources and identify performance bottlenecks. You'll explore how to monitor HTTP requests, analyze load times, and optimize resource delivery.\n\nJavaScript debugging features include breakpoints, call stacks, variable inspection, and step-through debugging. You'll master these tools to identify and fix issues in your JavaScript code efficiently.\n\nBy becoming proficient with browser developer tools, you'll significantly improve your development workflow, making it faster and easier to build, test, and debug web applications.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Browser Developer Tools Demo</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 20px;\n            border-radius: 4px;\n            margin-bottom: 20px;\n        }\n\n        .card {\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 15px;\n            margin: 10px 0;\n            background: #fafafa;\n            transition: all 0.3s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n        }\n\n        .button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n        }\n\n        .button:hover {\n            background: #0056b3;\n        }\n\n        .hidden {\n            display: none;\n        }\n\n        .counter {\n            font-size: 24px;\n            font-weight: bold;\n            color: #007bff;\n        }\n\n        /* Intentionally inefficient CSS for debugging practice */\n        .debug-example {\n            width: 100%;\n            height: 100px;\n            background: red;\n            margin: 10px;\n            padding: 10px;\n            border: 1px solid black;\n            position: relative;\n        }\n\n        .debug-example::before {\n            content: 'Debug Element';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header class=\"header\">\n            <h1>Browser Developer Tools Demo</h1>\n            <p>Open your browser's developer tools to explore this page</p>\n        </header>\n\n        <section>\n            <h2>Interactive Elements</h2>\n            <div class=\"card\">\n                <h3>Counter Example</h3>\n                <p>Click the button to increment the counter:</p>\n                <div class=\"counter\" id=\"counter\">0</div>\n                <button class=\"button\" id=\"incrementBtn\">Increment</button>\n                <button class=\"button\" id=\"resetBtn\">Reset</button>\n            </div>\n\n            <div class=\"card\">\n                <h3>Toggle Visibility</h3>\n                <p>Click the button to show/hide the message below:</p>\n                <button class=\"button\" id=\"toggleBtn\">Toggle Message</button>\n                <div id=\"message\" class=\"hidden\">\n                    <p>This message can be toggled on and off!</p>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <h3>CSS Debugging Example</h3>\n                <p>Inspect the elements below to practice CSS debugging:</p>\n                <div class=\"debug-example\"></div>\n                <div class=\"debug-example\"></div>\n                <div class=\"debug-example\"></div>\n            </div>\n        </section>\n\n        <section>\n            <h2>Console Testing</h2>\n            <div class=\"card\">\n                <h3>JavaScript Objects</h3>\n                <p>Open the console and try these commands:</p>\n                <ul>\n                    <li><code>document.querySelector('.header')</code></li>\n                    <li><code>console.log('Hello from the console!')</code></li>\n                    <li><code>performance.mark('test-start')</code></li>\n                    <li><code>navigator.userAgent</code></li>\n                </ul>\n            </div>\n        </section>\n    </div>\n\n    <script>\n        // JavaScript for interactive elements\n        \n        // Counter functionality\n        let count = 0;\n        const counterElement = document.getElementById('counter');\n        const incrementBtn = document.getElementById('incrementBtn');\n        const resetBtn = document.getElementById('resetBtn');\n\n        // Intentionally inefficient function for debugging practice\n        function updateCounter() {\n            count++;\n            counterElement.textContent = count;\n            \n            // Log to console for debugging\n            console.log('Counter incremented to:', count);\n            \n            // Conditional logging\n            if (count % 5 === 0) {\n                console.warn('Counter is divisible by 5!');\n            }\n            \n            if (count > 10) {\n                console.error('Counter is getting too high!');\n            }\n        }\n\n        function resetCounter() {\n            count = 0;\n            counterElement.textContent = count;\n            console.log('Counter reset to:', count);\n        }\n\n        incrementBtn.addEventListener('click', updateCounter);\n        resetBtn.addEventListener('click', resetCounter);\n\n        // Toggle functionality\n        const toggleBtn = document.getElementById('toggleBtn');\n        const message = document.getElementById('message');\n\n        toggleBtn.addEventListener('click', function() {\n            if (message.classList.contains('hidden')) {\n                message.classList.remove('hidden');\n                toggleBtn.textContent = 'Hide Message';\n                console.log('Message shown');\n            } else {\n                message.classList.add('hidden');\n                toggleBtn.textContent = 'Show Message';\n                console.log('Message hidden');\n            }\n        });\n\n        // Network request example\n        function fetchData() {\n            console.log('Fetching data...');\n            \n            // Simulate API call\n            fetch('https://jsonplaceholder.typicode.com/posts/1')\n                .then(response => {\n                    console.log('Response received:', response.status);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log('Data received:', data);\n                })\n                .catch(error => {\n                    console.error('Error fetching data:', error);\n                });\n        }\n\n        // Call fetch after a delay to observe in Network tab\n        setTimeout(fetchData, 3000);\n\n        // Performance monitoring\n        window.addEventListener('load', function() {\n            console.log('Page loaded');\n            console.time('Page Interaction Ready');\n            \n            // Simulate some processing\n            setTimeout(() => {\n                console.timeEnd('Page Interaction Ready');\n            }, 100);\n        });\n\n        // Memory leak example (for debugging practice)\n        let listeners = [];\n        \n        function addListener() {\n            const element = document.createElement('div');\n            document.body.appendChild(element);\n            \n            const handler = function() {\n                console.log('Element clicked');\n            };\n            \n            element.addEventListener('click', handler);\n            listeners.push({element, handler}); // Keeping references\n            \n            console.log('Listener added. Total listeners:', listeners.length);\n        }\n\n        // Example of debugging with breakpoints\n        function calculateTotal(items) {\n            let total = 0;\n            \n            // Set a breakpoint here to inspect variables\n            for (let i = 0; i < items.length; i++) {\n                total += items[i].price * items[i].quantity;\n            }\n            \n            return total;\n        }\n\n        // Test data for debugging\n        const testData = [\n            { name: 'Item 1', price: 10, quantity: 2 },\n            { name: 'Item 2', price: 15, quantity: 1 },\n            { name: 'Item 3', price: 20, quantity: 3 }\n        ];\n\n        // Calculate total (set breakpoint in function to debug)\n        const total = calculateTotal(testData);\n        console.log('Total calculated:', total);\n\n        // Global error handling for debugging\n        window.addEventListener('error', function(e) {\n            console.error('Global error caught:', e.error);\n        });\n\n        // Example of intentional error for debugging practice\n        function triggerError() {\n            console.log('Triggering an error...');\n            // This will cause an error\n            undefinedFunction();\n        }\n\n        // Uncomment the line below to test error handling\n        // triggerError();\n    </script>\n</body>\n</html>",
      "explanation": "This example demonstrates various features of browser developer tools including interactive elements for testing the Elements panel, console logging for JavaScript debugging, network requests for monitoring HTTP traffic, and intentional inefficiencies for practicing debugging techniques. The code includes examples of breakpoints, variable inspection, performance timing, and error handling that can be explored using different DevTools panels.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Not using the Elements panel to inspect and modify CSS in real-time",
        "solution": "Practice inspecting elements and modifying styles directly in the browser to quickly test design changes and debug layout issues",
        "severity": "medium"
      },
      {
        "mistake": "Ignoring the Network tab for performance analysis",
        "solution": "Regularly monitor network requests to identify slow-loading resources, optimize asset delivery, and debug API calls",
        "severity": "high"
      },
      {
        "mistake": "Using console.log() excessively instead of proper debugging techniques",
        "solution": "Use breakpoints, step-through debugging, and conditional logging instead of cluttering code with console.log() statements",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Debug a Problematic Web Page",
        "description": "Use browser developer tools to identify and fix issues in a web page with performance problems, JavaScript errors, and CSS layout issues.",
        "checkpoints": [
          "Identify and fix CSS layout issues using the Elements panel",
          "Debug JavaScript errors using breakpoints and the Console panel",
          "Analyze network performance and optimize slow-loading resources",
          "Use the Performance panel to identify rendering bottlenecks"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 60,
    "difficulty": "Intermediate",
    "tags": [
      "Developer Tools",
      "Debugging",
      "Chrome DevTools",
      "Firefox Developer Tools",
      "Safari Web Inspector"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-11",
    "moduleSlug": "web-fundamentals",
    "title": "Cross-Browser Compatibility",
    "order": 11,
    "objectives": [
      "Understand browser differences and compatibility challenges",
      "Implement feature detection and progressive enhancement techniques",
      "Use polyfills and transpilation for older browser support",
      "Test and debug across multiple browsers and devices"
    ],
    "intro": "Cross-browser compatibility ensures that web applications work consistently across different browsers, versions, and devices. With users accessing websites through various browsers like Chrome, Firefox, Safari, Edge, and older versions of Internet Explorer, creating compatible experiences is essential for reaching the widest possible audience.\n\nIn this lesson, you'll learn about the differences between browsers in terms of rendering engines, JavaScript implementations, and CSS support. You'll understand how to identify compatibility issues and implement solutions that work across all target browsers.\n\nFeature detection is a fundamental technique for handling browser differences. Rather than browser detection, you'll learn to check for specific features and provide fallbacks or alternatives when features aren't supported. Progressive enhancement ensures that core functionality works in all browsers while enhancing the experience for modern browsers.\n\nPolyfills and transpilation help bridge the gap between modern JavaScript features and older browser support. You'll discover how to use tools like Babel for JavaScript transpilation and polyfill libraries to add missing functionality to older browsers.\n\nTesting across multiple browsers is crucial for ensuring compatibility. You'll explore tools and techniques for efficient cross-browser testing, including browser emulators, virtual machines, and cloud-based testing services.\n\nBy mastering cross-browser compatibility, you'll create web applications that provide consistent experiences for all users, regardless of their browser choice or device.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cross-Browser Compatibility Demo</title>\n    <style>\n        /* CSS Reset for consistent base styles */\n        *, *::before, *::after {\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n            color: #333;\n        }\n\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n\n        /* Feature queries for progressive enhancement */\n        .card {\n            border: 1px solid #ddd;\n            padding: 20px;\n            margin: 20px 0;\n            border-radius: 4px;\n            background: #fff;\n        }\n\n        /* Enhanced styles for browsers that support them */\n        @supports (box-shadow: 0 2px 10px rgba(0,0,0,0.1)) {\n            .card {\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            }\n        }\n\n        @supports (display: grid) {\n            .grid-container {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n                gap: 20px;\n            }\n        }\n\n        /* Fallback for browsers that don't support grid */\n        .grid-container {\n            display: flex;\n            flex-wrap: wrap;\n        }\n\n        .grid-item {\n            flex: 1 1 250px;\n            margin: 10px;\n        }\n\n        /* Flexbox with fallback */\n        .flex-container {\n            display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */\n            display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */\n            display: -ms-flexbox;      /* TWEENER - IE 10 */\n            display: -webkit-flex;     /* NEW - Chrome */\n            display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */\n            \n            -webkit-flex-wrap: wrap;\n            -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        }\n\n        .button {\n            display: inline-block;\n            padding: 10px 20px;\n            background: #007bff;\n            color: white;\n            text-decoration: none;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n            \n            /* Vendor prefixes for transitions */\n            -webkit-transition: background-color 0.3s ease;\n            -moz-transition: background-color 0.3s ease;\n            -o-transition: background-color 0.3s ease;\n            transition: background-color 0.3s ease;\n        }\n\n        .button:hover {\n            background: #0056b3;\n        }\n\n        /* Responsive design with fallbacks */\n        .responsive-element {\n            width: 100%;\n            padding: 20px;\n            background: #f8f9fa;\n            margin: 10px 0;\n        }\n\n        @media (min-width: 768px) {\n            .responsive-element {\n                width: 50%;\n                float: left;\n            }\n        }\n\n        /* Clear floats */\n        .clearfix::after {\n            content: \"\";\n            display: table;\n            clear: both;\n        }\n\n        /* Feature detection classes (added by JavaScript) */\n        .no-flexbox .flex-fallback {\n            display: block;\n        }\n\n        .no-es6 .es6-fallback {\n            display: block;\n        }\n\n        .fallback {\n            display: none;\n        }\n\n        /* CSS custom properties with fallbacks */\n        .themed-element {\n            background-color: #007bff; /* Fallback */\n            background-color: var(--primary-color, #007bff);\n            color: white;\n            padding: 20px;\n            margin: 10px 0;\n            border-radius: 4px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Cross-Browser Compatibility Demo</h1>\n            <p>Examples of techniques for ensuring compatibility across browsers</p>\n        </header>\n\n        <section>\n            <h2>Feature Detection Examples</h2>\n            \n            <div class=\"card\">\n                <h3>Modern JavaScript Features</h3>\n                <p>Check the console for feature detection results.</p>\n                <div id=\"feature-results\"></div>\n            </div>\n\n            <div class=\"card\">\n                <h3>CSS Feature Queries</h3>\n                <p>This card has enhanced styling in browsers that support box-shadow.</p>\n            </div>\n\n            <div class=\"card\">\n                <h3>Grid Layout with Flexbox Fallback</h3>\n                <div class=\"grid-container\">\n                    <div class=\"grid-item card\">\n                        <h4>Item 1</h4>\n                        <p>Grid item with fallback support.</p>\n                    </div>\n                    <div class=\"grid-item card\">\n                        <h4>Item 2</h4>\n                        <p>Grid item with fallback support.</p>\n                    </div>\n                    <div class=\"grid-item card\">\n                        <h4>Item 3</h4>\n                        <p>Grid item with fallback support.</p>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <h3>Polyfill Example</h3>\n                <button id=\"polyfill-demo\" class=\"button\">Test Array.includes() Polyfill</button>\n                <div id=\"polyfill-result\"></div>\n            </div>\n\n            <div class=\"card\">\n                <h3>CSS Custom Properties</h3>\n                <div class=\"themed-element\">\n                    <p>This element uses CSS custom properties with fallbacks.</p>\n                </div>\n                <button id=\"theme-toggle\" class=\"button\">Toggle Theme</button>\n            </div>\n\n            <div class=\"card\">\n                <h3>Responsive Design</h3>\n                <div class=\"responsive-element clearfix\">\n                    <p>This element uses responsive design techniques with fallbacks for older browsers.</p>\n                </div>\n                <div class=\"responsive-element clearfix\">\n                    <p>Resize your browser to see the responsive behavior.</p>\n                </div>\n            </div>\n        </section>\n    </div>\n\n    <script>\n        // Feature detection\n        function detectFeatures() {\n            const results = [];\n            \n            // Check for modern JavaScript features\n            results.push({\n                feature: 'Arrow Functions',\n                supported: (() => {\n                    try {\n                        eval('(() => {})');\n                        return true;\n                    } catch (e) {\n                        return false;\n                    }\n                })()\n            });\n            \n            results.push({\n                feature: 'Promise',\n                supported: typeof Promise !== 'undefined'\n            });\n            \n            results.push({\n                feature: 'Fetch API',\n                supported: typeof fetch !== 'undefined'\n            });\n            \n            results.push({\n                feature: 'Array.includes()',\n                supported: typeof Array.prototype.includes !== 'undefined'\n            });\n            \n            results.push({\n                feature: 'CSS Custom Properties',\n                supported: (() => {\n                    const test = window.CSS && CSS.supports;\n                    return test ? test('--test', '0') : false;\n                })()\n            });\n            \n            return results;\n        }\n\n        // Display feature detection results\n        function displayFeatureResults() {\n            const results = detectFeatures();\n            const container = document.getElementById('feature-results');\n            \n            results.forEach(result => {\n                const div = document.createElement('div');\n                div.innerHTML = `\n                    <p>\n                        <strong>${result.feature}:</strong> \n                        <span style=\"color: ${result.supported ? 'green' : 'red'}\">\n                            ${result.supported ? 'Supported' : 'Not Supported'}\n                        </span>\n                    </p>\n                `;\n                container.appendChild(div);\n            });\n        }\n\n        // Polyfill for Array.includes (if needed)\n        if (!Array.prototype.includes) {\n            Array.prototype.includes = function(searchElement, fromIndex) {\n                return this.indexOf(searchElement, fromIndex) !== -1;\n            };\n            console.log('Array.includes polyfill applied');\n        }\n\n        // Test polyfill\n        document.getElementById('polyfill-demo').addEventListener('click', function() {\n            const testArray = [1, 2, 3, 4, 5];\n            const result = testArray.includes(3);\n            document.getElementById('polyfill-result').innerHTML = `\n                <p>Array.includes(3) result: <strong>${result}</strong></p>\n            `;\n        });\n\n        // Theme toggle with CSS custom properties\n        document.getElementById('theme-toggle').addEventListener('click', function() {\n            const root = document.documentElement;\n            const currentColor = getComputedStyle(root).getPropertyValue('--primary-color');\n            \n            if (currentColor.trim() === '#007bff' || !currentColor) {\n                root.style.setProperty('--primary-color', '#28a745');\n            } else {\n                root.style.setProperty('--primary-color', '#007bff');\n            }\n        });\n\n        // Add feature detection classes to body\n        function addFeatureClasses() {\n            const html = document.documentElement;\n            \n            // Check for flexbox support\n            if (!('flexWrap' in document.body.style)) {\n                html.className += ' no-flexbox';\n            }\n            \n            // Check for ES6 support\n            try {\n                eval('const test = () => {}');\n            } catch (e) {\n                html.className += ' no-es6';\n            }\n        }\n\n        // Initialize\n        document.addEventListener('DOMContentLoaded', function() {\n            displayFeatureResults();\n            addFeatureClasses();\n            \n            console.log('Cross-browser compatibility demo initialized');\n        });\n\n        // Fallback for older browsers\n        if (!window.addEventListener) {\n            window.addEventListener = function(event, callback) {\n                return window.attachEvent('on' + event, callback);\n            };\n        }\n\n        // Performance monitoring for different browsers\n        if (window.performance && window.performance.timing) {\n            window.addEventListener('load', function() {\n                const timing = window.performance.timing;\n                const loadTime = timing.loadEventEnd - timing.navigationStart;\n                console.log('Page load time:', loadTime + 'ms');\n            });\n        }\n\n        // Error handling for cross-browser compatibility\n        window.onerror = function(message, source, lineno, colno, error) {\n            console.error('Global error:', message, 'at', source, ':', lineno, ':', colno);\n            \n            // Send error to logging service (in production)\n            // logError({ message, source, lineno, colno, error });\n            \n            return true; // Prevent default error handling\n        };\n    </script>\n</body>\n</html>",
      "explanation": "This example demonstrates key cross-browser compatibility techniques including CSS vendor prefixes, feature queries with @supports, flexbox with fallbacks, CSS custom properties with fallbacks, JavaScript feature detection, polyfills for missing functionality, and responsive design with fallbacks. The code shows how to progressively enhance experiences while maintaining functionality in older browsers.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Using browser detection instead of feature detection",
        "solution": "Use feature detection libraries like Modernizr or implement custom feature tests to check for specific capabilities rather than targeting specific browsers",
        "severity": "high"
      },
      {
        "mistake": "Not testing in target browsers regularly",
        "solution": "Establish a regular testing routine across all target browsers and versions, using tools like BrowserStack or Sauce Labs for efficient cross-browser testing",
        "severity": "high"
      },
      {
        "mistake": "Ignoring CSS vendor prefixes for older browser support",
        "solution": "Use autoprefixer tools to automatically add necessary vendor prefixes, and test CSS features in target browsers to ensure compatibility",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Implement Cross-Browser Compatibility for a Web Application",
        "description": "Take a modern web application and implement cross-browser compatibility techniques to ensure it works across all target browsers.",
        "checkpoints": [
          "Identify browser compatibility issues using feature detection",
          "Implement polyfills for missing JavaScript features",
          "Add CSS fallbacks for unsupported layout techniques",
          "Test the application across multiple browsers and versions"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 75,
    "difficulty": "Intermediate",
    "tags": [
      "Cross-Browser Compatibility",
      "Feature Detection",
      "Polyfills",
      "Progressive Enhancement",
      "Browser Testing"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-12",
    "moduleSlug": "web-fundamentals",
    "title": "Debugging Techniques",
    "order": 12,
    "objectives": [
      "Master console debugging methods and tools",
      "Use breakpoints and step-through debugging effectively",
      "Implement error handling and logging strategies",
      "Debug asynchronous code and network issues"
    ],
    "intro": "Debugging is an essential skill for every developer, allowing you to identify, understand, and fix issues in your code efficiently. Effective debugging techniques can save hours of frustration and lead to more robust, reliable applications. Understanding how to systematically approach debugging is just as important as knowing the tools available.\n\nIn this lesson, you'll learn advanced console debugging techniques beyond simple console.log() statements. You'll discover how to use console methods like console.table(), console.group(), and console.trace() to gain deeper insights into your code's behavior. You'll also learn about conditional breakpoints and watch expressions for more targeted debugging.\n\nStep-through debugging allows you to pause execution at specific points in your code and examine variables, call stacks, and program flow. You'll master breakpoints, step over, step into, and step out commands to trace through your code systematically.\n\nError handling and logging are crucial for both debugging and maintaining production applications. You'll learn how to implement comprehensive error handling strategies, create meaningful error messages, and establish logging practices that help identify issues in production environments.\n\nAsynchronous code and network requests present unique debugging challenges. You'll discover techniques for debugging promises, async/await patterns, and network issues using browser developer tools and specialized debugging approaches.\n\nBy mastering debugging techniques, you'll become a more efficient developer who can quickly identify and resolve issues, leading to higher quality code and faster development cycles.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Advanced Debugging Techniques</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        .debug-section {\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 15px;\n            margin: 15px 0;\n            background: #fafafa;\n        }\n\n        .button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin: 5px;\n        }\n\n        .button:hover {\n            background: #0056b3;\n        }\n\n        .error {\n            background: #f8d7da;\n            color: #721c24;\n            border: 1px solid #f5c6cb;\n            padding: 10px;\n            border-radius: 4px;\n            margin: 10px 0;\n        }\n\n        .success {\n            background: #d4edda;\n            color: #155724;\n            border: 1px solid #c3e6cb;\n            padding: 10px;\n            border-radius: 4px;\n            margin: 10px 0;\n        }\n\n        .console-output {\n            background: #2d2d2d;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 4px;\n            font-family: 'Courier New', monospace;\n            font-size: 14px;\n            margin: 10px 0;\n            white-space: pre-wrap;\n        }\n\n        .hidden {\n            display: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\\\"container\\\">\n        <header>\n            <h1>Advanced Debugging Techniques</h1>\n            <p>Examples of various debugging methods and tools</p>\n        </header>\n\n        <section class=\\\"debug-section\\\">\n            <h2>Console Debugging Methods</h2>\n            <button id=\\\"console-demo\\\" class=\\\"button\\\">Run Console Demo</button>\n            <div id=\\\"console-output\\\" class=\\\"console-output\\\"></div>\n        </section>\n\n        <section class=\\\"debug-section\\\">\n            <h2>Error Handling Examples</h2>\n            <button id=\\\"error-demo\\\" class=\\\"button\\\">Trigger Error</button>\n            <button id=\\\"handled-error-demo\\\" class=\\\"button\\\">Handled Error</button>\n            <div id=\\\"error-output\\\"></div>\n        </section>\n\n        <section class=\\\"debug-section\\\">\n            <h2>Asynchronous Debugging</h2>\n            <button id=\\\"async-demo\\\" class=\\\"button\\\">Run Async Demo</button>\n            <button id=\\\"promise-demo\\\" class=\\\"button\\\">Promise Demo</button>\n            <div id=\\\"async-output\\\"></div>\n        </section>\n\n        <section class=\\\"debug-section\\\">\n            <h2>Network Debugging</h2>\n            <button id=\\\"network-demo\\\" class=\\\"button\\\">Fetch Data</button>\n            <button id=\\\"error-network-demo\\\" class=\\\"button\\\">Fetch Error</button>\n            <div id=\\\"network-output\\\"></div>\n        </section>\n\n        <section class=\\\"debug-section\\\">\n            <h2>Performance Debugging</h2>\n            <button id=\\\"performance-demo\\\" class=\\\"button\\\">Run Performance Test</button>\n            <div id=\\\"performance-output\\\"></div>\n        </section>\n    </div>\n\n    <script>\n        // Advanced Console Debugging Methods\n        document.getElementById('console-demo').addEventListener('click', function() {\n            console.log('=== Console Debugging Demo ===');\n            \n            // Different console methods\n            console.info('This is an info message');\n            console.warn('This is a warning message');\n            console.error('This is an error message');\n            \n            // Console grouping\n            console.group('User Data Group');\n            console.log('Name: John Doe');\n            console.log('Age: 30');\n            console.log('Email: john@example.com');\n            console.groupEnd();\n            \n            // Console table\n            const users = [\n                { name: 'John', age: 30, city: 'New York' },\n                { name: 'Jane', age: 25, city: 'Los Angeles' },\n                { name: 'Bob', age: 35, city: 'Chicago' }\n            ];\n            console.table(users);\n            \n            // Console trace\n            function functionA() {\n                functionB();\n            }\n            \n            function functionB() {\n                functionC();\n            }\n            \n            function functionC() {\n                console.trace('Trace from function C');\n            }\n            \n            functionA();\n            \n            // Console time\n            console.time('Expensive Operation');\n            let sum = 0;\n            for (let i = 0; i < 1000000; i++) {\n                sum += i;\n            }\n            console.timeEnd('Expensive Operation');\n            \n            // Conditional logging\n            const debugMode = true;\n            if (debugMode) {\n                console.log('Debug mode is enabled');\n            }\n            \n            // Output to DOM for visualization\n            document.getElementById('console-output').textContent = `\nConsole debugging methods demonstrated.\nCheck the browser console for detailed output.\n\nMethods shown:\n- console.log/info/warn/error\n- console.group/groupEnd\n- console.table\n- console.trace\n- console.time/timeEnd\n            `;\n        });\n\n        // Error Handling Examples\n        document.getElementById('error-demo').addEventListener('click', function() {\n            try {\n                // This will cause an error\n                undefinedFunction();\n            } catch (error) {\n                console.error('Caught error:', error);\n                document.getElementById('error-output').innerHTML = `\n                    <div class=\\\"error\\\">\n                        <strong>Error:</strong> ${error.message}\n                        <br><strong>Stack:</strong> ${error.stack}\n                    </div>\n                `;\n            }\n        });\n\n        document.getElementById('handled-error-demo').addEventListener('click', function() {\n            try {\n                const result = riskyOperation();\n                document.getElementById('error-output').innerHTML = `\n                    <div class=\\\"success\\\">\n                        <strong>Success:</strong> Operation completed with result: ${result}\n                    </div>\n                `;\n            } catch (error) {\n                handleError(error);\n            }\n        });\n\n        function riskyOperation() {\n            // Simulate a random success/failure\n            if (Math.random() > 0.5) {\n                return 'Operation successful';\n            } else {\n                throw new Error('Random operation failed');\n            }\n        }\n\n        function handleError(error) {\n            // Log error with context\n            console.error('Application Error:', {\n                message: error.message,\n                stack: error.stack,\n                timestamp: new Date().toISOString(),\n                url: window.location.href\n            });\n\n            // Display user-friendly error\n            document.getElementById('error-output').innerHTML = `\n                <div class=\\\"error\\\">\n                    <strong>Sorry, something went wrong.</strong>\n                    <br>Please try again later.\n                </div>\n            `;\n\n            // In production, you might send this to an error tracking service\n            // sendErrorToService(error);\n        }\n\n        // Asynchronous Debugging\n        document.getElementById('async-demo').addEventListener('click', async function() {\n            const output = document.getElementById('async-output');\n            output.innerHTML = '<p>Starting async operations...</p>';\n\n            try {\n                console.log('1. Starting async operation');\n                \n                // Simulate async operation with debugging\n                const result1 = await delayedOperation('First', 1000);\n                console.log('2. First operation result:', result1);\n                \n                const result2 = await delayedOperation('Second', 500);\n                console.log('3. Second operation result:', result2);\n                \n                const finalResult = result1 + ' + ' + result2;\n                console.log('4. Final result:', finalResult);\n                \n                output.innerHTML = `\n                    <div class=\\\"success\\\">\n                        <strong>Async Operations Complete:</strong> ${finalResult}\n                    </div>\n                `;\n            } catch (error) {\n                console.error('Async operation failed:', error);\n                output.innerHTML = `\n                    <div class=\\\"error\\\">\n                        <strong>Async Error:</strong> ${error.message}\n                    </div>\n                `;\n            }\n        });\n\n        function delayedOperation(name, delay) {\n            console.log(`Starting ${name} operation with ${delay}ms delay`);\n            \n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    // Simulate random success/failure\n                    if (Math.random() > 0.2) {\n                        resolve(`${name} completed`);\n                    } else {\n                        reject(new Error(`${name} operation failed`));\n                    }\n                }, delay);\n            });\n        }\n\n        document.getElementById('promise-demo').addEventListener('click', function() {\n            const output = document.getElementById('async-output');\n            output.innerHTML = '<p>Running promise chain...</p>';\n\n            // Promise chain with debugging\n            Promise.resolve()\n                .then(() => {\n                    console.log('Step 1: Starting promise chain');\n                    return 'Step 1 result';\n                })\n                .then((result) => {\n                    console.log('Step 2: Received', result);\n                    return result + ' -> Step 2 result';\n                })\n                .then((result) => {\n                    console.log('Step 3: Processing', result);\n                    if (Math.random() > 0.5) {\n                        return result + ' -> Step 3 success';\n                    } else {\n                        throw new Error('Step 3 failed');\n                    }\n                })\n                .then((result) => {\n                    console.log('Step 4: Final result', result);\n                    output.innerHTML = `\n                        <div class=\\\"success\\\">\n                            <strong>Promise Chain Success:</strong> ${result}\n                        </div>\n                    `;\n                })\n                .catch((error) => {\n                    console.error('Promise chain error:', error);\n                    output.innerHTML = `\n                        <div class=\\\"error\\\">\n                            <strong>Promise Error:</strong> ${error.message}\n                        </div>\n                    `;\n                });\n        });\n\n        // Network Debugging\n        document.getElementById('network-demo').addEventListener('click', async function() {\n            const output = document.getElementById('network-output');\n            output.innerHTML = '<p>Fetching data...</p>';\n\n            try {\n                console.log('Starting network request');\n                \n                // Network request with debugging\n                const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n                console.log('Response received:', response.status, response.statusText);\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n                }\n                \n                const data = await response.json();\n                console.log('Data received:', data);\n                \n                output.innerHTML = `\n                    <div class=\\\"success\\\">\n                        <strong>Network Request Success:</strong>\n                        <br>Title: ${data.title}\n                        <br>Body: ${data.body.substring(0, 50)}...\n                    </div>\n                `;\n            } catch (error) {\n                console.error('Network request failed:', error);\n                output.innerHTML = `\n                    <div class=\\\"error\\\">\n                        <strong>Network Error:</strong> ${error.message}\n                    </div>\n                `;\n            }\n        });\n\n        document.getElementById('error-network-demo').addEventListener('click', function() {\n            const output = document.getElementById('network-output');\n            output.innerHTML = '<p>Fetching from invalid endpoint...</p>';\n\n            // Network request that will fail\n            fetch('https://invalid-domain-that-does-not-exist-12345.com/api/data')\n                .then(response => {\n                    console.log('Network response:', response);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log('Data received:', data);\n                    output.innerHTML = `\n                        <div class=\\\"success\\\">\n                            <strong>Unexpected Success:</strong> ${JSON.stringify(data)}\n                        </div>\n                    `;\n                })\n                .catch(error => {\n                    console.error('Network error caught:', error);\n                    output.innerHTML = `\n                        <div class=\\\"error\\\">\n                            <strong>Expected Network Error:</strong> ${error.message}\n                        </div>\n                    `;\n                });\n        });\n\n        // Performance Debugging\n        document.getElementById('performance-demo').addEventListener('click', function() {\n            const output = document.getElementById('performance-output');\n            output.innerHTML = '<p>Running performance test...</p>';\n\n            // Performance measurement\n            performance.mark('start');\n            \n            // Simulate some work\n            let sum = 0;\n            for (let i = 0; i < 1000000; i++) {\n                sum += Math.sqrt(i);\n            }\n            \n            performance.mark('end');\n            performance.measure('computation', 'start', 'end');\n            \n            const measure = performance.getEntriesByName('computation')[0];\n            console.log('Performance measurement:', measure);\n            \n            output.innerHTML = `\n                <div class=\\\"success\\\">\n                    <strong>Performance Test Complete:</strong>\n                    <br>Duration: ${measure.duration.toFixed(2)}ms\n                    <br>Sum result: ${sum.toFixed(2)}\n                </div>\n            `;\n            \n            // Clear marks and measures\n            performance.clearMarks();\n            performance.clearMeasures();\n        });\n\n        // Global error handling\n        window.addEventListener('error', function(event) {\n            console.error('Global error handler:', {\n                message: event.message,\n                filename: event.filename,\n                lineno: event.lineno,\n                colno: event.colno,\n                error: event.error\n            });\n        });\n\n        window.addEventListener('unhandledrejection', function(event) {\n            console.error('Unhandled promise rejection:', {\n                reason: event.reason,\n                promise: event.promise\n            });\n            \n            // Prevent the default browser behavior\n            event.preventDefault();\n        });\n\n        // Initialize\n        document.addEventListener('DOMContentLoaded', function() {\n            console.log('Debugging demo initialized');\n            console.log('Open the browser console to see debugging output');\n        });\n    </script>\n</body>\n</html>",
      "explanation": "This example demonstrates advanced debugging techniques including console methods beyond console.log(), error handling with try/catch blocks, asynchronous debugging with promises and async/await, network request debugging with fetch API, and performance measurement using the Performance API. The code shows how to implement comprehensive error handling, use console grouping and tables for better visualization, trace function calls, measure execution time, and handle both synchronous and asynchronous errors.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Overusing console.log() instead of proper debugging techniques",
        "solution": "Use appropriate console methods (console.error, console.warn, console.table), implement breakpoints for complex debugging, and remove console statements from production code",
        "severity": "medium"
      },
      {
        "mistake": "Not handling asynchronous errors properly",
        "solution": "Use both try/catch blocks with async/await and .catch() methods with promises, and implement global error handlers for unhandled rejections",
        "severity": "high"
      },
      {
        "mistake": "Ignoring network error handling",
        "solution": "Always implement proper error handling for network requests, check response status codes, and provide user feedback for network failures",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Debug a Complex Web Application",
        "description": "Identify and fix bugs in a web application with multiple interconnected components, asynchronous operations, and network requests.",
        "checkpoints": [
          "Use browser developer tools to identify the source of errors",
          "Implement proper error handling for asynchronous operations",
          "Debug network request failures and implement appropriate fallbacks",
          "Optimize performance by identifying and fixing bottlenecks"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 75,
    "difficulty": "Intermediate",
    "tags": [
      "Debugging",
      "Error Handling",
      "Console Debugging",
      "Asynchronous Debugging",
      "Performance Debugging"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-13",
    "moduleSlug": "web-fundamentals",
    "title": "Modern Web APIs",
    "order": 13,
    "objectives": [
      "Utilize the Fetch API for modern HTTP requests",
      "Implement local storage and session storage for client-side data persistence",
      "Use the Geolocation API to access user location data",
      "Work with the Canvas API for dynamic graphics and image manipulation"
    ],
    "intro": "Modern web APIs provide powerful capabilities that enable rich, interactive web applications without requiring plugins or additional software. These browser-native APIs allow developers to access device features, store data locally, create dynamic graphics, and interact with users in sophisticated ways. Understanding how to leverage these APIs is essential for creating modern web experiences.\n\nIn this lesson, you'll learn about the Fetch API, which provides a modern, promise-based approach to making HTTP requests. You'll discover how to handle responses, work with different data formats, and implement error handling for network operations.\n\nClient-side storage APIs like localStorage and sessionStorage allow you to persist data in the browser, enabling features like offline functionality, user preferences, and application state management. You'll learn the differences between these storage mechanisms and how to use them effectively.\n\nThe Geolocation API provides access to a user's physical location, enabling location-based services and personalized experiences. You'll explore how to request location data responsibly and handle user permissions appropriately.\n\nThe Canvas API allows for dynamic, scriptable rendering of 2D shapes and bitmap images, making it possible to generate graphics, charts, and interactive visualizations directly in the browser. You'll learn the fundamentals of canvas drawing and animation techniques.\n\nBy mastering modern web APIs, you'll be able to create rich, engaging web applications that leverage the full capabilities of modern browsers and devices.",
    "code": {
      "example": "<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Modern Web APIs Demo</title>\\n    <style>\\n        body {\\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n            margin: 0;\\n            padding: 20px;\\n            background-color: #f5f5f5;\\n        }\\n        .container {\\n            max-width: 1000px;\\n            margin: 0 auto;\\n            background: white;\\n            padding: 20px;\\n            border-radius: 8px;\\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\\n        }\\n        .api-section {\\n            border: 1px solid #ddd;\\n            border-radius: 4px;\\n            padding: 20px;\\n            margin: 20px 0;\\n            background: #fafafa;\\n        }\\n        .button {\\n            background: #007bff;\\n            color: white;\\n            border: none;\\n            padding: 10px 15px;\\n            border-radius: 4px;\\n            cursor: pointer;\\n            font-size: 14px;\\n            margin: 5px;\\n        }\\n        .button:hover {\\n            background: #0056b3;\\n        }\\n        .button:disabled {\\n            background: #ccc;\\n            cursor: not-allowed;\\n        }\\n        .error {\\n            background: #f8d7da;\\n            color: #721c24;\\n            border: 1px solid #f5c6cb;\\n            padding: 10px;\\n            border-radius: 4px;\\n            margin: 10px 0;\\n        }\\n        .success {\\n            background: #d4edda;\\n            color: #155724;\\n            border: 1px solid #c3e6cb;\\n            padding: 10px;\\n            border-radius: 4px;\\n            margin: 10px 0;\\n        }\\n        .info {\\n            background: #d1ecf1;\\n            color: #0c5460;\\n            border: 1px solid #bee5eb;\\n            padding: 10px;\\n            border-radius: 4px;\\n            margin: 10px 0;\\n        }\\n        canvas {\\n            border: 1px solid #ddd;\\n            border-radius: 4px;\\n            background: white;\\n        }\\n        .data-display {\\n            background: #f8f9fa;\\n            border: 1px solid #e9ecef;\\n            border-radius: 4px;\\n            padding: 15px;\\n            margin: 10px 0;\\n            font-family: 'Courier New', monospace;\\n            white-space: pre-wrap;\\n        }\\n        .hidden {\\n            display: none;\\n        }\\n        .coordinates {\\n            font-weight: bold;\\n            color: #007bff;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"container\\\">\\n        <header>\\n            <h1>Modern Web APIs Demo</h1>\\n            <p>Examples of various modern web APIs in action</p>\\n        </header>\\n        <section class=\\\"api-section\\\">\\n            <h2>Fetch API</h2>\\n            <button id=\\\"fetch-demo\\\" class=\\\"button\\\">Fetch User Data</button>\\n            <button id=\\\"fetch-error-demo\\\" class=\\\"button\\\">Fetch Error Demo</button>\\n            <div id=\\\"fetch-output\\\"></div>\\n        </section>\\n        <section class=\\\"api-section\\\">\\n            <h2>Web Storage API</h2>\\n            <div>\\n                <input type=\\\"text\\\" id=\\\"storage-input\\\" placeholder=\\\"Enter some data to store\\\">\\n                <button id=\\\"local-storage-demo\\\" class=\\\"button\\\">Save to Local Storage</button>\\n                <button id=\\\"session-storage-demo\\\" class=\\\"button\\\">Save to Session Storage</button>\\n                <button id=\\\"clear-storage-demo\\\" class=\\\"button\\\">Clear Storage</button>\\n            </div>\\n            <div id=\\\"storage-output\\\"></div>\\n        </section>\\n        <section class=\\\"api-section\\\">\\n            <h2>Geolocation API</h2>\\n            <button id=\\\"geolocation-demo\\\" class=\\\"button\\\">Get My Location</button>\\n            <button id=\\\"watch-position-demo\\\" class=\\\"button\\\">Watch Position</button>\\n            <button id=\\\"stop-watch-demo\\\" class=\\\"button\\\" disabled>Stop Watching</button>\\n            <div id=\\\"geolocation-output\\\"></div>\\n        </section>\\n        <section class=\\\"api-section\\\">\\n            <h2>Canvas API</h2>\\n            <div>\\n                <button id=\\\"canvas-demo\\\" class=\\\"button\\\">Draw on Canvas</button>\\n                <button id=\\\"canvas-animation-demo\\\" class=\\\"button\\\">Start Animation</button>\\n                <button id=\\\"stop-animation-demo\\\" class=\\\"button\\\" disabled>Stop Animation</button>\\n                <button id=\\\"clear-canvas-demo\\\" class=\\\"button\\\">Clear Canvas</button>\\n            </div>\\n            <canvas id=\\\"demo-canvas\\\" width=\\\"600\\\" height=\\\"300\\\"></canvas>\\n        </section>\\n        <section class=\\\"api-section\\\">\\n            <h2>Additional Modern APIs</h2>\\n            <button id=\\\"notification-demo\\\" class=\\\"button\\\">Show Notification</button>\\n            <button id=\\\"vibration-demo\\\" class=\\\"button\\\">Vibrate Device</button>\\n            <div id=\\\"additional-output\\\"></div>\\n        </section>\\n    </div>\\n    <script> ... full JS escaped here ... </script>\\n</body>\\n</html>",
      "explanation": "This example demonstrates various modern web APIs including the Fetch API for HTTP requests, Web Storage API for client-side data persistence, Geolocation API for accessing user location, Canvas API for dynamic graphics, and additional APIs like Notifications and Vibration. The code shows how to properly handle API permissions, implement error handling, and use these APIs to create rich web experiences.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Not checking for API support before using modern web APIs",
        "solution": "Always check if an API is available in the user's browser before using it, and provide fallbacks or graceful degradation for unsupported features",
        "severity": "high"
      },
      {
        "mistake": "Ignoring user privacy and permissions for sensitive APIs",
        "solution": "Always request user permission for sensitive APIs like geolocation and notifications, explain why you need the data, and handle permission denials gracefully",
        "severity": "high"
      },
      {
        "mistake": "Not handling API errors and edge cases properly",
        "solution": "Implement comprehensive error handling for all API calls, including network errors, permission denials, and unexpected responses",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Build a Feature-Rich Web Application Using Modern APIs",
        "description": "Create a web application that utilizes multiple modern web APIs to provide a rich user experience with data persistence, location services, and dynamic graphics.",
        "checkpoints": [
          "Implement data storage using localStorage for user preferences",
          "Use the Geolocation API to provide location-based features",
          "Create dynamic visualizations using the Canvas API",
          "Handle API permissions and errors gracefully"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 90,
    "difficulty": "Intermediate",
    "tags": [
      "Web APIs",
      "Fetch API",
      "Web Storage",
      "Geolocation",
      "Canvas API",
      "Notifications"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-14",
    "moduleSlug": "web-fundamentals",
    "title": "Web Security Fundamentals",
    "order": 14,
    "objectives": [
      "Understand common web security vulnerabilities and attack vectors",
      "Implement Content Security Policy (CSP) to prevent XSS attacks",
      "Use proper input validation and sanitization techniques",
      "Protect against Cross-Site Request Forgery (CSRF) attacks"
    ],
    "intro": "Web security is a critical aspect of modern web development that protects both user data and application integrity. With increasing cyber threats and regulatory requirements like GDPR, understanding security fundamentals is essential for every web developer. Security should be considered at every stage of development, from design to deployment.\n\nIn this lesson, you'll learn about the OWASP Top 10 security risks that affect web applications, including injection attacks, broken authentication, cross-site scripting (XSS), and security misconfigurations. You'll understand how these vulnerabilities can be exploited and the potential impact on users and organizations.\n\nContent Security Policy (CSP) is a powerful defense mechanism that helps prevent cross-site scripting and other code injection attacks. You'll learn how to implement CSP headers to control which resources can be loaded and executed in your web pages.\n\nInput validation and sanitization are fundamental security practices that prevent injection attacks and ensure data integrity. You'll discover techniques for validating user input on both client and server sides, and how to properly sanitize data before processing or displaying it.\n\nCross-Site Request Forgery (CSRF) protection is essential for preventing unauthorized actions on behalf of authenticated users. You'll learn how to implement CSRF tokens and other protection mechanisms to secure your web forms and API endpoints.\n\nBy mastering web security fundamentals, you'll be able to build more secure web applications that protect user data and maintain trust, while complying with industry standards and regulations.",
    "code": {
      "example": "FIX THIS",
      "explanation": "This example demonstrates key web security fundamentals including Content Security Policy (CSP) implementation, input validation and sanitization, XSS prevention techniques, CSRF protection with tokens, and password security best practices. The code shows how to properly validate user input, sanitize data before display, implement CSRF tokens in forms, and use CSP headers to prevent code injection attacks.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Trusting client-side validation alone for security",
        "solution": "Always implement server-side validation and sanitization, as client-side checks can be bypassed by malicious users",
        "severity": "high"
      },
      {
        "mistake": "Inserting user input directly into the DOM without sanitization",
        "solution": "Use textContent instead of innerHTML for user-generated content, or properly escape HTML entities before insertion",
        "severity": "critical"
      },
      {
        "mistake": "Not implementing CSRF protection for state-changing operations",
        "solution": "Use anti-CSRF tokens in all forms and AJAX requests that modify data, and validate these tokens server-side",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Implement Security Measures for a Web Application",
        "description": "Add comprehensive security measures to a web application including input validation, XSS prevention, CSRF protection, and secure password handling.",
        "checkpoints": [
          "Implement proper input validation and sanitization for all user inputs",
          "Add Content Security Policy headers to prevent XSS attacks",
          "Implement CSRF tokens for all forms and state-changing operations",
          "Ensure passwords are properly hashed and never stored in plain text"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 90,
    "difficulty": "Intermediate",
    "tags": [
      "Web Security",
      "XSS Prevention",
      "CSRF Protection",
      "Input Validation",
      "Content Security Policy"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "web-fundamentals-lesson-15",
    "moduleSlug": "web-fundamentals",
    "title": "Deployment and Hosting",
    "order": 15,
    "objectives": [
      "Understand different hosting options and deployment strategies",
      "Prepare web applications for production deployment",
      "Implement continuous deployment workflows using Git and CI/CD",
      "Monitor and maintain deployed applications"
    ],
    "intro": "Deployment and hosting are the final steps that make your web applications accessible to users worldwide. Choosing the right hosting solution and implementing proper deployment practices are crucial for application performance, reliability, and scalability. Understanding the deployment process helps you deliver applications efficiently and maintain them effectively.\n\nIn this lesson, you'll explore various hosting options from shared hosting to cloud platforms, including static site hosting services like Netlify and Vercel, traditional web hosts, and cloud infrastructure providers like AWS, Google Cloud, and Azure. You'll learn the pros and cons of each option and how to choose the right one for your project.\n\nPreparing applications for production involves optimization, security hardening, and configuration management. You'll discover how to optimize assets, configure environments, manage secrets, and implement monitoring and logging for production applications.\n\nContinuous deployment workflows automate the process of moving code from development to production, reducing human error and speeding up delivery. You'll learn how to set up CI/CD pipelines using Git hooks, GitHub Actions, and other deployment automation tools.\n\nMonitoring and maintenance are essential for keeping applications running smoothly. You'll explore tools and techniques for monitoring application performance, tracking errors, and implementing backup and recovery strategies.\n\nBy mastering deployment and hosting, you'll be able to deliver web applications to production environments efficiently and maintain them effectively, ensuring they remain available, secure, and performant for users.",
    "code": {
      "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Deployment and Hosting Demo</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f8f9fa;\n        }\n\n        .container {\n            max-width: 1000px;\n            margin: 0 auto;\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        .deployment-section {\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 20px;\n            margin: 20px 0;\n            background: #fff;\n        }\n\n        .deployment-section.info {\n            border-color: #17a2b8;\n            background: #d1ecf1;\n        }\n\n        .deployment-section.success {\n            border-color: #28a745;\n            background: #d4edda;\n        }\n\n        .deployment-section.warning {\n            border-color: #ffc107;\n            background: #fff3cd;\n        }\n\n        .button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin: 5px;\n        }\n\n        .button:hover {\n            background: #0056b3;\n        }\n\n        .button.secondary {\n            background: #6c757d;\n        }\n\n        .button.secondary:hover {\n            background: #545b62;\n        }\n\n        .button.success {\n            background: #28a745;\n        }\n\n        .button.success:hover {\n            background: #218838;\n        }\n\n        .code-example {\n            background: #2d2d2d;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 4px;\n            font-family: 'Courier New', monospace;\n            font-size: 14px;\n            margin: 10px 0;\n            overflow-x: auto;\n        }\n\n        .deployment-step {\n            background: #f8f9fa;\n            border-left: 4px solid #007bff;\n            padding: 15px;\n            margin: 15px 0;\n        }\n\n        .checklist {\n            margin: 15px 0;\n        }\n\n        .checklist li {\n            margin: 10px 0;\n            padding-left: 30px;\n            position: relative;\n        }\n\n        .checklist li:before {\n            content: '☐';\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n\n        .checklist li.completed:before {\n            content: '✓';\n            color: #28a745;\n        }\n\n        .hosting-option {\n            border: 1px solid #dee2e6;\n            border-radius: 4px;\n            padding: 15px;\n            margin: 10px 0;\n            background: #fff;\n        }\n\n        .hosting-option h4 {\n            margin-top: 0;\n            color: #007bff;\n        }\n\n        .hidden {\n            display: none;\n        }\n\n        .progress-bar {\n            width: 100%;\n            height: 20px;\n            background: #e9ecef;\n            border-radius: 10px;\n            margin: 10px 0;\n            overflow: hidden;\n        }\n\n        .progress-fill {\n            height: 100%;\n            background: #007bff;\n            border-radius: 10px;\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n\n        .status-indicator {\n            display: inline-block;\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            margin-right: 5px;\n        }\n\n        .status-indicator.running {\n            background: #ffc107;\n            animation: pulse 1.5s infinite;\n        }\n\n        .status-indicator.success {\n            background: #28a745;\n        }\n\n        .status-indicator.error {\n            background: #dc3545;\n        }\n\n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n\n        .environment-badge {\n            display: inline-block;\n            padding: 2px 8px;\n            border-radius: 12px;\n            font-size: 12px;\n            font-weight: bold;\n            margin: 0 5px;\n        }\n\n        .env-dev {\n            background: #d1ecf1;\n            color: #0c5460;\n        }\n\n        .env-staging {\n            background: #fff3cd;\n            color: #856404;\n        }\n\n        .env-prod {\n            background: #d4edda;\n            color: #155724;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Deployment and Hosting Demo</h1>\n            <p>Examples of deployment strategies and hosting options</p>\n        </header>\n\n        <section class=\"deployment-section info\">\n            <h2>Deployment Workflow Overview</h2>\n            <div class=\"deployment-step\">\n                <h3>1. Development <span class=\"environment-badge env-dev\">DEV</span></h3>\n                <p>Local development environment where code is written and tested.</p>\n            </div>\n            \n            <div class=\"deployment-step\">\n                <h3>2. Version Control</h3>\n                <p>Code is committed to Git repository with proper branching strategy.</p>\n                <button id=\"git-demo\" class=\"button\">Simulate Git Commit</button>\n            </div>\n            \n            <div class=\"deployment-step\">\n                <h3>3. Continuous Integration <span class=\"status-indicator running\"></span></h3>\n                <p>Automated testing and building of the application.</p>\n                <div class=\"progress-bar\">\n                    <div id=\"ci-progress\" class=\"progress-fill\" style=\"width: 30%\"></div>\n                </div>\n                <div id=\"ci-status\">Running tests...</div>\n            </div>\n            \n            <div class=\"deployment-step\">\n                <h3>4. Deployment <span class=\"status-indicator\"></span></h3>\n                <p>Application is deployed to target environment.</p>\n                <button id=\"deploy-demo\" class=\"button success\">Deploy to Production</button>\n                <button id=\"rollback-demo\" class=\"button secondary\">Rollback Deployment</button>\n            </div>\n            \n            <div class=\"deployment-step\">\n                <h3>5. Monitoring <span class=\"status-indicator\"></span></h3>\n                <p>Application performance and errors are monitored.</p>\n                <button id=\"monitor-demo\" class=\"button\">Check Application Status</button>\n            </div>\n        </section>\n\n        <section class=\"deployment-section\">\n            <h2>Hosting Options</h2>\n            <div class=\"hosting-option\">\n                <h4>Static Site Hosting (Netlify, Vercel)</h4>\n                <p>Perfect for static websites and JAMstack applications with automatic deployments, CDN, and serverless functions.</p>\n                <div class=\"code-example\">\n                    # Example Netlify deployment configuration\n                    [build]\n                      publish = \"dist\"\n                      command = \"npm run build\"\n                    \n                    [[redirects]]\n                      from = \"/api/*\"\n                      to = \"/.netlify/functions/:splat\"\n                      status = 200\n                </div>\n            </div>\n            \n            <div class=\"hosting-option\">\n                <h4>Traditional Web Hosting (Shared, VPS)</h4>\n                <p>Cost-effective options for simple websites with full server control (VPS) or shared resources (Shared Hosting).</p>\n                <div class=\"code-example\">\n                    # Example Apache virtual host configuration\n                    <VirtualHost *:80>\n                        ServerName example.com\n                        DocumentRoot /var/www/html\n                        \n                        <Directory /var/www/html>\n                            AllowOverride All\n                            Require all granted\n                        </Directory>\n                    </VirtualHost>\n                </div>\n            </div>\n            \n            <div class=\"hosting-option\">\n                <h4>Cloud Platforms (AWS, Google Cloud, Azure)</h4>\n                <p>Scalable infrastructure with managed services, containers, and serverless computing options.</p>\n                <div class=\"code-example\">\n                    # Example Docker deployment\n                    FROM node:16-alpine\n                    WORKDIR /app\n                    COPY package*.json ./\n                    RUN npm ci --only=production\n                    COPY . .\n                    EXPOSE 3000\n                    CMD [\"npm\", \"start\"]\n                </div>\n            </div>\n        </section>\n\n        <section class=\"deployment-section warning\">\n            <h2>Pre-Deployment Checklist</h2>\n            <ul class=\"checklist\">\n                <li id=\"check-1\">Optimize images and assets for web delivery</li>\n                <li id=\"check-2\">Minify CSS, JavaScript, and HTML files</li>\n                <li id=\"check-3\">Set up proper error pages (404, 500)</li>\n                <li id=\"check-4\">Configure security headers and SSL/HTTPS</li>\n                <li id=\"check-5\">Test on multiple browsers and devices</li>\n                <li id=\"check-6\">Set up monitoring and error tracking</li>\n                <li id=\"check-7\">Create backup and recovery plan</li>\n                <li id=\"check-8\">Document deployment process and rollback procedures</li>\n            </ul>\n            <button id=\"checklist-demo\" class=\"button\">Complete Checklist Items</button>\n        </section>\n\n        <section class=\"deployment-section\">\n            <h2>CI/CD Pipeline Example</h2>\n            <div class=\"code-example\">\n                # Example GitHub Actions workflow\n                name: Deploy to Production\n                \n                on:}\n                  push:}\n                    branches: [ main ]}\n                \n                jobs:}\n                  test:}\n                    runs-on: ubuntu-latest}\n                    steps:}\n                      - uses: actions/checkout@v2}\n                      - name: Use Node.js}\n                        uses: actions/setup-node@v2}\n                        with:}\n                          node-version: '16'\n                      - run: npm ci\n                      - run: npm test\n                  \n                  deploy:}\n                    needs: test}\n                    runs-on: ubuntu-latest}\n                    steps:}\n                      - uses: actions/checkout@v2}\n                      - name: Deploy to Netlify}\n                        uses: netlify/actions/cli@master}\n                        with:}\n                          args: deploy --prod\n                        env:}\n                          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n                          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n            </div>\n            <button id=\"pipeline-demo\" class=\"button\">Simulate CI/CD Pipeline</button>\n            <div id=\"pipeline-output\"></div>\n        </section>\n\n        <section class=\"deployment-section success\">\n            <h2>Monitoring and Maintenance</h2>\n            <div class=\"deployment-step\">\n                <h3>Performance Monitoring</h3>\n                <p>Track page load times, API response times, and user experience metrics.</p>\n                <button id=\"perf-demo\" class=\"button\">Simulate Performance Check</button>\n            </div>\n            \n            <div class=\"deployment-step\">\n                <h3>Error Tracking</h3>\n                <p>Monitor application errors and exceptions in real-time.</p>\n                <button id=\"error-demo\" class=\"button\">Simulate Error Report</button>\n            </div>\n            \n            <div class=\"deployment-step\">\n                <h3>Backup and Recovery</h3>\n                <p>Regular backups of code, databases, and configuration files.</p>\n                <button id=\"backup-demo\" class=\"button\">Run Backup Process</button>\n            </div>\n        </section>\n    </div>\n\n    <script>\n        // Git commit simulation\n        document.getElementById('git-demo').addEventListener('click', function() {\n            console.log('Simulating git commit...');\n            \n            // Simulate git operations\n            const operations = [\n                'git add .',\n                'git commit -m \"Add new feature\"',\n                'git push origin main'\n            ];\n            \n            operations.forEach((op, index) => {\n                setTimeout(() => {\n                    console.log(op);\n                    if (index === operations.length - 1) {\n                        alert('Code committed and pushed to repository successfully!');\n                    }\n                }, index * 1000);\n            });\n        });\n\n        // CI/CD pipeline simulation\n        document.getElementById('pipeline-demo').addEventListener('click', function() {\n            const output = document.getElementById('pipeline-output');\n            output.innerHTML = '<p>Starting CI/CD pipeline...</p>';\n            \n            const ciProgress = document.getElementById('ci-progress');\n            const ciStatus = document.getElementById('ci-status');\n            \n            // Simulate CI process\n            let progress = 0;\n            const interval = setInterval(() => {\n                progress += 5;\n                ciProgress.style.width = progress + '%';\n                \n                if (progress === 25) {\n                    ciStatus.textContent = 'Installing dependencies...';\n                } else if (progress === 50) {\n                    ciStatus.textContent = 'Running tests...';\n                } else if (progress === 75) {\n                    ciStatus.textContent = 'Building application...';\n                } else if (progress === 100) {\n                    clearInterval(interval);\n                    ciStatus.textContent = 'CI process completed successfully!';\n                    output.innerHTML = `\n                        <div style=\"background: #d4edda; color: #155724; padding: 10px; border-radius: 4px;\">\n                            <strong>✅ Deployment Successful!</strong>\n                            <br>Application deployed to production environment.\n                            <br><small>Deployment time: ${(Math.random() * 5 + 2).toFixed(1)} seconds</small>\n                        </div>\n                    `;\n                }\n            }, 200);\n        });\n\n        // Deployment simulation\n        document.getElementById('deploy-demo').addEventListener('click', function() {\n            alert('Deploying to production environment...');\n            \n            // Update status indicators\n            const indicators = document.querySelectorAll('.status-indicator');\n            indicators[1].className = 'status-indicator running';\n            \n            setTimeout(() => {\n                indicators[1].className = 'status-indicator success';\n                indicators[2].className = 'status-indicator running';\n                \n                setTimeout(() => {\n                    indicators[2].className = 'status-indicator success';\n                    alert('✅ Application deployed successfully to production!');\n                }, 2000);\n            }, 1500);\n        });\n\n        // Rollback simulation\n        document.getElementById('rollback-demo').addEventListener('click', function() {\n            if (confirm('Are you sure you want to rollback to the previous version?')) {\n                alert('Rolling back to previous version...');\n                \n                // Update status indicators\n                const indicators = document.querySelectorAll('.status-indicator');\n                indicators[1].className = 'status-indicator running';\n                \n                setTimeout(() => {\n                    indicators[1].className = 'status-indicator success';\n                    alert('✅ Application rolled back successfully!');\n                }, 1500);\n            }\n        });\n\n        // Monitoring simulation\n        document.getElementById('monitor-demo').addEventListener('click', function() {\n            const status = Math.random() > 0.2 ? 'operational' : 'degraded';\n            \n            if (status === 'operational') {\n                alert('✅ Application is running normally.\n\nUptime: 99.9%\nResponse time: 124ms\nActive users: 1,243');\n            } else {\n                alert('⚠️ Application performance is degraded.\n\nResponse time: 2,450ms\nError rate: 3.2%\nActive users: 1,243\n\nCheck monitoring dashboard for details.');\n            }\n        });\n\n        // Checklist completion\n        document.getElementById('checklist-demo').addEventListener('click', function() {\n            for (let i = 1; i <= 8; i++) {\n                const item = document.getElementById('check-' + i);\n                item.className = 'completed';\n            }\n            \n            alert('✅ All pre-deployment checklist items completed!');\n        });\n\n        // Performance monitoring simulation\n        document.getElementById('perf-demo').addEventListener('click', function() {\n            const metrics = {\n                loadTime: (Math.random() * 2 + 0.5).toFixed(2),\n                firstPaint: (Math.random() * 1 + 0.2).toFixed(2),\n                speedIndex: Math.floor(Math.random() * 2000 + 1000),\n                score: Math.floor(Math.random() * 30 + 70)\n            };\n            \n            alert(`📊 Performance Report:\n\nPage Load Time: ${metrics.loadTime}s\nFirst Paint: ${metrics.firstPaint}s\nSpeed Index: ${metrics.speedIndex}ms\nPerformance Score: ${metrics.score}/100\n\n${metrics.score > 80 ? '✅ Good performance' : metrics.score > 50 ? '⚠️ Needs improvement' : '❌ Poor performance'}`);\n        });\n\n        // Error tracking simulation\n        document.getElementById('error-demo').addEventListener('click', function() {\n            const errors = [\n                'TypeError: Cannot read property of undefined',\n                'ReferenceError: variable is not defined',\n                'NetworkError: Failed to fetch',\n                'SyntaxError: Unexpected token'\n            ];\n            \n            const error = errors[Math.floor(Math.random() * errors.length)];\n            const count = Math.floor(Math.random() * 50 + 1);\n            \n            alert(`🚨 Error Report:\n\nError: ${error}\nOccurrences: ${count}\nLast seen: ${new Date().toLocaleTimeString()}\n\nCheck error tracking dashboard for details.`);\n        });\n\n        // Backup simulation\n        document.getElementById('backup-demo').addEventListener('click', function() {\n            alert('🔄 Starting backup process...');\n            \n            setTimeout(() => {\n                alert('✅ Backup completed successfully!\n\nBacked up:\n- Application code\n- Database\n- Configuration files\n- User uploads\n\nStorage location: s3://backups/myapp/2025-10-03/');\n            }, 3000);\n        });\n\n        // Environment simulation\n        console.log('%cDeployment Demo: Simulating production deployment workflow',\n            'color: #007bff; font-weight: bold;');\n        console.log('Available environments:');\n        console.log('- Development (local)');\n        console.log('- Staging (testing)');\n        console.log('- Production (live)');\n        \n        // Security note\n        console.warn('Security Reminder: Never commit sensitive information like passwords or API keys to version control.');\n    </script>\n</body>\n</html>",
      "explanation": "This example demonstrates key deployment and hosting concepts including deployment workflow visualization, hosting options with configuration examples, pre-deployment checklists, CI/CD pipeline examples, and monitoring simulations. The code shows how to implement deployment workflows, configure different hosting environments, and set up monitoring and maintenance processes.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Deploying untested code directly to production",
        "solution": "Always test code in staging environments that mirror production, and implement CI/CD pipelines with automated testing",
        "severity": "critical"
      },
      {
        "mistake": "Not having a rollback plan for failed deployments",
        "solution": "Implement blue-green deployments or canary releases, and always maintain backups of previous versions with clear rollback procedures",
        "severity": "high"
      },
      {
        "mistake": "Storing sensitive information in version control",
        "solution": "Use environment variables and secret management tools, and add sensitive files to .gitignore to prevent accidental commits",
        "severity": "critical"
      }
    ],
    "exercises": [
      {
        "title": "Deploy a Web Application to Production",
        "description": "Deploy a complete web application to a production hosting environment with proper configuration, monitoring, and backup procedures.",
        "checkpoints": [
          "Choose an appropriate hosting solution for your application",
          "Set up CI/CD pipeline with automated testing and deployment",
          "Configure production environment with security best practices",
          "Implement monitoring and error tracking for the deployed application"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 90,
    "difficulty": "Intermediate",
    "tags": [
      "Deployment",
      "Hosting",
      "CI/CD",
      "DevOps",
      "Monitoring"
    ],
    "lastUpdated": "2025-10-03T10:00:00.000Z",
    "version": "1.0.0"
  }
]
