[
  {
    "id": "1",
    "moduleSlug": "tailwind-advanced",
    "title": "Introduction to Tailwind CSS",
    "order": 1,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Basics.\n\nLearn the fundamentals of Tailwind CSS and how it differs from traditional CSS frameworks.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Traditional CSS -->\n<button class=\"btn btn-blue\">Click me</button>\n\n<style>\n  .btn {\n    padding: 0.5rem 1rem;\n    border-radius: 0.25rem;\n    font-weight: 500;\n  }\n  .btn-blue {\n    background-color: #3b82f6;\n    color: white;\n  }\n</style>\n\n<!-- Tailwind CSS -->\n<button class=\"px-4 py-2 bg-blue-500 text-white font-medium rounded\">Click me</button>",
      "explanation": "This example produces: Button with blue background and white text, padding, and rounded corners\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Introduction to Tailwind CSS",
        "description": "Apply the concepts from this lesson on Basics",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Beginner",
    "tags": [
      "Basics",
      "tailwind"
    ],
    "legacy": {
      "originalId": 1,
      "originalTopic": "Basics",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "2",
    "moduleSlug": "tailwind-advanced",
    "title": "Utility-First Fundamentals",
    "order": 2,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Basics.\n\nLearn how to build designs using Tailwind's utility classes instead of writing custom CSS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Building a card component with utility classes -->\n<div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n  <img class=\"w-full\" src=\"/img/card-top.jpg\" alt=\"Sunset in the mountains\">\n  <div class=\"px-6 py-4\">\n    <div class=\"font-bold text-xl mb-2\">The Coldest Sunset</div>\n    <p class=\"text-gray-700 text-base\">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n    </p>\n  </div>\n  <div class=\"px-6 pt-4 pb-2\">\n    <span class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#photography</span>\n  </div>\n</div>",
      "explanation": "This example produces: Card component with image, title, description, and tag\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Utility-First Fundamentals",
        "description": "Apply the concepts from this lesson on Basics",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Beginner",
    "tags": [
      "Basics",
      "tailwind"
    ],
    "legacy": {
      "originalId": 2,
      "originalTopic": "Basics",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "3",
    "moduleSlug": "tailwind-advanced",
    "title": "Flexbox and Grid",
    "order": 3,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Layout.\n\nLearn how to create layouts using Tailwind's flexbox and grid utilities.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Flexbox example -->\n<div class=\"flex items-center justify-between\">\n  <div>Left content</div>\n  <div>Center content</div>\n  <div>Right content</div>\n</div>\n\n<!-- Grid example -->\n<div class=\"grid grid-cols-3 gap-4\">\n  <div class=\"bg-gray-200 p-4\">Column 1</div>\n  <div class=\"bg-gray-300 p-4\">Column 2</div>\n  <div class=\"bg-gray-400 p-4\">Column 3</div>\n</div>",
      "explanation": "This example produces: Flexbox layout with evenly spaced items and grid layout with three columns\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Flexbox and Grid",
        "description": "Apply the concepts from this lesson on Layout",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Layout",
      "tailwind"
    ],
    "legacy": {
      "originalId": 3,
      "originalTopic": "Layout",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "4",
    "moduleSlug": "tailwind-advanced",
    "title": "Responsive Design",
    "order": 4,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Layout.\n\nLearn how to make your designs responsive using Tailwind's responsive prefixes.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Responsive design with breakpoints -->\n<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n  <div class=\"bg-blue-500 p-4 text-white\">Card 1</div>\n  <div class=\"bg-green-500 p-4 text-white\">Card 2</div>\n  <div class=\"bg-red-500 p-4 text-white\">Card 3</div>\n</div>\n\n<!-- Responsive text sizing -->\n<h1 class=\"text-lg sm:text-xl md:text-2xl lg:text-3xl xl:text-4xl\">\n  Responsive Heading\n</h1>",
      "explanation": "This example produces: Grid that changes from 1 column on mobile to 2 on medium screens to 3 on large screens, and heading that scales with screen size\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Responsive Design",
        "description": "Apply the concepts from this lesson on Layout",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Layout",
      "tailwind"
    ],
    "legacy": {
      "originalId": 4,
      "originalTopic": "Layout",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "5",
    "moduleSlug": "tailwind-advanced",
    "title": "Customizing Tailwind",
    "order": 5,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Customization.\n\nLearn how to customize Tailwind's default theme and add your own utility classes.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// tailwind.config.js\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        'brand-blue': '#1971c2',\n        'brand-green': '#2b8a3e',\n      },\n      spacing: {\n        '128': '32rem',\n      }\n    }\n  },\n  plugins: [\n    function({ addUtilities }) {\n      const newUtilities = {\n        '.text-shadow': {\n          textShadow: '1px 1px 2px rgba(0, 0, 0, 0.5)'\n        }\n      }\n      addUtilities(newUtilities)\n    }\n  ]\n}",
      "explanation": "This example produces: Custom color palette and spacing scale added to Tailwind configuration\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Customizing Tailwind",
        "description": "Apply the concepts from this lesson on Customization",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Advanced",
    "tags": [
      "Customization",
      "tailwind"
    ],
    "legacy": {
      "originalId": 5,
      "originalTopic": "Customization",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "6",
    "moduleSlug": "tailwind-advanced",
    "title": "Building Reusable Components",
    "order": 6,
    "objectives": [
      "Master component creation and usage",
      "Implement practical solutions"
    ],
    "intro": "Welcome to this comprehensive lesson on Components.\n\nLearn how to create reusable components with Tailwind CSS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Button component variations -->\n<button class=\"btn btn-primary\">Primary</button>\n<button class=\"btn btn-secondary\">Secondary</button>\n\n@layer components {\n  .btn {\n    @apply px-4 py-2 rounded font-medium focus:outline-none focus:ring-2;\n  }\n  .btn-primary {\n    @apply bg-blue-500 text-white hover:bg-blue-600 focus:ring-blue-300;\n  }\n  .btn-secondary {\n    @apply bg-gray-500 text-white hover:bg-gray-600 focus:ring-gray-300;\n  }\n}",
      "explanation": "This example produces: Reusable button components with consistent styling and hover states\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not using keys in lists",
        "solution": "Always provide unique keys for list items",
        "severity": "high"
      },
      {
        "mistake": "Mutating props directly",
        "solution": "Props are read-only, create new objects for updates",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Building Reusable Components",
        "description": "Apply the concepts from this lesson on Components",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Components",
      "tailwind"
    ],
    "legacy": {
      "originalId": 6,
      "originalTopic": "Components",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "7",
    "moduleSlug": "tailwind-advanced",
    "title": "Styling Forms",
    "order": 7,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Forms.\n\nLearn how to style forms and form controls with Tailwind.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<form class=\"max-w-md mx-auto\">\n  <div class=\"mb-4\">\n    <label class=\"block text-gray-700 text-sm font-bold mb-2\">\n      Email\n    </label>\n    <input class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" type=\"email\">\n  </div>\n  <button class=\"w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600\">\n    Submit\n  </button>\n</form>",
      "explanation": "This example produces: Styled form with input field and submit button\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Styling Forms",
        "description": "Apply the concepts from this lesson on Forms",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Forms",
      "tailwind"
    ],
    "legacy": {
      "originalId": 7,
      "originalTopic": "Forms",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "8",
    "moduleSlug": "tailwind-advanced",
    "title": "Animations and Transitions",
    "order": 8,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Animation.\n\nLearn how to add animations and transitions using Tailwind.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Hover animations -->\n<div class=\"transform transition duration-300 hover:scale-105\">\n  Hover to scale\n</div>\n\n<!-- Loading spinner -->\n<div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n\n<!-- Custom animation -->\n@keyframes bounce {\n  0%, 100% { transform: translateY(-25%); }\n  50% { transform: none; }\n}\n\n.animate-bounce { animation: bounce 1s infinite; }",
      "explanation": "This example produces: Elements with hover effects, loading spinner, and bounce animation\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Animations and Transitions",
        "description": "Apply the concepts from this lesson on Animation",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Animation",
      "tailwind"
    ],
    "legacy": {
      "originalId": 8,
      "originalTopic": "Animation",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "9",
    "moduleSlug": "tailwind-advanced",
    "title": "Dark Mode Implementation",
    "order": 9,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Dark Mode.\n\nLearn how to implement dark mode with Tailwind CSS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Dark mode configuration -->\nmodule.exports = {\n  darkMode: 'class',\n  // ...\n}\n\n<!-- Dark mode styles -->\n<div class=\"bg-white dark:bg-gray-800 text-gray-900 dark:text-white\">\n  <h1 class=\"text-gray-900 dark:text-white\">Title</h1>\n  <p class=\"text-gray-600 dark:text-gray-300\">Content</p>\n</div>\n\n<!-- Toggle dark mode -->\n<button onclick=\"document.documentElement.classList.toggle('dark')\">\n  Toggle Dark Mode\n</button>",
      "explanation": "This example produces: Component with light and dark mode styling variations\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Dark Mode Implementation",
        "description": "Apply the concepts from this lesson on Dark Mode",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Dark Mode",
      "tailwind"
    ],
    "legacy": {
      "originalId": 9,
      "originalTopic": "Dark Mode",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "10",
    "moduleSlug": "tailwind-advanced",
    "title": "Performance Optimization",
    "order": 10,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Optimization.\n\nLearn how to optimize Tailwind CSS for production.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Production optimization\nmodule.exports = {\n  content: ['./src/**/*.{html,js,jsx,ts,tsx}'],\n  theme: { extend: {} },\n  plugins: [],\n}\n\n// PurgeCSS configuration\nconst purgecss = require('@fullhuman/postcss-purgecss')\n\nmodule.exports = {\n  plugins: [\n    require('tailwindcss'),\n    require('autoprefixer'),\n    ...(process.env.NODE_ENV === 'production' ? [purgecss] : [])\n  ]\n}",
      "explanation": "This example produces: Optimized build configuration for smaller CSS bundles in production\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Performance Optimization",
        "description": "Apply the concepts from this lesson on Optimization",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Advanced",
    "tags": [
      "Optimization",
      "tailwind"
    ],
    "legacy": {
      "originalId": 10,
      "originalTopic": "Optimization",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "11",
    "moduleSlug": "tailwind-advanced",
    "title": "Using Tailwind Plugins",
    "order": 11,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Plugins.\n\nLearn how to extend Tailwind with plugins.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Install and configure plugins\nnpm install @tailwindcss/forms @tailwindcss/typography\n\n// tailwind.config.js\nmodule.exports = {\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n}\n\n<!-- Typography plugin usage -->\n<article class=\"prose lg:prose-xl\">\n  <h1>Article Title</h1>\n  <p>Article content with beautiful typography.</p>\n</article>",
      "explanation": "This example produces: Enhanced forms and typography styling with official Tailwind plugins\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Using Tailwind Plugins",
        "description": "Apply the concepts from this lesson on Plugins",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Plugins",
      "tailwind"
    ],
    "legacy": {
      "originalId": 11,
      "originalTopic": "Plugins",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "12",
    "moduleSlug": "tailwind-advanced",
    "title": "Framework Integration",
    "order": 12,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Integration.\n\nLearn how to integrate Tailwind with popular frameworks.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// React integration\nimport './tailwind.css'\n\nfunction Button({ children, variant = 'primary' }) {\n  const baseClasses = 'px-4 py-2 rounded font-medium'\n  const variants = {\n    primary: 'bg-blue-500 text-white hover:bg-blue-600',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300'\n  }\n  \n  return (\n    <button className={`${baseClasses} ${variants[variant]}`}>\n      {children}\n    </button>\n  )\n}\n\n// Vue integration\n<template>\n  <button :class=\"buttonClasses\">\n    <slot />\n  </button>\n</template>\n\n<script>\nexport default {\n  computed: {\n    buttonClasses() {\n      return 'px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600'\n    }\n  }\n}\n</script>",
      "explanation": "This example produces: Tailwind CSS integrated with React and Vue components for reusable styling\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "css"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Framework Integration",
        "description": "Apply the concepts from this lesson on Integration",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Integration",
      "tailwind"
    ],
    "legacy": {
      "originalId": 12,
      "originalTopic": "Integration",
      "migrated": "2025-10-01T06:41:13.487Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "13",
    "moduleSlug": "tailwind-advanced",
    "title": "Advanced Tailwind CSS Patterns and Best Practices",
    "order": 13,
    "objectives": [
      "Master advanced Tailwind CSS patterns and techniques",
      "Implement scalable design systems with Tailwind",
      "Optimize Tailwind CSS for production applications"
    ],
    "intro": "Welcome to this comprehensive lesson on Advanced Tailwind CSS Patterns and Best Practices.\n\nLearn advanced techniques for building scalable, maintainable design systems with Tailwind CSS. This lesson covers complex patterns, performance optimization, and production-ready strategies.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "<!-- Advanced Component Patterns -->\n<!-- Configurable Button Component with Variants -->\n<div class=\"space-y-4\">\n  <!-- Primary Button -->\n  <button class=\"group relative inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md text-white bg-blue-600 border border-transparent hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200\">\n    <svg class=\"w-4 h-4 mr-2 transition-transform duration-200 group-hover:scale-110\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\n    </svg>\n    Add Item\n  </button>\n\n  <!-- Outline Button with Loading State -->\n  <button class=\"group relative inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md text-blue-700 bg-transparent border border-blue-300 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 transition-all duration-200\">\n    <div class=\"hidden group-disabled:inline-flex absolute inset-0 items-center justify-center\">\n      <svg class=\"animate-spin h-4 w-4 text-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n        <path class=\"opacity-75\" fill=\"currentColor\" d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n      </svg>\n    </div>\n    <span class=\"group-disabled:invisible\">Save Changes</span>\n  </button>\n</div>\n\n<!-- Advanced Layout Patterns -->\n<!-- Sticky Header with Backdrop Blur -->\n<header class=\"sticky top-0 z-50 w-full border-b bg-white/80 backdrop-blur-md supports-[backdrop-filter]:bg-white/60\">\n  <div class=\"container flex h-16 items-center space-x-4 sm:justify-between sm:space-x-0\">\n    <div class=\"flex gap-6 md:gap-10\">\n      <a class=\"flex items-center space-x-2\" href=\"/\">\n        <span class=\"inline-block font-bold\">Logo</span>\n      </a>\n      <nav class=\"hidden gap-6 md:flex\">\n        <a class=\"flex items-center text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\" href=\"/docs\">Documentation</a>\n      </nav>\n    </div>\n  </div>\n</header>\n\n<!-- Complex Grid Layout with Auto-fit -->\n<div class=\"grid gap-6 auto-fit-minmax-300 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n  <div class=\"group overflow-hidden rounded-lg border bg-card text-card-foreground shadow transition-all hover:shadow-lg\">\n    <div class=\"aspect-video overflow-hidden bg-muted\">\n      <img class=\"h-full w-full object-cover transition-transform duration-200 group-hover:scale-105\" src=\"/placeholder.jpg\" alt=\"Card image\" />\n    </div>\n    <div class=\"p-6\">\n      <h3 class=\"font-semibold leading-none tracking-tight\">Card Title</h3>\n      <p class=\"text-sm text-muted-foreground mt-2\">Card description goes here.</p>\n    </div>\n  </div>\n</div>\n\n<!-- Advanced Form Patterns with Validation States -->\n<form class=\"space-y-6\">\n  <div class=\"space-y-2\">\n    <label class=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\" for=\"email\">\n      Email\n    </label>\n    <input \n      class=\"peer flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 invalid:border-red-500 invalid:ring-red-500\"\n      id=\"email\"\n      type=\"email\"\n      placeholder=\"Enter your email\"\n      required\n    />\n    <p class=\"text-sm text-red-600 hidden peer-invalid:block\">Please enter a valid email address.</p>\n  </div>\n</form>\n\n<!-- Advanced Animation Patterns -->\n<div class=\"relative overflow-hidden\">\n  <!-- Staggered Animation with CSS Variables -->\n  <div class=\"grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3\">\n    <div class=\"animate-fade-in-up [animation-delay:0ms] opacity-0 [animation-fill-mode:forwards]\">\n      <div class=\"h-32 bg-gradient-to-br from-purple-400 to-blue-600 rounded-lg\"></div>\n    </div>\n    <div class=\"animate-fade-in-up [animation-delay:100ms] opacity-0 [animation-fill-mode:forwards]\">\n      <div class=\"h-32 bg-gradient-to-br from-pink-400 to-red-600 rounded-lg\"></div>\n    </div>\n    <div class=\"animate-fade-in-up [animation-delay:200ms] opacity-0 [animation-fill-mode:forwards]\">\n      <div class=\"h-32 bg-gradient-to-br from-green-400 to-blue-600 rounded-lg\"></div>\n    </div>\n  </div>\n</div>\n\n<!-- CSS Additions for Custom Animations -->\n<style>\n@keyframes fade-in-up {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in-up {\n  animation: fade-in-up 0.6s ease-out;\n}\n\n.auto-fit-minmax-300 {\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n}\n</style>\n\n<!-- Tailwind Config for Custom Utilities -->\n/*\nmodule.exports = {\n  theme: {\n    extend: {\n      animation: {\n        'fade-in-up': 'fade-in-up 0.6s ease-out',\n      },\n      keyframes: {\n        'fade-in-up': {\n          'from': {\n            opacity: '0',\n            transform: 'translateY(20px)',\n          },\n          'to': {\n            opacity: '1',\n            transform: 'translateY(0)',\n          },\n        }\n      }\n    }\n  }\n}\n*/",
      "explanation": "This example demonstrates advanced Tailwind CSS patterns including configurable components with variants, complex layouts with backdrop blur effects, advanced form validation states, staggered animations, and custom utility integration. These patterns are essential for building production-ready applications.\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "html"
    },
    "pitfalls": [
      {
        "mistake": "Over-engineering components with too many utility classes",
        "solution": "Extract commonly used patterns into reusable components or use @apply directive for complex combinations",
        "severity": "medium"
      },
      {
        "mistake": "Not optimizing for production bundle size",
        "solution": "Use PurgeCSS properly and configure content paths to remove unused styles",
        "severity": "high"
      },
      {
        "mistake": "Inconsistent design tokens across the application",
        "solution": "Define consistent spacing, colors, and typography scales in Tailwind config",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Advanced Tailwind CSS Patterns and Best Practices",
        "description": "Implement a comprehensive design system using advanced Tailwind CSS techniques",
        "checkpoints": [
          "Create configurable component variants with Tailwind utilities",
          "Implement complex layouts with responsive design patterns",
          "Build advanced form components with validation states",
          "Create custom animations and integrate with Tailwind config",
          "Optimize for production and implement design system consistency"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 50,
    "difficulty": "Advanced",
    "tags": [
      "Advanced Patterns",
      "Design Systems",
      "Performance",
      "tailwind"
    ],
    "lastUpdated": "2025-10-01T06:41:13.487Z",
    "version": "1.0.0"
  },
  {
    "id": "14",
    "moduleSlug": "tailwind-advanced",
    "title": "Advanced Customization Techniques",
    "order": 14,
    "objectives": [
      "Master advanced theme customization with complex design tokens",
      "Implement custom utility classes and variants",
      "Create sophisticated plugin systems for Tailwind extensions",
      "Optimize Tailwind configuration for large-scale applications"
    ],
    "intro": "Advanced customization techniques in Tailwind CSS enable developers to create highly tailored design systems that meet specific project requirements while maintaining the framework's utility-first approach. This comprehensive lesson explores sophisticated customization patterns that go beyond basic theme extensions to create powerful, maintainable design systems.\n\nYou'll learn to implement complex theme configurations using nested design tokens, create custom utility classes that extend Tailwind's capabilities, and develop plugin systems that encapsulate reusable functionality. We'll explore advanced configuration patterns that optimize Tailwind for large-scale applications with complex design requirements.\n\nThe lesson covers practical implementation strategies for managing design consistency across large teams, creating themeable components, and implementing sophisticated responsive design patterns. You'll discover how to balance customization with maintainability to create design systems that scale effectively.\n\nBy mastering these advanced customization techniques, you'll be able to create Tailwind configurations that perfectly match your design requirements while maintaining the framework's performance and developer experience benefits.",
    "code": {
      "example": "// Advanced Tailwind Configuration with Complex Themes\n\n// tailwind.config.js\nconst plugin = require('tailwindcss/plugin')\n\nmodule.exports = {\n  content: [\n    './src/**/*.{js,jsx,ts,tsx}',\n    './public/index.html'\n  ],\n  theme: {\n    extend: {\n      // Complex color palette with semantic naming\n      colors: {\n        brand: {\n          primary: {\n            50: '#eff6ff',\n            100: '#dbeafe',\n            200: '#bfdbfe',\n            300: '#93c5fd',\n            400: '#60a5fa',\n            500: '#3b82f6',\n            600: '#2563eb',\n            700: '#1d4ed8',\n            800: '#1e40af',\n            900: '#1e3a8a',\n          },\n          secondary: {\n            50: '#f0f9ff',\n            100: '#e0f2fe',\n            200: '#bae6fd',\n            300: '#7dd3fc',\n            400: '#38bdf8',\n            500: '#0ea5e9',\n            600: '#0284c7',\n            700: '#0369a1',\n            800: '#075985',\n            900: '#0c4a6e',\n          }\n        },\n        status: {\n          success: '#10b981',\n          warning: '#f59e0b',\n          error: '#ef4444',\n          info: '#3b82f6'\n        }\n      },\n      \n      // Advanced typography scale\n      fontSize: {\n        'xs': ['0.75rem', { lineHeight: '1rem' }],\n        'sm': ['0.875rem', { lineHeight: '1.25rem' }],\n        'base': ['1rem', { lineHeight: '1.5rem' }],\n        'lg': ['1.125rem', { lineHeight: '1.75rem' }],\n        'xl': ['1.25rem', { lineHeight: '1.75rem' }],\n        '2xl': ['1.5rem', { lineHeight: '2rem' }],\n        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],\n        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],\n        '5xl': ['3rem', { lineHeight: '1' }],\n        '6xl': ['3.75rem', { lineHeight: '1' }],\n        '7xl': ['4.5rem', { lineHeight: '1' }],\n        '8xl': ['6rem', { lineHeight: '1' }],\n        '9xl': ['8rem', { lineHeight: '1' }],\n      },\n      \n      // Custom spacing scale\n      spacing: {\n        '72': '18rem',\n        '80': '20rem',\n        '88': '22rem',\n        '96': '24rem',\n        '104': '26rem',\n        '112': '28rem',\n        '120': '30rem',\n        '128': '32rem',\n        '136': '34rem',\n        '144': '36rem',\n      },\n      \n      // Custom shadows\n      boxShadow: {\n        'xs': '0 0 0 1px rgba(0, 0, 0, 0.05)',\n        'inner-lg': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n        'inner-xl': 'inset 0 4px 6px 0 rgba(0, 0, 0, 0.06)',\n        'inner-2xl': 'inset 0 10px 15px 0 rgba(0, 0, 0, 0.06)',\n      },\n      \n      // Custom animation utilities\n      keyframes: {\n        'fade-in': {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        'slide-in': {\n          '0%': { transform: 'translateX(-100%)' },\n          '100%': { transform: 'translateX(0)' },\n        },\n        'pulse-slow': {\n          '0%, 100%': { opacity: '1' },\n          '50%': { opacity: '0.5' },\n        }\n      },\n      animation: {\n        'fade-in': 'fade-in 0.3s ease-out',\n        'slide-in': 'slide-in 0.3s ease-out',\n        'pulse-slow': 'pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n      }\n    }\n  },\n  \n  // Custom variants\n  variants: {\n    extend: {\n      opacity: ['disabled'],\n      backgroundColor: ['active'],\n      textColor: ['visited'],\n      display: ['group-hover'],\n    }\n  },\n  \n  // Advanced plugins\n  plugins: [\n    // Custom utility plugin\n    plugin(function({ addUtilities, theme }) {\n      const newUtilities = {\n        '.text-shadow': {\n          textShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n        },\n        '.text-shadow-md': {\n          textShadow: '0 4px 8px rgba(0, 0, 0, 0.12), 0 2px 4px rgba(0, 0, 0, 0.08)',\n        },\n        '.text-shadow-lg': {\n          textShadow: '0 15px 30px rgba(0, 0, 0, 0.11), 0 5px 15px rgba(0, 0, 0, 0.08)',\n        },\n        '.border-gradient': {\n          border: 'double 2px transparent',\n          borderRadius: '8px',\n          backgroundImage: 'linear-gradient(white, white), linear-gradient(to right, #3b82f6, #0ea5e9)',\n          backgroundOrigin: 'border-box',\n          backgroundClip: 'padding-box, border-box',\n        }\n      }\n      addUtilities(newUtilities)\n    }),\n    \n    // Component plugin\n    plugin(function({ addComponents, theme }) {\n      const buttons = {\n        '.btn': {\n          padding: '.5rem 1rem',\n          borderRadius: '.25rem',\n          fontWeight: '600',\n          transition: 'all 0.2s ease',\n          '&:focus': {\n            outline: '2px solid transparent',\n            outlineOffset: '2px',\n          }\n        },\n        '.btn-primary': {\n          backgroundColor: theme('colors.brand.primary.500'),\n          color: '#fff',\n          '&:hover': {\n            backgroundColor: theme('colors.brand.primary.600'),\n          },\n          '&:focus': {\n            boxShadow: '0 0 0 3px rgba(59, 130, 246, 0.5)',\n          }\n        },\n        '.btn-secondary': {\n          backgroundColor: theme('colors.brand.secondary.500'),\n          color: '#fff',\n          '&:hover': {\n            backgroundColor: theme('colors.brand.secondary.600'),\n          },\n          '&:focus': {\n            boxShadow: '0 0 0 3px rgba(14, 165, 233, 0.5)',\n          }\n        }\n      }\n      addComponents(buttons)\n    }),\n    \n    // Custom variant plugin\n    plugin(function({ addVariant }) {\n      addVariant('children', '& > *')\n      addVariant('scrollbar', '&::-webkit-scrollbar')\n      addVariant('scrollbar-thumb', '&::-webkit-scrollbar-thumb')\n      addVariant('scrollbar-track', '&::-webkit-scrollbar-track')\n    })\n  ]\n}\n\n// Usage examples:\n// <div class=\"text-shadow-lg text-4xl font-bold\">Stylish Heading</div>\n// <button class=\"btn btn-primary\">Primary Button</button>\n// <div class=\"children:p-4 children:border children:rounded\">\n//   <p>Child 1</p>\n//   <p>Child 2</p>\n// </div>",
      "explanation": "This example demonstrates advanced Tailwind customization techniques including complex theme configuration with semantic color palettes, custom typography scales, extended spacing systems, and custom animation utilities. The configuration also shows how to create custom plugins for utilities, components, and variants.\n\nKey features include:\n1. Nested color system with semantic naming\n2. Extended typography scale with line heights\n3. Custom spacing and shadow utilities\n4. Custom animation keyframes and utilities\n5. Plugin system for custom utilities, components, and variants\n\nThis configuration allows for highly customized design systems while maintaining Tailwind's performance benefits.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Over-customizing Tailwind configuration leading to bloated CSS output",
        "solution": "Use content purging and only extend what's actually needed",
        "severity": "high"
      },
      {
        "mistake": "Creating inconsistent naming conventions in theme extensions",
        "solution": "Establish clear naming conventions and document them",
        "severity": "medium"
      },
      {
        "mistake": "Writing overly complex plugins that are hard to maintain",
        "solution": "Keep plugins focused and well-documented, break complex functionality into multiple plugins",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Build an Advanced Tailwind Configuration",
        "description": "Create a comprehensive Tailwind configuration for a design system with custom colors, typography, spacing, and plugins",
        "checkpoints": [
          "Implement a semantic color system with proper contrast ratios",
          "Create custom typography scales with line heights",
          "Extend spacing and shadow utilities",
          "Build custom plugins for utilities and components",
          "Optimize configuration for production builds"
        ]
      }
    ],
    "next": [
      "tailwind-lesson-15-design-systems"
    ],
    "estimatedMinutes": 50,
    "difficulty": "Advanced",
    "tags": [
      "Customization",
      "Configuration",
      "Plugins",
      "Design Systems",
      "Tailwind CSS"
    ],
    "lastUpdated": "2025-10-03T10:00:00Z",
    "version": "1.0.0"
  },
  {
    "id": "15",
    "moduleSlug": "tailwind-advanced",
    "title": "Design System Implementation",
    "order": 15,
    "objectives": [
      "Implement comprehensive design systems with Tailwind CSS",
      "Create consistent component libraries with design tokens",
      "Establish design system governance and documentation",
      "Integrate design systems with development workflows"
    ],
    "intro": "Design system implementation with Tailwind CSS provides a structured approach to creating consistent, scalable user interfaces across large applications and teams. This comprehensive lesson explores the principles and practices of building robust design systems that bridge the gap between design and development.\n\nYou'll learn to establish design tokens that serve as the foundation for consistent visual language, create component libraries that enforce design standards, and implement governance structures that ensure system integrity over time. We'll explore practical strategies for integrating design systems into development workflows and maintaining them as products evolve.\n\nThe lesson covers advanced techniques for managing design system scalability, creating themeable components, and establishing processes for system evolution. You'll discover how to balance system constraints with creative flexibility to foster innovation while maintaining consistency.\n\nBy mastering design system implementation, you'll be able to create development environments where design consistency is automatic, development efficiency is maximized, and product quality is consistently high across all team outputs.",
    "code": {
      "example": "// Design System Implementation with Tailwind CSS\n\n// Design tokens configuration\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    extend: {\n      // Design tokens for spacing\n      spacing: {\n        'xxs': '0.25rem',    // 4px\n        'xs': '0.5rem',      // 8px\n        'sm': '0.75rem',     // 12px\n        'md': '1rem',        // 16px\n        'lg': '1.5rem',      // 24px\n        'xl': '2rem',        // 32px\n        'xxl': '3rem',       // 48px\n        'xxxl': '4rem',      // 64px\n      },\n      \n      // Design tokens for typography\n      fontFamily: {\n        'display': ['Inter', 'system-ui', '-apple-system', 'sans-serif'],\n        'body': ['Inter', 'system-ui', '-apple-system', 'sans-serif'],\n        'mono': ['SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', 'monospace'],\n      },\n      \n      // Design tokens for colors with semantic naming\n      colors: {\n        // Brand colors\n        primary: {\n          50: '#eff6ff',\n          100: '#dbeafe',\n          200: '#bfdbfe',\n          300: '#93c5fd',\n          400: '#60a5fa',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8',\n          800: '#1e40af',\n          900: '#1e3a8a',\n        },\n        secondary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n        },\n        \n        // Semantic colors\n        background: {\n          DEFAULT: '#ffffff',\n          surface: '#f8fafc',\n          overlay: '#ffffff',\n        },\n        surface: {\n          DEFAULT: '#f1f5f9',\n          elevated: '#ffffff',\n        },\n        text: {\n          primary: '#0f172a',\n          secondary: '#64748b',\n          tertiary: '#94a3b8',\n          disabled: '#cbd5e1',\n        },\n        border: {\n          DEFAULT: '#e2e8f0',\n          strong: '#cbd5e1',\n          subtle: '#f1f5f9',\n        },\n        \n        // Status colors\n        success: {\n          DEFAULT: '#10b981',\n          light: '#d1fae5',\n          dark: '#047857',\n        },\n        warning: {\n          DEFAULT: '#f59e0b',\n          light: '#fef3c7',\n          dark: '#b45309',\n        },\n        error: {\n          DEFAULT: '#ef4444',\n          light: '#fee2e2',\n          dark: '#b91c1c',\n        },\n        info: {\n          DEFAULT: '#3b82f6',\n          light: '#dbeafe',\n          dark: '#1d4ed8',\n        }\n      },\n      \n      // Design tokens for shadows\n      boxShadow: {\n        'surface': '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n        'elevated': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n        'overlay': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n        'focus': '0 0 0 3px rgba(59, 130, 246, 0.5)',\n      },\n      \n      // Design tokens for border radius\n      borderRadius: {\n        'sm': '0.125rem',\n        'DEFAULT': '0.25rem',\n        'md': '0.375rem',\n        'lg': '0.5rem',\n        'xl': '0.75rem',\n        'xxl': '1rem',\n        'xxxl': '1.5rem',\n        'full': '9999px',\n      },\n      \n      // Design tokens for transitions\n      transitionTimingFunction: {\n        'default': 'cubic-bezier(0.4, 0, 0.2, 1)',\n        'ease-in': 'cubic-bezier(0.4, 0, 1, 1)',\n        'ease-out': 'cubic-bezier(0, 0, 0.2, 1)',\n        'ease-in-out': 'cubic-bezier(0.4, 0, 0.6, 1)',\n      },\n      transitionDuration: {\n        'fast': '150ms',\n        'normal': '300ms',\n        'slow': '500ms',\n      }\n    }\n  },\n  \n  // Component library implementation\n  plugins: [\n    // Design system components plugin\n    plugin(function({ addComponents, theme }) {\n      const designSystem = {\n        // Card component\n        '.card': {\n          backgroundColor: theme('colors.surface.elevated'),\n          borderRadius: theme('borderRadius.lg'),\n          boxShadow: theme('boxShadow.surface'),\n          overflow: 'hidden',\n          transition: 'box-shadow 0.2s ease',\n          \n          '&:hover': {\n            boxShadow: theme('boxShadow.elevated'),\n          },\n          \n          '.card-header': {\n            padding: `${theme('spacing.md')} ${theme('spacing.lg')}`,\n            borderBottom: `1px solid ${theme('colors.border.DEFAULT')}`,\n          },\n          \n          '.card-body': {\n            padding: theme('spacing.lg'),\n          },\n          \n          '.card-footer': {\n            padding: `${theme('spacing.md')} ${theme('spacing.lg')}`,\n            borderTop: `1px solid ${theme('colors.border.DEFAULT')}`,\n          }\n        },\n        \n        // Alert component\n        '.alert': {\n          padding: theme('spacing.md'),\n          borderRadius: theme('borderRadius.md'),\n          border: `1px solid transparent`,\n          \n          '&.alert-success': {\n            backgroundColor: theme('colors.success.light'),\n            borderColor: theme('colors.success.DEFAULT'),\n            color: theme('colors.success.dark'),\n          },\n          \n          '&.alert-warning': {\n            backgroundColor: theme('colors.warning.light'),\n            borderColor: theme('colors.warning.DEFAULT'),\n            color: theme('colors.warning.dark'),\n          },\n          \n          '&.alert-error': {\n            backgroundColor: theme('colors.error.light'),\n            borderColor: theme('colors.error.DEFAULT'),\n            color: theme('colors.error.dark'),\n          },\n          \n          '&.alert-info': {\n            backgroundColor: theme('colors.info.light'),\n            borderColor: theme('colors.info.DEFAULT'),\n            color: theme('colors.info.dark'),\n          }\n        },\n        \n        // Badge component\n        '.badge': {\n          display: 'inline-flex',\n          alignItems: 'center',\n          padding: `0 ${theme('spacing.xs')}`,\n          fontSize: theme('fontSize.xs'),\n          fontWeight: theme('fontWeight.medium'),\n          borderRadius: theme('borderRadius.full'),\n          lineHeight: '1.5',\n          \n          '&.badge-primary': {\n            backgroundColor: theme('colors.primary.100'),\n            color: theme('colors.primary.800'),\n          },\n          \n          '&.badge-secondary': {\n            backgroundColor: theme('colors.secondary.100'),\n            color: theme('colors.secondary.800'),\n          }\n        }\n      }\n      \n      addComponents(designSystem)\n    })\n  ]\n}\n\n// Design system documentation in CSS\n/*\nDesign System Documentation\n==========================\n\nColors\n------\n- Primary: Used for primary actions and key elements\n- Secondary: Used for secondary actions and supporting elements\n- Background: Used for page and surface backgrounds\n- Text: Used for text content with different emphasis levels\n- Status: Used for indicating success, warning, error, and info states\n\nTypography\n----------\n- Display: Used for headings and large text\n- Body: Used for paragraph text and general content\n- Mono: Used for code and monospaced text\n\nSpacing\n-------\n- xxs (4px): Micro spacing for tight elements\n- xs (8px): Small spacing for padding and margins\n- sm (12px): Medium spacing for components\n- md (16px): Default spacing for components\n- lg (24px): Large spacing for sections\n- xl (32px): Extra large spacing for layouts\n- xxl (48px): Huge spacing for major sections\n- xxxl (64px): Massive spacing for page layouts\n\nComponents\n----------\n- Card: Container for content with header, body, and footer\n- Alert: Feedback messages with status colors\n- Badge: Small labels for status or categories\n*/\n\n// Usage examples:\n// <div class=\"card max-w-md\">\n//   <div class=\"card-header\">\n//     <h3 class=\"text-lg font-medium\">Card Title</h3>\n//   </div>\n//   <div class=\"card-body\">\n//     <p class=\"text-text-secondary\">Card content goes here...</p>\n//   </div>\n//   <div class=\"card-footer\">\n//     <button class=\"btn btn-primary\">Action</button>\n//   </div>\n// </div>\n// \n// <div class=\"alert alert-success mt-4\">\n//   <p>Success! Your action was completed.</p>\n// </div>\n// \n// <span class=\"badge badge-primary ml-2\">New</span>",
      "explanation": "This example demonstrates a comprehensive design system implementation with Tailwind CSS. It includes:\n\n1. Semantic design tokens organized by category (spacing, colors, typography)\n2. Component library with reusable UI components\n3. Design system documentation\n4. Consistent naming conventions\n\nThe implementation creates a cohesive design language that can be easily maintained and extended. The design tokens provide a single source of truth for design decisions, while the component library ensures consistent implementation across the application.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Creating design systems that are too rigid and don't allow for creative expression",
        "solution": "Build flexibility into the system with escape hatches and customization options",
        "severity": "medium"
      },
      {
        "mistake": "Not involving designers in the design system implementation process",
        "solution": "Collaborate closely with designers to ensure the system meets their needs",
        "severity": "high"
      },
      {
        "mistake": "Failing to document the design system properly",
        "solution": "Create comprehensive documentation with examples and usage guidelines",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Implement a Complete Design System",
        "description": "Create a full design system with design tokens, component library, and documentation using Tailwind CSS",
        "checkpoints": [
          "Define semantic design tokens for colors, typography, and spacing",
          "Implement a component library with at least 5 reusable components",
          "Create comprehensive documentation for the design system",
          "Establish processes for maintaining and evolving the system"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 55,
    "difficulty": "Advanced",
    "tags": [
      "Design Systems",
      "Tokens",
      "Components",
      "Documentation",
      "Governance",
      "Tailwind CSS"
    ],
    "lastUpdated": "2025-10-03T10:00:00Z",
    "version": "1.0.0"
  },
  {
    "id": "16",
    "moduleSlug": "tailwind-advanced",
    "title": "Component Library Development",
    "order": 16,
    "objectives": [
      "Build comprehensive component libraries with Tailwind CSS",
      "Implement design system components with consistent APIs",
      "Create reusable, accessible, and themeable components",
      "Establish component library documentation and distribution"
    ],
    "intro": "Component library development with Tailwind CSS enables teams to create consistent, reusable UI components that accelerate development while maintaining design integrity. This advanced lesson explores the principles and practices of building professional component libraries that serve as the foundation for scalable user interfaces.\n\nYou'll learn to implement components with consistent APIs, create accessible interfaces that meet WCAG standards, and develop themeable components that adapt to different contexts. We'll explore advanced patterns for component composition, state management, and integration with popular frameworks.\n\nThe lesson covers practical strategies for organizing component libraries, establishing naming conventions, and creating comprehensive documentation systems. You'll discover how to balance component flexibility with consistency, implement proper testing strategies, and establish processes for library maintenance and evolution.\n\nBy mastering component library development, you'll be able to create development resources that significantly improve team productivity, ensure design consistency, and provide reliable building blocks for complex applications.",
    "code": {
      "example": "// Component Library Development with Tailwind CSS\n\n// Component library structure\n/*\nsrc/\n├── components/\n│   ├── Button/\n│   │   ├── Button.js\n│   │   ├── Button.stories.js\n│   │   ├── Button.test.js\n│   │   └── index.js\n│   ├── Card/\n│   │   ├── Card.js\n│   │   ├── CardHeader.js\n│   │   ├── CardBody.js\n│   │   ├── CardFooter.js\n│   │   ├── Card.stories.js\n│   │   ├── Card.test.js\n│   │   └── index.js\n│   ├── Form/\n│   │   ├── Input.js\n│   │   ├── Select.js\n│   │   ├── Checkbox.js\n│   │   ├── Radio.js\n│   │   ├── Form.stories.js\n│   │   ├── Form.test.js\n│   │   └── index.js\n│   └── index.js\n├── hooks/\n├── utils/\n└── stories/\n*/\n\n// Button Component Implementation\n// src/components/Button/Button.js\nimport React from 'react';\n\nconst Button = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  disabled = false,\n  fullWidth = false,\n  icon,\n  iconPosition = 'left',\n  onClick,\n  className = '',\n  ...props\n}) => {\n  // Base button classes\n  const baseClasses = [\n    'inline-flex',\n    'items-center',\n    'justify-center',\n    'font-medium',\n    'rounded-md',\n    'transition-colors',\n    'focus:outline-none',\n    'focus:ring-2',\n    'focus:ring-offset-2',\n    'whitespace-nowrap'\n  ];\n  \n  // Variant classes\n  const variantClasses = {\n    primary: [\n      'bg-primary-600',\n      'text-white',\n      'hover:bg-primary-700',\n      'focus:ring-primary-500',\n      'border-transparent',\n      disabled ? 'bg-primary-400' : ''\n    ],\n    secondary: [\n      'bg-secondary-600',\n      'text-white',\n      'hover:bg-secondary-700',\n      'focus:ring-secondary-500',\n      'border-transparent',\n      disabled ? 'bg-secondary-400' : ''\n    ],\n    outline: [\n      'bg-transparent',\n      'border',\n      'border-primary-600',\n      'text-primary-600',\n      'hover:bg-primary-50',\n      'focus:ring-primary-500',\n      disabled ? 'border-primary-300 text-primary-300' : ''\n    ],\n    ghost: [\n      'bg-transparent',\n      'text-primary-600',\n      'hover:bg-primary-50',\n      'focus:ring-primary-500',\n      'border-transparent'\n    ]\n  };\n  \n  // Size classes\n  const sizeClasses = {\n    sm: ['text-xs', 'py-1.5', 'px-3'],\n    md: ['text-sm', 'py-2', 'px-4'],\n    lg: ['text-base', 'py-2.5', 'px-5']\n  };\n  \n  // State classes\n  const stateClasses = [\n    disabled ? 'cursor-not-allowed' : 'cursor-pointer'\n  ];\n  \n  // Layout classes\n  const layoutClasses = [\n    fullWidth ? 'w-full' : ''\n  ];\n  \n  // Combine all classes\n  const classes = [\n    ...baseClasses,\n    ...variantClasses[variant],\n    ...sizeClasses[size],\n    ...stateClasses,\n    ...layoutClasses,\n    className\n  ].filter(Boolean).join(' ');\n  \n  // Handle icon rendering\n  const renderIcon = () => icon && (\n    <span className={children ? (iconPosition === 'left' ? 'mr-2' : 'ml-2') : ''}>\n      {icon}\n    </span>\n  );\n  \n  return (\n    <button\n      className={classes}\n      disabled={disabled}\n      onClick={onClick}\n      {...props}\n    >\n      {iconPosition === 'left' && renderIcon()}\n      {children}\n      {iconPosition === 'right' && renderIcon()}\n    </button>\n  );\n};\n\nexport default Button;\n\n// Card Component Implementation\n// src/components/Card/Card.js\nimport React from 'react';\n\nconst Card = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst CardHeader = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`px-6 py-4 border-b border-gray-200 ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst CardBody = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`px-6 py-4 ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst CardFooter = ({\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <div\n      className={`px-6 py-4 bg-gray-50 border-t border-gray-200 ${className}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\n\nexport default Card;\n\n// Component library index\n// src/components/index.js\nexport { default as Button } from './Button';\nexport { default as Card } from './Card';\n\n// Usage examples:\n// import { Button, Card } from './components';\n// \n// <Button variant=\"primary\" size=\"lg\">\n//   Get Started\n// </Button>\n// \n// <Card>\n//   <Card.Header>\n//     <h3 className=\"text-lg font-medium\">Card Title</h3>\n//   </Card.Header>\n//   <Card.Body>\n//     <p className=\"text-gray-600\">Card content goes here...</p>\n//   </Card.Body>\n//   <Card.Footer>\n//     <Button variant=\"outline\">Cancel</Button>\n//     <Button className=\"ml-2\">Save</Button>\n//   </Card.Footer>\n// </Card>",
      "explanation": "This example demonstrates a comprehensive component library implementation with Tailwind CSS. It includes:\n\n1. A well-structured component library directory\n2. A Button component with multiple variants, sizes, and states\n3. A Card component with sub-components (Header, Body, Footer)\n4. Proper component composition patterns\n5. Accessibility considerations\n6. Consistent API design\n\nThe implementation shows how to create reusable, themeable components that maintain design consistency while providing flexibility for different use cases.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Creating components that are too complex and hard to maintain",
        "solution": "Follow the single responsibility principle and break complex components into smaller, composable parts",
        "severity": "high"
      },
      {
        "mistake": "Not considering accessibility in component design",
        "solution": "Implement proper ARIA attributes, keyboard navigation, and focus management",
        "severity": "high"
      },
      {
        "mistake": "Inconsistent component APIs across the library",
        "solution": "Establish clear API conventions and document them thoroughly",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Build a Professional Component Library",
        "description": "Create a comprehensive component library with at least 10 components, proper documentation, and testing",
        "checkpoints": [
          "Design and implement a consistent component API",
          "Create accessible components that meet WCAG standards",
          "Implement proper state management and event handling",
          "Write comprehensive documentation and usage examples",
          "Set up testing for components"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 60,
    "difficulty": "Advanced",
    "tags": [
      "Component Library",
      "Components",
      "Accessibility",
      "API Design",
      "Testing",
      "Documentation",
      "Tailwind CSS"
    ],
    "lastUpdated": "2025-10-03T10:00:00Z",
    "version": "1.0.0"
  },
  {
    "id": "17",
    "moduleSlug": "tailwind-advanced",
    "title": "Theming and Dark Mode Strategies",
    "order": 17,
    "objectives": [
      "Implement sophisticated theming systems with Tailwind CSS",
      "Create seamless dark mode experiences with smooth transitions",
      "Develop theme persistence and user preference management",
      "Optimize themes for accessibility and performance"
    ],
    "intro": "Theming and dark mode strategies are essential for creating inclusive, user-friendly applications that adapt to different preferences and environments. This comprehensive lesson explores advanced techniques for implementing sophisticated theming systems and seamless dark mode experiences with Tailwind CSS.\n\nYou'll learn to create themeable components that adapt to different color schemes, implement smooth transitions between themes, and manage user preferences with proper persistence. We'll explore advanced patterns for handling system preferences, creating custom themes, and optimizing themes for accessibility standards.\n\nThe lesson covers practical implementation strategies for managing theme state, creating themeable design systems, and ensuring consistent experiences across different devices and contexts. You'll discover how to balance aesthetic appeal with accessibility requirements and performance considerations.\n\nBy mastering theming and dark mode strategies, you'll be able to create applications that provide personalized experiences while maintaining usability and accessibility for all users.",
    "code": {
      "example": "// Advanced Theming and Dark Mode Implementation\n\n// Tailwind configuration for advanced theming\n// tailwind.config.js\nmodule.exports = {\n  darkMode: 'class', // Enable class-based dark mode\n  theme: {\n    extend: {\n      // Extended color palette with themeable colors\n      colors: {\n        // Primary color palette\n        primary: {\n          50: 'rgb(var(--color-primary-50) / <alpha-value>)',\n          100: 'rgb(var(--color-primary-100) / <alpha-value>)',\n          200: 'rgb(var(--color-primary-200) / <alpha-value>)',\n          300: 'rgb(var(--color-primary-300) / <alpha-value>)',\n          400: 'rgb(var(--color-primary-400) / <alpha-value>)',\n          500: 'rgb(var(--color-primary-500) / <alpha-value>)',\n          600: 'rgb(var(--color-primary-600) / <alpha-value>)',\n          700: 'rgb(var(--color-primary-700) / <alpha-value>)',\n          800: 'rgb(var(--color-primary-800) / <alpha-value>)',\n          900: 'rgb(var(--color-primary-900) / <alpha-value>)',\n        },\n        \n        // Secondary color palette\n        secondary: {\n          50: 'rgb(var(--color-secondary-50) / <alpha-value>)',\n          100: 'rgb(var(--color-secondary-100) / <alpha-value>)',\n          200: 'rgb(var(--color-secondary-200) / <alpha-value>)',\n          300: 'rgb(var(--color-secondary-300) / <alpha-value>)',\n          400: 'rgb(var(--color-secondary-400) / <alpha-value>)',\n          500: 'rgb(var(--color-secondary-500) / <alpha-value>)',\n          600: 'rgb(var(--color-secondary-600) / <alpha-value>)',\n          700: 'rgb(var(--color-secondary-700) / <alpha-value>)',\n          800: 'rgb(var(--color-secondary-800) / <alpha-value>)',\n          900: 'rgb(var(--color-secondary-900) / <alpha-value>)',\n        },\n        \n        // Background colors\n        background: {\n          DEFAULT: 'rgb(var(--color-background) / <alpha-value>)',\n          surface: 'rgb(var(--color-background-surface) / <alpha-value>)',\n          overlay: 'rgb(var(--color-background-overlay) / <alpha-value>)',\n        },\n        \n        // Text colors\n        text: {\n          primary: 'rgb(var(--color-text-primary) / <alpha-value>)',\n          secondary: 'rgb(var(--color-text-secondary) / <alpha-value>)',\n          tertiary: 'rgb(var(--color-text-tertiary) / <alpha-value>)',\n          disabled: 'rgb(var(--color-text-disabled) / <alpha-value>)',\n        }\n      }\n    }\n  },\n  plugins: [\n    // Theme management plugin\n    plugin(function({ addBase, theme }) {\n      addBase({\n        // Light theme variables\n        ':root': {\n          '--color-primary-50': '239 246 255',\n          '--color-primary-100': '219 234 254',\n          '--color-primary-200': '191 219 254',\n          '--color-primary-300': '147 197 253',\n          '--color-primary-400': '96 165 250',\n          '--color-primary-500': '59 130 246',\n          '--color-primary-600': '37 99 235',\n          '--color-primary-700': '29 78 216',\n          '--color-primary-800': '30 64 175',\n          '--color-primary-900': '30 58 138',\n          \n          '--color-secondary-50': '240 249 255',\n          '--color-secondary-100': '224 242 254',\n          '--color-secondary-200': '186 230 253',\n          '--color-secondary-300': '125 211 252',\n          '--color-secondary-400': '56 189 248',\n          '--color-secondary-500': '14 165 233',\n          '--color-secondary-600': '2 132 199',\n          '--color-secondary-700': '3 105 161',\n          '--color-secondary-800': '7 89 133',\n          '--color-secondary-900': '12 74 110',\n          \n          '--color-background': '255 255 255',\n          '--color-background-surface': '248 250 252',\n          '--color-background-overlay': '255 255 255',\n          \n          '--color-text-primary': '15 23 42',\n          '--color-text-secondary': '100 116 139',\n          '--color-text-tertiary': '148 163 184',\n          '--color-text-disabled': '203 213 225',\n        },\n        \n        // Dark theme variables\n        '.dark': {\n          '--color-primary-50': '30 58 138',\n          '--color-primary-100': '30 64 175',\n          '--color-primary-200': '29 78 216',\n          '--color-primary-300': '37 99 235',\n          '--color-primary-400': '59 130 246',\n          '--color-primary-500': '96 165 250',\n          '--color-primary-600': '147 197 253',\n          '--color-primary-700': '191 219 254',\n          '--color-primary-800': '219 234 254',\n          '--color-primary-900': '239 246 255',\n          \n          '--color-secondary-50': '12 74 110',\n          '--color-secondary-100': '7 89 133',\n          '--color-secondary-200': '3 105 161',\n          '--color-secondary-300': '2 132 199',\n          '--color-secondary-400': '14 165 233',\n          '--color-secondary-500': '56 189 248',\n          '--color-secondary-600': '125 211 252',\n          '--color-secondary-700': '186 230 253',\n          '--color-secondary-800': '224 242 254',\n          '--color-secondary-900': '240 249 255',\n          \n          '--color-background': '15 23 42',\n          '--color-background-surface': '30 41 59',\n          '--color-background-overlay': '51 65 85',\n          \n          '--color-text-primary': '241 245 249',\n          '--color-text-secondary': '203 213 225',\n          '--color-text-tertiary': '148 163 184',\n          '--color-text-disabled': '100 116 139',\n        }\n      });\n    })\n  ]\n}\n\n// Theme management JavaScript\n// src/hooks/useTheme.js\nimport { useEffect, useState } from 'react';\n\nexport function useTheme() {\n  const [theme, setTheme] = useState('system');\n  \n  useEffect(() => {\n    // Check for saved theme preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setTheme(savedTheme);\n      applyTheme(savedTheme);\n    } else {\n      // Check system preference\n      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setTheme(systemPrefersDark ? 'dark' : 'light');\n      applyTheme(systemPrefersDark ? 'dark' : 'light');\n    }\n  }, []);\n  \n  const applyTheme = (newTheme) => {\n    if (newTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else if (newTheme === 'light') {\n      document.documentElement.classList.remove('dark');\n    } else {\n      // System preference\n      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      if (systemPrefersDark) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    }\n  };\n  \n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    applyTheme(newTheme);\n  };\n  \n  const setThemePreference = (newTheme) => {\n    setTheme(newTheme);\n    if (newTheme !== 'system') {\n      localStorage.setItem('theme', newTheme);\n    } else {\n      localStorage.removeItem('theme');\n    }\n    applyTheme(newTheme);\n  };\n  \n  return { theme, toggleTheme, setThemePreference };\n}\n\n// Theme switcher component\n// src/components/ThemeSwitcher.js\nimport React from 'react';\nimport { useTheme } from '../hooks/useTheme';\n\nconst ThemeSwitcher = () => {\n  const { theme, setThemePreference } = useTheme();\n  \n  return (\n    <div className=\"flex items-center space-x-2\">\n      <span className=\"text-sm font-medium text-text-primary\">Theme:</span>\n      <select \n        value={theme}\n        onChange={(e) => setThemePreference(e.target.value)}\n        className=\"bg-background-surface border border-border rounded-md px-2 py-1 text-sm text-text-primary focus:outline-none focus:ring-2 focus:ring-primary-500\"\n      >\n        <option value=\"system\">System</option>\n        <option value=\"light\">Light</option>\n        <option value=\"dark\">Dark</option>\n      </select>\n      \n      <button\n        onClick={() => setThemePreference(theme === 'light' ? 'dark' : 'light')}\n        className=\"p-2 rounded-md bg-background-surface border border-border text-text-primary hover:bg-background-overlay transition-colors\"\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'dark' ? (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\" />\n          </svg>\n        ) : (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\" />\n          </svg>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ThemeSwitcher;\n\n// Smooth theme transition CSS\n// Add to your global CSS\n/*\n:root {\n  --transition-duration: 300ms;\n  --transition-timing: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n*,\n*::before,\n*::after {\n  transition: background-color, border-color var(--transition-duration) var(--transition-timing);\n}\n\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    transition: none;\n  }\n}\n*/\n\n// Usage examples:\n// <div className=\"bg-background text-text-primary p-4\">\n//   <h1 className=\"text-2xl font-bold mb-2\">Themeable Content</h1>\n//   <p className=\"mb-4\">This content adapts to the current theme.</p>\n//   <ThemeSwitcher />\n// </div>",
      "explanation": "This example demonstrates advanced theming and dark mode implementation with Tailwind CSS. Key features include:\n\n1. CSS variable-based color system for theme switching\n2. Class-based dark mode configuration\n3. React hook for theme management\n4. Theme persistence with localStorage\n5. System preference detection\n6. Smooth theme transitions\n7. Accessible theme switcher component\n\nThe implementation provides a robust foundation for themeable applications with proper accessibility considerations and performance optimization.",
      "language": "javascript"
    },
    "pitfalls": [
      {
        "mistake": "Not considering accessibility when implementing dark mode",
        "solution": "Ensure proper color contrast ratios and test with accessibility tools",
        "severity": "high"
      },
      {
        "mistake": "Creating jarring theme transitions that disrupt user experience",
        "solution": "Implement smooth transitions and respect user motion preferences",
        "severity": "medium"
      },
      {
        "mistake": "Not handling system preference changes dynamically",
        "solution": "Listen for system preference changes and update themes accordingly",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Implement a Comprehensive Theme System",
        "description": "Create a complete theme system with light/dark modes, system preference detection, and smooth transitions",
        "checkpoints": [
          "Implement CSS variable-based color system",
          "Create theme management with persistence",
          "Build accessible theme switcher component",
          "Add smooth theme transitions",
          "Handle system preference changes"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 55,
    "difficulty": "Advanced",
    "tags": [
      "Theming",
      "Dark Mode",
      "Accessibility",
      "CSS Variables",
      "React",
      "Tailwind CSS"
    ],
    "lastUpdated": "2025-10-03T10:00:00Z",
    "version": "1.0.0"
  }
]