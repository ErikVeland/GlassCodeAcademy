[
  {
    "id": "sass-advanced-lesson-1",
    "moduleSlug": "sass-advanced",
    "title": "Introduction to SASS",
    "order": 1,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Basics.\n\nLearn the fundamentals of SASS and how it extends CSS with powerful features.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// SCSS syntax\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n\n// Compiled CSS output\nbody {\n  font: 100% Helvetica, sans-serif;\n  color: #333;\n}",
      "explanation": "This example produces: body {\n  font: 100% Helvetica, sans-serif;\n  color: #333;\n}\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Introduction to SASS",
        "description": "Apply the concepts from this lesson on Basics",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Beginner",
    "tags": [
      "Basics",
      "sass"
    ],
    "legacy": {
      "originalId": 1,
      "originalTopic": "Basics",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-2",
    "moduleSlug": "sass-advanced",
    "title": "Variables in SASS",
    "order": 2,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Basics.\n\nLearn how to use variables to store and reuse values throughout your stylesheet.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Defining variables\n$primary-color: #3498db;\n$secondary-color: #2ecc71;\n$font-size-large: 1.5rem;\n$border-radius: 4px;\n\n// Using variables\n.button {\n  background-color: $primary-color;\n  color: white;\n  font-size: $font-size-large;\n  border-radius: $border-radius;\n  padding: 10px 20px;\n  \n  &:hover {\n    background-color: $secondary-color;\n  }\n}",
      "explanation": "This example produces: .button {\n  background-color: #3498db;\n  color: white;\n  font-size: 1.5rem;\n  border-radius: 4px;\n  padding: 10px 20px;\n}\n\n.button:hover {\n  background-color: #2ecc71;\n}\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Variables in SASS",
        "description": "Apply the concepts from this lesson on Basics",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Basics",
      "sass"
    ],
    "legacy": {
      "originalId": 2,
      "originalTopic": "Basics",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-3",
    "moduleSlug": "sass-advanced",
    "title": "Nesting in SASS",
    "order": 3,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Nesting.\n\nLearn how to nest selectors and properties to write more organized CSS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// SASS nesting\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    \n    li { \n      display: inline-block;\n      \n      a {\n        display: block;\n        padding: 6px 12px;\n        text-decoration: none;\n      }\n    }\n  }\n}\n\n// Compiled CSS\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\nnav ul li {\n  display: inline-block;\n}\nnav ul li a {\n  display: block;\n  padding: 6px 12px;\n  text-decoration: none;\n}",
      "explanation": "This example produces: nav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\nnav ul li {\n  display: inline-block;\n}\nnav ul li a {\n  display: block;\n  padding: 6px 12px;\n  text-decoration: none;\n}\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Nesting in SASS",
        "description": "Apply the concepts from this lesson on Nesting",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Nesting",
      "sass"
    ],
    "legacy": {
      "originalId": 3,
      "originalTopic": "Nesting",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-4",
    "moduleSlug": "sass-advanced",
    "title": "Creating and Using Mixins",
    "order": 4,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Mixins.\n\nLearn how to create reusable blocks of CSS with mixins in SASS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Defining a mixin\n@mixin button-style($bg-color, $text-color: white) {\n  background-color: $bg-color;\n  color: $text-color;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: darken($bg-color, 10%);\n  }\n}\n\n// Using mixins\n.primary-button {\n  @include button-style(#3498db);\n}\n\n.success-button {\n  @include button-style(#2ecc71, #333);\n}",
      "explanation": "This example produces: .primary-button {\n  background-color: #3498db;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.primary-button:hover {\n  background-color: #217dbb;\n}\n\n.success-button {\n  background-color: #2ecc71;\n  color: #333;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.success-button:hover {\n  background-color: #25a25a;\n}\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Creating and Using Mixins",
        "description": "Apply the concepts from this lesson on Mixins",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Mixins",
      "sass"
    ],
    "legacy": {
      "originalId": 4,
      "originalTopic": "Mixins",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-5",
    "moduleSlug": "sass-advanced",
    "title": "SASS Functions and Operations",
    "order": 5,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Functions.\n\nLearn how to use built-in functions and create custom functions in SASS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Built-in functions\n$base-color: #3498db;\n\n.card {\n  background-color: lighten($base-color, 20%);\n  border-color: darken($base-color, 15%);\n  font-size: 16px * 1.2;\n  width: 200px + 50px;\n}\n\n// Custom function\n@function calculate-rem($size) {\n  $rem-size: $size / 16px;\n  @return #{$rem-size}rem;\n}\n\n.text {\n  font-size: calculate-rem(18px);\n}",
      "explanation": "This example produces: .card {\n  background-color: #aed6f1;\n  border-color: #1d6fa5;\n  font-size: 19.2px;\n  width: 250px;\n}\n\n.text {\n  font-size: 1.125rem;\n}\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: SASS Functions and Operations",
        "description": "Apply the concepts from this lesson on Functions",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Advanced",
    "tags": [
      "Functions",
      "sass"
    ],
    "legacy": {
      "originalId": 5,
      "originalTopic": "Functions",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-6",
    "moduleSlug": "sass-advanced",
    "title": "Control Directives and Loops",
    "order": 6,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Control Directives.\n\nLearn how to use control directives like @if, @for, @each, and @while in SASS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// @if directive\n@mixin respond-to($breakpoint) {\n  @if $breakpoint == small {\n    @media (max-width: 767px) { @content; }\n  }\n  @else if $breakpoint == medium {\n    @media (min-width: 768px) and (max-width: 1023px) { @content; }\n  }\n  @else if $breakpoint == large {\n    @media (min-width: 1024px) { @content; }\n  }\n}\n\n// @for loop\n@for $i from 1 through 4 {\n  .column-#{$i} {\n    width: percentage($i / 4);\n  }\n}\n\n// @each loop\n$colors: (primary: #3498db, success: #2ecc71, danger: #e74c3c);\n\n@each $name, $color in $colors {\n  .btn-#{$name} {\n    background-color: $color;\n    \n    &:hover {\n      background-color: darken($color, 10%);\n    }\n  }\n}\n\n// @while loop\n$columns: 12;\n$i: 1;\n\n@while $i <= $columns {\n  .grid-#{$i} {\n    width: percentage($i / $columns);\n  }\n  $i: $i + 1;\n}",
      "explanation": "This example produces: Responsive mixins, column widths, colored buttons, and grid system generated programmatically\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Control Directives and Loops",
        "description": "Apply the concepts from this lesson on Control Directives",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Control Directives",
      "sass"
    ],
    "legacy": {
      "originalId": 6,
      "originalTopic": "Control Directives",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-7",
    "moduleSlug": "sass-advanced",
    "title": "Inheritance with @extend",
    "order": 7,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Advanced Features.\n\nLearn how to use @extend to share styles between selectors and create efficient CSS.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Base styles\n%button-base {\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: bold;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  transition: all 0.3s ease;\n}\n\n%message-shared {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n  border-radius: 4px;\n  margin-bottom: 15px;\n}\n\n// Extending base styles\n.button {\n  @extend %button-base;\n  background-color: #3498db;\n  color: white;\n  \n  &:hover {\n    background-color: darken(#3498db, 10%);\n  }\n}\n\n.button-large {\n  @extend .button;\n  padding: 15px 25px;\n  font-size: 1.2em;\n}\n\n.success {\n  @extend %message-shared;\n  border-color: #d4edda;\n  background-color: #d1ecf1;\n  color: #155724;\n}\n\n.error {\n  @extend %message-shared;\n  border-color: #f5c6cb;\n  background-color: #f8d7da;\n  color: #721c24;\n}",
      "explanation": "This example produces: Efficient CSS with shared styles using @extend, creating maintainable button and message components\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Inheritance with @extend",
        "description": "Apply the concepts from this lesson on Advanced Features",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Advanced Features",
      "sass"
    ],
    "legacy": {
      "originalId": 7,
      "originalTopic": "Advanced Features",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-8",
    "moduleSlug": "sass-advanced",
    "title": "Organizing Code with Partials and @import",
    "order": 8,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Partials.\n\nLearn how to organize SASS code using partials and the @import directive.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// _variables.scss\n$primary-color: #3498db;\n$secondary-color: #2ecc71;\n$font-family: 'Helvetica Neue', Arial, sans-serif;\n$border-radius: 4px;\n\n// _mixins.scss\n@mixin flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@mixin card-shadow($level: 1) {\n  @if $level == 1 {\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  } @else if $level == 2 {\n    box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n  } @else if $level == 3 {\n    box-shadow: 0 8px 16px rgba(0,0,0,0.2);\n  }\n}\n\n// _components.scss\n@import 'variables';\n@import 'mixins';\n\n.card {\n  background: white;\n  border-radius: $border-radius;\n  padding: 20px;\n  @include card-shadow(2);\n  \n  &__header {\n    border-bottom: 1px solid #eee;\n    padding-bottom: 15px;\n    margin-bottom: 15px;\n  }\n  \n  &__title {\n    font-family: $font-family;\n    color: $primary-color;\n    margin: 0;\n  }\n}\n\n// main.scss\n@import 'variables';\n@import 'mixins';\n@import 'components';\n\nbody {\n  font-family: $font-family;\n  line-height: 1.6;\n  color: #333;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  @include flex-center;\n  flex-direction: column;\n}",
      "explanation": "This example produces: Modular SASS architecture with organized partials for variables, mixins, and components\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Organizing Code with Partials and @import",
        "description": "Apply the concepts from this lesson on Partials",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Partials",
      "sass"
    ],
    "legacy": {
      "originalId": 8,
      "originalTopic": "Partials",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-9",
    "moduleSlug": "sass-advanced",
    "title": "Working with Maps and Lists",
    "order": 9,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Maps and Lists.\n\nLearn how to use SASS maps and lists for advanced data structures and dynamic styles.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// SASS Lists\n$font-sizes: 12px, 14px, 16px, 18px, 24px, 32px;\n$font-weights: normal, bold, 100, 200, 300, 400, 500, 600, 700, 800, 900;\n\n// SASS Maps\n$breakpoints: (\n  small: 480px,\n  medium: 768px,\n  large: 1024px,\n  xlarge: 1200px\n);\n\n$theme-colors: (\n  primary: (\n    base: #3498db,\n    light: #5dade2,\n    dark: #2980b9\n  ),\n  secondary: (\n    base: #95a5a6,\n    light: #bdc3c7,\n    dark: #7f8c8d\n  )\n);\n\n// Functions to work with maps\n@function color($color-name, $tone: base) {\n  @return map-get(map-get($theme-colors, $color-name), $tone);\n}\n\n@function breakpoint($bp-name) {\n  @return map-get($breakpoints, $bp-name);\n}\n\n// Mixins using maps\n@mixin respond-above($breakpoint) {\n  @media (min-width: #{map-get($breakpoints, $breakpoint)}) {\n    @content;\n  }\n}\n\n// Generate utility classes from lists\n@each $size in $font-sizes {\n  .font-size-#{$size} {\n    font-size: $size;\n  }\n}\n\n// Generate color classes from maps\n@each $color-name, $color-map in $theme-colors {\n  .bg-#{$color-name} {\n    background-color: map-get($color-map, base);\n    \n    &-light {\n      background-color: map-get($color-map, light);\n    }\n    \n    &-dark {\n      background-color: map-get($color-map, dark);\n    }\n  }\n}\n\n// Usage examples\n.header {\n  background-color: color(primary);\n  color: white;\n  \n  @include respond-above(medium) {\n    padding: 20px;\n  }\n}",
      "explanation": "This example produces: Dynamic utility classes, responsive design system, and theme color management using SASS data structures\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Working with Maps and Lists",
        "description": "Apply the concepts from this lesson on Maps and Lists",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Advanced",
    "tags": [
      "Maps and Lists",
      "sass"
    ],
    "legacy": {
      "originalId": 9,
      "originalTopic": "Maps and Lists",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-10",
    "moduleSlug": "sass-advanced",
    "title": "SASS Architecture and BEM Methodology",
    "order": 10,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Architecture.\n\nLearn how to structure large SASS projects using the 7-1 pattern and BEM methodology.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// 7-1 SASS Architecture\n/*\nsass/\n|\n|– abstracts/\n|   |– _variables.scss    // Sass Variables\n|   |– _functions.scss    // Sass Functions\n|   |– _mixins.scss       // Sass Mixins\n|   |– _placeholders.scss // Sass Placeholders\n|\n|– base/\n|   |– _reset.scss        // Reset/normalize\n|   |– _typography.scss   // Typography rules\n|\n|– components/\n|   |– _buttons.scss      // Buttons\n|   |– _carousel.scss     // Carousel\n|   |– _cover.scss        // Cover\n|   |– _dropdown.scss     // Dropdown\n|\n|– layout/\n|   |– _navigation.scss   // Navigation\n|   |– _grid.scss         // Grid system\n|   |– _header.scss       // Header\n|   |– _footer.scss       // Footer\n|   |– _sidebar.scss      // Sidebar\n|   |– _forms.scss        // Forms\n|\n|– pages/\n|   |– _home.scss         // Home specific styles\n|   |– _contact.scss      // Contact specific styles\n|\n|– themes/\n|   |– _theme.scss        // Default theme\n|   |– _admin.scss        // Admin theme\n|\n|– vendors/\n|   |– _bootstrap.scss    // Bootstrap\n|   |– _jquery-ui.scss    // jQuery UI\n|\n`– main.scss              // Main Sass file\n*/\n\n// BEM Methodology Example\n// Block__Element--Modifier\n\n.card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  padding: 20px;\n  \n  // Element\n  &__header {\n    border-bottom: 1px solid #eee;\n    padding-bottom: 15px;\n    margin-bottom: 15px;\n  }\n  \n  &__title {\n    font-size: 1.5rem;\n    font-weight: bold;\n    margin: 0;\n    color: #333;\n  }\n  \n  &__body {\n    line-height: 1.6;\n  }\n  \n  &__footer {\n    border-top: 1px solid #eee;\n    padding-top: 15px;\n    margin-top: 15px;\n    text-align: right;\n  }\n  \n  // Modifiers\n  &--featured {\n    border: 2px solid #3498db;\n    box-shadow: 0 4px 16px rgba(52, 152, 219, 0.2);\n  }\n  \n  &--large {\n    padding: 30px;\n    \n    .card__title {\n      font-size: 2rem;\n    }\n  }\n  \n  &--compact {\n    padding: 10px;\n    \n    .card__header {\n      padding-bottom: 8px;\n      margin-bottom: 8px;\n    }\n  }\n}\n\n// Main SASS file structure\n@import 'abstracts/variables';\n@import 'abstracts/functions';\n@import 'abstracts/mixins';\n@import 'abstracts/placeholders';\n\n@import 'base/reset';\n@import 'base/typography';\n\n@import 'layout/navigation';\n@import 'layout/grid';\n@import 'layout/header';\n@import 'layout/footer';\n\n@import 'components/buttons';\n@import 'components/carousel';\n@import 'components/dropdown';",
      "explanation": "This example produces: Scalable SASS architecture with organized file structure and BEM naming convention for maintainable code\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: SASS Architecture and BEM Methodology",
        "description": "Apply the concepts from this lesson on Architecture",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Architecture",
      "sass"
    ],
    "legacy": {
      "originalId": 10,
      "originalTopic": "Architecture",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-11",
    "moduleSlug": "sass-advanced",
    "title": "SASS Performance and Optimization",
    "order": 11,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Optimization.\n\nLearn best practices for optimizing SASS compilation and output CSS performance.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Efficient variable organization\n$colors: (\n  primary: #3498db,\n  secondary: #2ecc71,\n  accent: #e74c3c,\n  neutral: #95a5a6\n) !default;\n\n// Optimized mixin for performance\n@mixin generate-spacing($property, $sizes: (5, 10, 15, 20, 25, 30)) {\n  @each $size in $sizes {\n    .#{str-slice($property, 1, 1)}-#{$size} {\n      #{$property}: #{$size}px;\n    }\n  }\n}\n\n// Generate utilities efficiently\n@include generate-spacing('margin');\n@include generate-spacing('padding');\n\n// Conditional compilation\n$include-print-styles: false !default;\n$include-ie-support: false !default;\n\n@if $include-print-styles {\n  @media print {\n    .no-print { display: none; }\n    .print-only { display: block; }\n  }\n}\n\n@if $include-ie-support {\n  .ie-fallback {\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#3498db', endColorstr='#2980b9');\n  }\n}\n\n// Optimize selector nesting (max 3 levels)\n.navigation {\n  ul {\n    li {\n      a {\n        // This is the maximum recommended nesting depth\n        text-decoration: none;\n        \n        // Use parent selector instead of deeper nesting\n        &:hover,\n        &:focus {\n          color: #3498db;\n        }\n      }\n    }\n  }\n}\n\n// Efficient placeholder usage\n%clearfix {\n  &::after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n}\n\n%sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n\n// Use placeholders for shared styles\n.row {\n  @extend %clearfix;\n}\n\n.screen-reader-text {\n  @extend %sr-only;\n}\n\n// Performance monitoring mixin\n@mixin performance-critical {\n  /* Critical CSS - inline this */\n  @content;\n}\n\n@include performance-critical {\n  body {\n    font-family: system-ui, -apple-system, sans-serif;\n    line-height: 1.6;\n  }\n  \n  .header {\n    background: #fff;\n    position: sticky;\n    top: 0;\n  }\n}",
      "explanation": "This example produces: Optimized SASS code with efficient compilation, conditional includes, and performance-conscious patterns\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: SASS Performance and Optimization",
        "description": "Apply the concepts from this lesson on Optimization",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Advanced",
    "tags": [
      "Optimization",
      "sass"
    ],
    "legacy": {
      "originalId": 11,
      "originalTopic": "Optimization",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-12",
    "moduleSlug": "sass-advanced",
    "title": "Modern SASS Features and CSS Grid Integration",
    "order": 12,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Modern Features.\n\nLearn about modern SASS features and how to integrate with CSS Grid and other modern CSS technologies.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "// Modern SASS with CSS Custom Properties\n:root {\n  --color-primary: #{color(primary)};\n  --color-secondary: #{color(secondary)};\n  --spacing-unit: 1rem;\n  --border-radius: 8px;\n}\n\n// CSS Grid helpers\n@mixin grid-container($columns: 12, $gap: 1rem) {\n  display: grid;\n  grid-template-columns: repeat($columns, 1fr);\n  gap: $gap;\n}\n\n@mixin grid-item($column-start: auto, $column-end: auto, $row-start: auto, $row-end: auto) {\n  grid-column: $column-start / $column-end;\n  grid-row: $row-start / $row-end;\n}\n\n// Modern layout system\n.layout {\n  @include grid-container(12, 2rem);\n  min-height: 100vh;\n  \n  &__header {\n    @include grid-item(1, -1, 1, 2);\n    background: var(--color-primary);\n    color: white;\n    padding: var(--spacing-unit);\n  }\n  \n  &__sidebar {\n    @include grid-item(1, 4, 2, -1);\n    background: #f8f9fa;\n    padding: var(--spacing-unit);\n    \n    @media (max-width: 768px) {\n      @include grid-item(1, -1, 2, 3);\n    }\n  }\n  \n  &__main {\n    @include grid-item(4, -1, 2, -1);\n    padding: var(--spacing-unit);\n    \n    @media (max-width: 768px) {\n      @include grid-item(1, -1, 3, -1);\n    }\n  }\n}\n\n// Container queries preparation\n@mixin container-query($min-width) {\n  @container (min-width: #{$min-width}) {\n    @content;\n  }\n}\n\n.card {\n  container-type: inline-size;\n  background: white;\n  border-radius: var(--border-radius);\n  padding: var(--spacing-unit);\n  \n  @include container-query(300px) {\n    .card__content {\n      display: flex;\n      gap: 1rem;\n    }\n  }\n}\n\n// Modern color functions\n@function get-contrast-color($color) {\n  $lightness: lightness($color);\n  @return if($lightness > 50%, #000, #fff);\n}\n\n@mixin theme-colors($theme-map) {\n  @each $name, $color in $theme-map {\n    .bg-#{$name} {\n      background-color: $color;\n      color: get-contrast-color($color);\n    }\n    \n    .text-#{$name} {\n      color: $color;\n    }\n    \n    .border-#{$name} {\n      border-color: $color;\n    }\n  }\n}\n\n// Generate modern color system\n@include theme-colors($colors);\n\n// CSS logical properties with SASS\n@mixin logical-spacing($block-start: 0, $inline-end: 0, $block-end: 0, $inline-start: 0) {\n  padding-block-start: $block-start;\n  padding-inline-end: $inline-end;\n  padding-block-end: $block-end;\n  padding-inline-start: $inline-start;\n}\n\n.content {\n  @include logical-spacing(2rem, 1rem, 2rem, 1rem);\n  margin-inline: auto;\n  max-inline-size: 80ch;\n}",
      "explanation": "This example produces: Modern SASS integration with CSS Grid, custom properties, container queries, and logical properties for future-proof styling\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Modern SASS Features and CSS Grid Integration",
        "description": "Apply the concepts from this lesson on Modern Features",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Modern Features",
      "sass"
    ],
    "legacy": {
      "originalId": 12,
      "originalTopic": "Modern Features",
      "migrated": "2025-10-01T06:41:13.486Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.486Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-13",
    "moduleSlug": "sass-advanced",
    "title": "Advanced Architecture Patterns and the 7-1 Pattern",
    "order": 13,
    "objectives": [
      "Master the 7-1 architecture pattern for scalable Sass projects",
      "Implement modular design with clear separation of concerns",
      "Utilize design tokens and theming systems for consistent UI",
      "Create maintainable and extensible Sass architectures"
    ],
    "intro": "Advanced architecture patterns are essential for building scalable, maintainable Sass projects that can grow with your application's complexity. This comprehensive lesson explores the industry-standard 7-1 pattern and other advanced architectural approaches that enable teams to collaborate effectively while maintaining code quality and consistency.\n\nYou'll learn to implement the 7-1 pattern, which organizes Sass code into seven distinct folders (abstracts, base, components, layout, pages, themes, vendors) and one main file, providing a clear structure that scales from small projects to large enterprise applications. We'll explore how to properly separate concerns and create modular designs that promote reusability and maintainability.\n\nDesign tokens and theming systems are crucial for maintaining consistent UI across large applications and enabling white-label solutions. We'll cover advanced techniques for implementing design token systems that work seamlessly with Sass variables, maps, and functions to create flexible, themeable designs.\n\nBy mastering advanced architecture patterns, you'll be able to create Sass codebases that are easy to navigate, maintain, and extend, enabling your team to work more efficiently and deliver higher-quality user interfaces. This knowledge is essential for senior frontend developers and CSS architects working on complex applications.",
    "code": {
      "example": "// Advanced 7-1 Architecture Pattern Implementation\n\n/*\nProject structure following the 7-1 pattern:\n\nsass/\n├── abstracts/\n│   ├── _variables.scss\n│   ├── _functions.scss\n│   ├── _mixins.scss\n│   ├── _placeholders.scss\n│   └── _design-tokens.scss\n├── base/\n│   ├── _reset.scss\n│   ├── _typography.scss\n│   ├── _colors.scss\n│   └── _animations.scss\n├── components/\n│   ├── _buttons.scss\n│   ├── _forms.scss\n│   ├── _cards.scss\n│   └── _modals.scss\n├── layout/\n│   ├── _grid.scss\n│   ├── _header.scss\n│   ├── _footer.scss\n│   ├── _sidebar.scss\n│   └── _navigation.scss\n├── pages/\n│   ├── _home.scss\n│   ├── _about.scss\n│   └── _contact.scss\n├── themes/\n│   ├── _default.scss\n│   ├── _dark.scss\n│   └── _brand.scss\n├── vendors/\n│   ├── _normalize.scss\n│   └── _bootstrap-overrides.scss\n└── main.scss\n*/\n\n// Design Tokens Implementation\n// abstracts/_design-tokens.scss\n\n// Color tokens\n$color-tokens: (\n  // Primary colors\n  'primary': (\n    'base': #007bff,\n    'light': #3395ff,\n    'dark': #0062cc,\n    'contrast': #ffffff\n  ),\n  // Secondary colors\n  'secondary': (\n    'base': #6c757d,\n    'light': #868e96,\n    'dark': #545b62,\n    'contrast': #ffffff\n  ),\n  // Status colors\n  'success': (\n    'base': #28a745,\n    'light': #3fc45f,\n    'dark': #1e7e34,\n    'contrast': #ffffff\n  ),\n  'warning': (\n    'base': #ffc107,\n    'light': #ffd042,\n    'dark': #e0a800,\n    'contrast': #212529\n  ),\n  'danger': (\n    'base': #dc3545,\n    'light': #e45b68,\n    'dark': #bd2130,\n    'contrast': #ffffff\n  )\n);\n\n// Spacing tokens\n$spacing-tokens: (\n  'xxs': 0.25rem,  // 4px\n  'xs': 0.5rem,    // 8px\n  'sm': 0.75rem,   // 12px\n  'md': 1rem,      // 16px\n  'lg': 1.5rem,    // 24px\n  'xl': 2rem,      // 32px\n  'xxl': 3rem      // 48px\n);\n\n// Typography tokens\n$typography-tokens: (\n  'font-family': (\n    'base': ('Inter', 'Roboto', 'Helvetica Neue', sans-serif),\n    'monospace': ('SFMono-Regular', 'Consolas', 'Liberation Mono', monospace)\n  ),\n  'font-size': (\n    'xs': 0.75rem,   // 12px\n    'sm': 0.875rem,  // 14px\n    'base': 1rem,    // 16px\n    'lg': 1.125rem,  // 18px\n    'xl': 1.25rem,   // 20px\n    '2xl': 1.5rem,   // 24px\n    '3xl': 1.875rem, // 30px\n    '4xl': 2.25rem   // 36px\n  ),\n  'font-weight': (\n    'light': 300,\n    'normal': 400,\n    'medium': 500,\n    'semibold': 600,\n    'bold': 700\n  ),\n  'line-height': (\n    'tight': 1.25,\n    'snug': 1.375,\n    'normal': 1.5,\n    'relaxed': 1.625,\n    'loose': 2\n  )\n);\n\n// Breakpoint tokens\n$breakpoint-tokens: (\n  'xs': 0,\n  'sm': 576px,\n  'md': 768px,\n  'lg': 992px,\n  'xl': 1200px,\n  'xxl': 1400px\n);\n\n// Advanced Functions to Access Tokens\n@function token($category, $key, $subkey: null) {\n  @if map-has-key($category, $key) {\n    $value: map-get($category, $key);\n    \n    @if $subkey and type-of($value) == 'map' and map-has-key($value, $subkey) {\n      @return map-get($value, $subkey);\n    }\n    \n    @return $value;\n  }\n  \n  @error \"Token '#{$key}' not found in #{$category}\";\n}\n\n// Mixins for Token Usage\n@mixin color-token($property, $color-name, $tone: 'base') {\n  #{$property}: token($color-tokens, $color-name, $tone);\n}\n\n@mixin spacing-token($property, $spacing-name) {\n  #{$property}: token($spacing-tokens, $spacing-name);\n}\n\n@mixin typography-token($property, $typography-name) {\n  #{$property}: token($typography-tokens, $typography-name);\n}\n\n// Theme System Implementation\n// themes/_default.scss\n\n$theme-colors: (\n  'primary': token($color-tokens, 'primary'),\n  'secondary': token($color-tokens, 'secondary'),\n  'success': token($color-tokens, 'success'),\n  'warning': token($color-tokens, 'warning'),\n  'danger': token($color-tokens, 'danger')\n);\n\n// themes/_dark.scss\n\n$dark-theme-colors: (\n  'primary': (\n    'base': #3395ff,\n    'light': #66b0ff,\n    'dark': #0077e6,\n    'contrast': #000000\n  ),\n  'background': (\n    'base': #121212,\n    'surface': #1e1e1e,\n    'card': #252525\n  )\n);\n\n// Advanced Component with Token Usage\n// components/_buttons.scss\n\n.btn {\n  @include typography-token('font-family', 'font-family', 'base');\n  @include typography-token('font-weight', 'font-weight', 'medium');\n  @include spacing-token('padding', 'sm');\n  @include spacing-token('padding-left', 'lg');\n  @include spacing-token('padding-right', 'lg');\n  \n  border: none;\n  border-radius: token($spacing-tokens, 'xs');\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  \n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(token($color-tokens, 'primary', 'base'), 0.25);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n}\n\n.btn--primary {\n  @include color-token('background-color', 'primary', 'base');\n  @include color-token('color', 'primary', 'contrast');\n  \n  &:hover:not(:disabled) {\n    @include color-token('background-color', 'primary', 'dark');\n  }\n  \n  &:active:not(:disabled) {\n    transform: translateY(1px);\n  }\n}\n\n// Advanced Layout System\n// layout/_grid.scss\n\n// Responsive grid system using tokens\n.container {\n  width: 100%;\n  padding-right: token($spacing-tokens, 'md');\n  padding-left: token($spacing-tokens, 'md');\n  margin-right: auto;\n  margin-left: auto;\n  \n  @media (min-width: token($breakpoint-tokens, 'sm')) {\n    max-width: 540px;\n  }\n  \n  @media (min-width: token($breakpoint-tokens, 'md')) {\n    max-width: 720px;\n  }\n  \n  @media (min-width: token($breakpoint-tokens, 'lg')) {\n    max-width: 960px;\n  }\n  \n  @media (min-width: token($breakpoint-tokens, 'xl')) {\n    max-width: 1140px;\n  }\n  \n  @media (min-width: token($breakpoint-tokens, 'xxl')) {\n    max-width: 1320px;\n  }\n}\n\n// Advanced Mixin for Responsive Utilities\n@mixin respond-between($lower, $upper) {\n  @media (min-width: token($breakpoint-tokens, $lower)) and (max-width: (token($breakpoint-tokens, $upper) - 1)) {\n    @content;\n  }\n}\n\n// Usage example\n.hero-section {\n  @include respond-between('md', 'lg') {\n    padding: token($spacing-tokens, 'xl') token($spacing-tokens, 'xxl');\n  }\n}",
      "explanation": "This example demonstrates advanced architecture patterns including the 7-1 pattern implementation, design token systems with nested maps for colors, spacing, typography, and breakpoints, advanced functions for accessing tokens, mixins for consistent token usage, theme systems for light and dark modes, and responsive utilities using token-based breakpoints. These patterns enable scalable, maintainable Sass architectures with consistent design systems.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Creating overly complex folder structures that are difficult to navigate",
        "solution": "Follow established patterns like 7-1 but adapt them to your project's specific needs, keeping the structure intuitive and well-documented",
        "severity": "medium"
      },
      {
        "mistake": "Not properly organizing design tokens leading to inconsistency",
        "solution": "Implement a comprehensive design token system with clear naming conventions and proper categorization of tokens by type and usage",
        "severity": "high"
      },
      {
        "mistake": "Mixing presentational and structural styles in components",
        "solution": "Separate presentational styles (colors, fonts) from structural styles (layout, positioning) using design tokens and clear architectural boundaries",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Implement a Complete 7-1 Architecture with Design Token System",
        "description": "Create a full Sass architecture following the 7-1 pattern with comprehensive design tokens for colors, spacing, typography, and breakpoints, implement advanced functions for token access, create theme systems for light and dark modes, and build responsive utilities using token-based breakpoints",
        "checkpoints": [
          "Set up complete 7-1 folder structure with proper file organization",
          "Implement comprehensive design token system with nested maps",
          "Create advanced functions and mixins for token access and usage",
          "Build theme systems with light and dark mode support",
          "Develop responsive utilities using token-based breakpoints"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 50,
    "difficulty": "Advanced",
    "tags": [
      "Architecture",
      "7-1 Pattern",
      "Design Tokens",
      "Theming",
      "Sass"
    ],
    "lastUpdated": "2025-10-03T00:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-14",
    "moduleSlug": "sass-advanced",
    "title": "Design System Implementation with Sass",
    "order": 14,
    "objectives": [
      "Implement comprehensive design systems with Sass",
      "Create scalable component libraries with consistent design language",
      "Utilize Sass maps and functions for design system tokens",
      "Build documentation and tooling for design system maintenance"
    ],
    "intro": "Design system implementation is crucial for maintaining consistent, scalable user interfaces across large applications and design teams. This comprehensive lesson explores how to leverage Sass's powerful features to build robust design systems that enable efficient collaboration between designers and developers while ensuring consistent user experiences.\n\nYou'll learn to implement design systems with Sass maps, functions, and mixins that provide a single source of truth for design decisions including colors, typography, spacing, and component styles. We'll explore techniques for creating scalable component libraries that maintain consistency while allowing for customization and theming.\n\nDocumentation and tooling are essential for successful design system adoption, so we'll cover strategies for creating living style guides, automated documentation generation, and development tooling that helps teams adhere to design system principles. You'll also learn to implement versioning and migration strategies for evolving design systems.\n\nBy mastering design system implementation with Sass, you'll be able to create maintainable, consistent user interfaces that scale across products and teams while reducing development time and improving quality. This knowledge is essential for frontend architects and senior developers working on enterprise applications with complex design requirements.",
    "code": {
      "example": "// Comprehensive Design System Implementation\n\n// Design System Configuration\n// abstracts/_design-system-config.scss\n\n// Design System Metadata\n$design-system: (\n  'name': 'GlassCode Design System',\n  'version': '1.2.0',\n  'author': 'GlassCode Academy',\n  'last-updated': '2025-10-03'\n);\n\n// Color System\n$color-system: (\n  'palette': (\n    'primary': (\n      '50': #e3f2fd,\n      '100': #bbdefb,\n      '200': #90caf9,\n      '300': #64b5f6,\n      '400': #42a5f5,\n      '500': #2196f3,\n      '600': #1e88e5,\n      '700': #1976d2,\n      '800': #1565c0,\n      '900': #0d47a1\n    ),\n    'secondary': (\n      '50': #fce4ec,\n      '100': #f8bbd0,\n      '200': #f48fb1,\n      '300': #f06292,\n      '400': #ec407a,\n      '500': #e91e63,\n      '600': #d81b60,\n      '700': #c2185b,\n      '800': #ad1457,\n      '900': #880e4f\n    ),\n    'neutral': (\n      '0': #ffffff,\n      '50': #fafafa,\n      '100': #f5f5f5,\n      '200': #eeeeee,\n      '300': #e0e0e0,\n      '400': #bdbdbd,\n      '500': #9e9e9e,\n      '600': #757575,\n      '700': #616161,\n      '800': #424242,\n      '900': #212121,\n      '1000': #000000\n    )\n  ),\n  'semantic': (\n    'background': (\n      'default': map-get(map-get($color-system, 'neutral'), '0'),\n      'surface': map-get(map-get($color-system, 'neutral'), '50'),\n      'card': map-get(map-get($color-system, 'neutral'), '0')\n    ),\n    'text': (\n      'primary': map-get(map-get($color-system, 'neutral'), '1000'),\n      'secondary': map-get(map-get($color-system, 'neutral'), '700'),\n      'tertiary': map-get(map-get($color-system, 'neutral'), '500'),\n      'disabled': map-get(map-get($color-system, 'neutral'), '400')\n    ),\n    'border': (\n      'default': map-get(map-get($color-system, 'neutral'), '300'),\n      'strong': map-get(map-get($color-system, 'neutral'), '500')\n    ),\n    'interactive': (\n      'default': map-get(map-get($color-system, 'primary'), '500'),\n      'hover': map-get(map-get($color-system, 'primary'), '600'),\n      'active': map-get(map-get($color-system, 'primary'), '700'),\n      'focus': map-get(map-get($color-system, 'primary'), '300')\n    )\n  )\n);\n\n// Typography System\n$typography-system: (\n  'scale': (\n    'display-1': (\n      'font-size': 3rem,\n      'line-height': 1.2,\n      'font-weight': 700,\n      'letter-spacing': -0.02em\n    ),\n    'display-2': (\n      'font-size': 2.5rem,\n      'line-height': 1.2,\n      'font-weight': 700,\n      'letter-spacing': -0.01em\n    ),\n    'heading-1': (\n      'font-size': 2rem,\n      'line-height': 1.3,\n      'font-weight': 600\n    ),\n    'heading-2': (\n      'font-size': 1.75rem,\n      'line-height': 1.3,\n      'font-weight': 600\n    ),\n    'heading-3': (\n      'font-size': 1.5rem,\n      'line-height': 1.4,\n      'font-weight': 600\n    ),\n    'body-large': (\n      'font-size': 1.125rem,\n      'line-height': 1.6,\n      'font-weight': 400\n    ),\n    'body-medium': (\n      'font-size': 1rem,\n      'line-height': 1.6,\n      'font-weight': 400\n    ),\n    'body-small': (\n      'font-size': 0.875rem,\n      'line-height': 1.5,\n      'font-weight': 400\n    ),\n    'caption': (\n      'font-size': 0.75rem,\n      'line-height': 1.4,\n      'font-weight': 400\n    )\n  ),\n  'family': (\n    'base': ('Inter', 'Roboto', 'Helvetica Neue', sans-serif),\n    'heading': ('Inter', 'Roboto', 'Helvetica Neue', sans-serif),\n    'monospace': ('SFMono-Regular', 'Consolas', 'Liberation Mono', monospace)\n  )\n);\n\n// Spacing System\n$spacing-system: (\n  'scale': (\n    'quark': 0.125rem,   // 2px\n    'atom': 0.25rem,     // 4px\n    'electron': 0.5rem,  // 8px\n    'nucleus': 0.75rem,  // 12px\n    'cell': 1rem,        // 16px\n    'organ': 1.5rem,     // 24px\n    'organism': 2rem,    // 32px\n    'system': 3rem,      // 48px\n    'ecosystem': 4rem,   // 64px\n    'universe': 6rem     // 96px\n  ),\n  'responsive': (\n    'mobile': (\n      'padding': map-get($spacing-system, 'scale', 'cell'),\n      'margin': map-get($spacing-system, 'scale', 'organ')\n    ),\n    'tablet': (\n      'padding': map-get($spacing-system, 'scale', 'organ'),\n      'margin': map-get($spacing-system, 'scale', 'organism')\n    ),\n    'desktop': (\n      'padding': map-get($spacing-system, 'scale', 'organism'),\n      'margin': map-get($spacing-system, 'scale', 'system')\n    )\n  )\n);\n\n// Advanced Functions for Design System Access\n@function design-token($system, $category, $key, $subkey: null) {\n  $token-map: map-get($#{$system}-system, $category);\n  \n  @if not $token-map {\n    @error \"System '#{$system}' category '#{$category}' not found\";\n  }\n  \n  $value: map-get($token-map, $key);\n  \n  @if not $value {\n    @error \"Token '#{$key}' not found in #{$system}.#{$category}\";\n  }\n  \n  @if $subkey and type-of($value) == 'map' {\n    $subvalue: map-get($value, $subkey);\n    @if not $subvalue {\n      @error \"Subtoken '#{$subkey}' not found in #{$system}.#{$category}.#{$key}\";\n    }\n    @return $subvalue;\n  }\n  \n  @return $value;\n}\n\n// Mixins for Design System Usage\n@mixin typography($style) {\n  $typography: design-token('typography', 'scale', $style);\n  \n  font-size: map-get($typography, 'font-size');\n  line-height: map-get($typography, 'line-height');\n  font-weight: map-get($typography, 'font-weight');\n  \n  @if map-has-key($typography, 'letter-spacing') {\n    letter-spacing: map-get($typography, 'letter-spacing');\n  }\n}\n\n@mixin color-scheme($scheme, $property, $key, $subkey: null) {\n  #{$property}: design-token('color', 'semantic', $scheme, $key);\n}\n\n// Component Implementation with Design System\n// components/_card.scss\n\n.card {\n  @include color-scheme('background', 'background-color', 'card');\n  border: 1px solid design-token('color', 'semantic', 'border', 'default');\n  border-radius: design-token('spacing', 'scale', 'electron');\n  box-shadow: 0 2px 8px rgba(design-token('color', 'semantic', 'text', 'primary'), 0.1);\n  overflow: hidden;\n  \n  &__header {\n    @include color-scheme('background', 'background-color', 'surface');\n    @include typography('heading-3');\n    padding: design-token('spacing', 'scale', 'organ') design-token('spacing', 'scale', 'organism');\n    border-bottom: 1px solid design-token('color', 'semantic', 'border', 'default');\n  }\n  \n  &__body {\n    @include typography('body-medium');\n    padding: design-token('spacing', 'scale', 'organism');\n    \n    p {\n      margin-bottom: design-token('spacing', 'scale', 'cell');\n      \n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n  }\n  \n  &__footer {\n    @include color-scheme('background', 'background-color', 'surface');\n    padding: design-token('spacing', 'scale', 'organ') design-token('spacing', 'scale', 'organism');\n    border-top: 1px solid design-token('color', 'semantic', 'border', 'default');\n    text-align: right;\n  }\n}\n\n// Design System Documentation Generation\n// This would typically be handled by a documentation tool\n// but here's how you might structure data for such a tool\n\n$design-system-documentation: (\n  'components': (\n    'card': (\n      'description': 'A container for grouping related content',\n      'variants': (\n        'default': 'Standard card with header, body, and footer',\n        'compact': 'Card with reduced padding for dense layouts',\n        'featured': 'Card with enhanced visual treatment for important content'\n      ),\n      'usage': 'Use cards to group related information together',\n      'accessibility': 'Cards should have proper heading hierarchy and focus states'\n    )\n  ),\n  'utilities': (\n    'typography': (\n      'description': 'Consistent typography scale for all text elements',\n      'scale': map-keys(map-get($typography-system, 'scale'))\n    )\n  )\n);",
      "explanation": "This example demonstrates comprehensive design system implementation with Sass including structured color systems with semantic naming, typography scales with detailed properties, spacing systems with scientific naming conventions, advanced functions for accessing design tokens, mixins for consistent component styling, and component implementation using the design system. These techniques enable maintainable, consistent design systems that scale across large applications.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Creating design systems that are too rigid and don't allow for customization",
        "solution": "Build flexible design systems with clear extension points and customization options while maintaining core consistency principles",
        "severity": "medium"
      },
      {
        "mistake": "Not properly documenting design system components and usage guidelines",
        "solution": "Create comprehensive documentation with usage examples, accessibility guidelines, and clear component APIs to ensure consistent adoption",
        "severity": "high"
      },
      {
        "mistake": "Ignoring the needs of different user contexts and device constraints",
        "solution": "Design responsive, accessible systems that work across different devices, user abilities, and cultural contexts",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Build a Comprehensive Design System with Sass",
        "description": "Create a complete design system with color palettes and semantic colors, typography scales with detailed properties, spacing systems with consistent naming, advanced functions for token access, mixins for component styling, and documented component implementations using the design system",
        "checkpoints": [
          "Implement structured color system with semantic naming and proper contrast ratios",
          "Create typography scale with detailed properties including font size, line height, and weight",
          "Build spacing system with consistent naming conventions and responsive variations",
          "Develop advanced functions and mixins for accessing and using design tokens",
          "Create documented component implementations using the design system"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 55,
    "difficulty": "Advanced",
    "tags": [
      "Design System",
      "Component Library",
      "Tokens",
      "Documentation",
      "Sass"
    ],
    "lastUpdated": "2025-10-03T00:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-advanced-lesson-15",
    "moduleSlug": "sass-advanced",
    "title": "Advanced Responsive Design Techniques with Sass",
    "order": 15,
    "objectives": [
      "Implement sophisticated responsive design patterns with Sass",
      "Utilize advanced media query management and breakpoint systems",
      "Create flexible grid systems with modern CSS layout techniques",
      "Optimize responsive designs for performance and accessibility"
    ],
    "intro": "Advanced responsive design techniques are essential for creating web experiences that work seamlessly across the vast array of devices, screen sizes, and user contexts in today's digital landscape. This comprehensive lesson explores sophisticated Sass patterns and techniques that enable the creation of truly responsive, adaptive user interfaces that provide optimal experiences for all users.\n\nYou'll learn to implement advanced media query management systems that provide clean, maintainable responsive code without the complexity of traditional CSS media queries. We'll explore sophisticated breakpoint systems that account for content needs rather than just device sizes, and techniques for creating component-based responsive designs that scale effectively.\n\nModern CSS layout techniques including CSS Grid and Flexbox integration with Sass enable powerful, flexible layout systems that adapt to any context. We'll cover advanced grid systems, responsive component patterns, and techniques for managing complex responsive states with Sass maps and functions.\n\nPerformance and accessibility are critical aspects of responsive design, so we'll explore optimization techniques for responsive images, font loading, and asset management, as well as accessibility considerations for responsive interfaces including keyboard navigation, screen reader support, and touch target sizing.\n\nBy mastering advanced responsive design techniques with Sass, you'll be able to create web experiences that provide consistent, high-quality interactions across all devices and contexts while maintaining clean, maintainable code. This knowledge is essential for frontend developers working on modern web applications with diverse user bases.",
    "code": {
      "example": "// Advanced Responsive Design Techniques\n\n// Sophisticated Breakpoint System\n// abstracts/_breakpoints.scss\n\n// Content-based breakpoint system\n$breakpoints: (\n  'mobile': 320px,\n  'mobile-large': 480px,\n  'tablet': 768px,\n  'tablet-large': 1024px,\n  'desktop': 1200px,\n  'desktop-large': 1440px,\n  'desktop-xlarge': 1920px\n);\n\n// Content-based naming for better maintainability\n$media-queries: (\n  'palm': '(max-width: #{map-get($breakpoints, 'tablet') - 1px})',\n  'lap': '(min-width: #{map-get($breakpoints, 'tablet')}) and (max-width: #{map-get($breakpoints, 'tablet-large') - 1px})',\n  'lap-and-up': '(min-width: #{map-get($breakpoints, 'tablet')})',\n  'portable': '(max-width: #{map-get($breakpoints, 'tablet-large') - 1px})',\n  'desk': '(min-width: #{map-get($breakpoints, 'tablet-large')})',\n  'desk-wide': '(min-width: #{map-get($breakpoints, 'desktop')})',\n  'retina': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n  'touch': '(hover: none) and (pointer: coarse)',\n  'mouse': '(hover: hover) and (pointer: fine)'\n);\n\n// Advanced Media Query Mixins\n@mixin respond-to($breakpoint) {\n  @if map-has-key($media-queries, $breakpoint) {\n    @media #{map-get($media-queries, $breakpoint)} {\n      @content;\n    }\n  } @else if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\n      @content;\n    }\n  } @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n         + \"Available breakpoints are: #{map-keys($breakpoints)}. \"\n         + \"Available media queries are: #{map-keys($media-queries)}.\";\n  }\n}\n\n// Advanced mixin for multiple breakpoints\n@mixin respond-between($lower, $upper) {\n  @media (min-width: map-get($breakpoints, $lower)) and (max-width: #{map-get($breakpoints, $upper) - 1px}) {\n    @content;\n  }\n}\n\n// Context-specific media queries\n@mixin respond-context($context) {\n  @if $context == 'touch' {\n    @media (hover: none) and (pointer: coarse) {\n      @content;\n    }\n  } @else if $context == 'mouse' {\n    @media (hover: hover) and (pointer: fine) {\n      @content;\n    }\n  } @else if $context == 'high-density' {\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n      @content;\n    }\n  }\n}\n\n// Modern Grid System with CSS Grid and Flexbox\n// layout/_grid.scss\n\n// CSS Grid-based grid system\n.grid {\n  display: grid;\n  gap: design-token('spacing', 'scale', 'organ');\n  \n  // Generate grid column classes\n  @for $i from 1 through 12 {\n    &--cols-#{$i} {\n      grid-template-columns: repeat($i, 1fr);\n    }\n  }\n  \n  // Responsive grid adjustments\n  @include respond-to('lap-and-up') {\n    gap: design-token('spacing', 'scale', 'organism');\n  }\n  \n  @include respond-to('desk') {\n    gap: design-token('spacing', 'scale', 'system');\n  }\n}\n\n.grid-item {\n  // Content-based responsive sizing\n  &--auto {\n    grid-column: auto;\n  }\n  \n  &--full {\n    grid-column: 1 / -1;\n  }\n  \n  &--main {\n    @include respond-to('desk') {\n      grid-column: span 8;\n    }\n  }\n  \n  &--sidebar {\n    @include respond-to('desk') {\n      grid-column: span 4;\n    }\n  }\n}\n\n// Flexbox-based responsive utilities\n.flex-container {\n  display: flex;\n  \n  &--column {\n    flex-direction: column;\n  }\n  \n  &--row {\n    flex-direction: row;\n  }\n  \n  &--wrap {\n    flex-wrap: wrap;\n  }\n  \n  &--center {\n    justify-content: center;\n    align-items: center;\n  }\n  \n  // Responsive flex adjustments\n  @include respond-to('portable') {\n    &--row-portable {\n      flex-direction: row;\n    }\n  }\n  \n  @include respond-to('desk') {\n    &--column-desk {\n      flex-direction: column;\n    }\n  }\n}\n\n// Advanced Component with Responsive Behavior\n// components/_navigation.scss\n\n.navigation {\n  @include typography('body-medium');\n  \n  // Mobile-first approach\n  &__toggle {\n    display: block;\n    background: none;\n    border: none;\n    padding: design-token('spacing', 'scale', 'electron');\n    cursor: pointer;\n    \n    @include respond-to('lap-and-up') {\n      display: none;\n    }\n  }\n  \n  &__menu {\n    display: none;\n    flex-direction: column;\n    \n    @include respond-to('lap-and-up') {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n    \n    // JavaScript-controlled mobile menu\n    &.is-open {\n      display: flex;\n      position: absolute;\n      top: 100%;\n      left: 0;\n      right: 0;\n      background: design-token('color', 'semantic', 'background', 'default');\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      z-index: 100;\n    }\n  }\n  \n  &__item {\n    &:not(:last-child) {\n      margin-bottom: design-token('spacing', 'scale', 'electron');\n      \n      @include respond-to('lap-and-up') {\n        margin-bottom: 0;\n        margin-right: design-token('spacing', 'scale', 'organ');\n      }\n    }\n  }\n  \n  &__link {\n    display: block;\n    padding: design-token('spacing', 'scale', 'electron') design-token('spacing', 'scale', 'cell');\n    text-decoration: none;\n    border-radius: design-token('spacing', 'scale', 'atom');\n    transition: background-color 0.2s ease;\n    \n    @include color-scheme('text', 'color', 'primary');\n    \n    @include respond-to('lap-and-up') {\n      padding: design-token('spacing', 'scale', 'electron') 0;\n    }\n    \n    &:hover,\n    &.is-active {\n      @include color-scheme('interactive', 'background-color', 'focus');\n      @include color-scheme('interactive', 'color', 'default');\n    }\n  }\n}\n\n// Responsive Image System\n// utilities/_images.scss\n\n.responsive-image {\n  max-width: 100%;\n  height: auto;\n  display: block;\n  \n  // Art direction with different images per breakpoint\n  &--hero {\n    @include respond-to('mobile') {\n      object-fit: cover;\n      height: 200px;\n    }\n    \n    @include respond-to('tablet') {\n      height: 300px;\n    }\n    \n    @include respond-to('desk') {\n      height: 400px;\n    }\n  }\n  \n  // Image density handling\n  &--retina {\n    @include respond-context('retina') {\n      // Higher resolution image would be specified in HTML\n      // This is just for styling adjustments if needed\n    }\n  }\n}\n\n// Container Query Preparation\n// Future-ready responsive components\n.component {\n  container-type: inline-size;\n  \n  &__content {\n    // Base styles\n    padding: design-token('spacing', 'scale', 'cell');\n    \n    // Container queries for component-level responsiveness\n    @container (min-width: 300px) {\n      padding: design-token('spacing', 'scale', 'organ');\n    }\n    \n    @container (min-width: 600px) {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: design-token('spacing', 'scale', 'organ');\n    }\n  }\n}\n\n// Accessibility-First Responsive Design\n// Ensure responsive designs work for all users\n\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 6px;\n  background: design-token('color', 'semantic', 'interactive', 'default');\n  color: design-token('color', 'semantic', 'interactive', 'contrast');\n  padding: design-token('spacing', 'scale', 'atom') design-token('spacing', 'scale', 'electron');\n  text-decoration: none;\n  border-radius: design-token('spacing', 'scale', 'atom');\n  \n  &:focus {\n    top: 6px;\n  }\n}\n\n// Touch target sizing for mobile\n.touch-target {\n  min-height: 44px; // Apple's recommended minimum\n  min-width: 44px;\n  \n  @include respond-context('mouse') {\n    min-height: auto;\n    min-width: auto;\n  }\n}",
      "explanation": "This example demonstrates advanced responsive design techniques including sophisticated breakpoint systems with content-based naming, advanced media query mixins for clean responsive code, modern grid systems with CSS Grid and Flexbox integration, responsive component patterns with mobile-first approaches, responsive image handling with art direction, container query preparation for future-ready components, and accessibility considerations for responsive designs including skip links and touch targets. These techniques enable truly responsive, accessible web experiences.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Creating device-specific breakpoints instead of content-based breakpoints",
        "solution": "Use content-based breakpoints that respond to layout needs rather than specific device dimensions, making designs more flexible and future-proof",
        "severity": "high"
      },
      {
        "mistake": "Not considering accessibility in responsive designs",
        "solution": "Ensure responsive designs maintain proper keyboard navigation, screen reader support, adequate touch targets, and clear focus states across all viewports",
        "severity": "high"
      },
      {
        "mistake": "Over-engineering responsive solutions with unnecessary complexity",
        "solution": "Start with simple, effective responsive patterns and add complexity only when needed, keeping code maintainable and performant",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Implement Advanced Responsive Design System with Sass",
        "description": "Create a sophisticated breakpoint system with content-based naming, implement advanced media query mixins, build modern grid systems with CSS Grid and Flexbox, create responsive navigation components with mobile-first approaches, implement responsive image handling with art direction, prepare components for container queries, and ensure accessibility in responsive designs",
        "checkpoints": [
          "Build sophisticated breakpoint system with content-based naming and context-specific queries",
          "Implement advanced media query mixins for clean, maintainable responsive code",
          "Create modern grid systems using CSS Grid and Flexbox with responsive adjustments",
          "Develop responsive navigation with mobile-first approach and JavaScript-enhanced behavior",
          "Implement responsive image handling with art direction and density considerations",
          "Prepare components for container queries and ensure accessibility in responsive designs"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 60,
    "difficulty": "Advanced",
    "tags": [
      "Responsive Design",
      "Media Queries",
      "Grid Systems",
      "Mobile-First",
      "Accessibility",
      "Sass"
    ],
    "lastUpdated": "2025-10-03T00:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "sass-lesson-16-theming-customization",
    "moduleSlug": "sass-advanced",
    "title": "Theming and Customization Strategies",
    "order": 16,
    "objectives": [
      "Master advanced theming techniques with Sass maps and functions",
      "Implement customizable design systems with CSS custom properties",
      "Create flexible component themes with dynamic token systems",
      "Develop theme switching mechanisms for light/dark modes"
    ],
    "intro": "Theming and customization are critical aspects of modern design systems that allow for flexible, maintainable, and scalable user interfaces. This comprehensive lesson explores advanced Sass techniques for creating robust theming systems that can adapt to different brand requirements, user preferences, and accessibility needs.\n\nYou'll learn to implement sophisticated theme architectures using Sass maps, functions, and mixins that enable seamless theme switching and customization. We'll explore how to combine Sass variables with CSS custom properties to create hybrid theming systems that offer both compile-time and runtime flexibility.\n\nThe lesson covers practical implementation patterns for managing color palettes, typography scales, spacing systems, and component variations. You'll discover how to create themeable components that can adapt to different contexts while maintaining consistent design language.\n\nBy mastering these theming strategies, you'll be able to build design systems that scale across multiple products, brands, and user preferences while maintaining code quality and developer experience.",
    "code": {
      "example": "// Advanced Theme System with Sass Maps and CSS Custom Properties\n\n// Theme token definitions\n$themes: (\n  light: (\n    colors: (\n      primary: (\n        base: #007bff,\n        light: #3395ff,\n        dark: #0062cc,\n        contrast: #ffffff\n      ),\n      secondary: (\n        base: #6c757d,\n        light: #868e96,\n        dark: #545b62,\n        contrast: #ffffff\n      ),\n      background: (\n        page: #ffffff,\n        surface: #f8f9fa,\n        overlay: #ffffff\n      ),\n      text: (\n        primary: #212529,\n        secondary: #6c757d,\n        disabled: #adb5bd\n      )\n    ),\n    typography: (\n      font-family: ('Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif),\n      font-sizes: (\n        xs: 0.75rem,\n        sm: 0.875rem,\n        base: 1rem,\n        lg: 1.125rem,\n        xl: 1.25rem,\n        '2xl': 1.5rem,\n        '3xl': 1.875rem\n      ),\n      font-weights: (\n        normal: 400,\n        medium: 500,\n        semibold: 600,\n        bold: 700\n      )\n    ),\n    shadows: (\n      sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05),\n      base: 0 1px 3px 0 rgba(0, 0, 0, 0.1),\n      md: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n      lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\n      xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1)\n    )\n  ),\n  dark: (\n    colors: (\n      primary: (\n        base: #0d6efd,\n        light: #3d8bfd,\n        dark: #0a58ca,\n        contrast: #ffffff\n      ),\n      secondary: (\n        base: #6c757d,\n        light: #7c858d,\n        dark: #5c636a,\n        contrast: #ffffff\n      ),\n      background: (\n        page: #121212,\n        surface: #1e1e1e,\n        overlay: #2d2d2d\n      ),\n      text: (\n        primary: #e9ecef,\n        secondary: #adb5bd,\n        disabled: #6c757d\n      )\n    ),\n    typography: (\n      font-family: ('Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif),\n      font-sizes: (\n        xs: 0.75rem,\n        sm: 0.875rem,\n        base: 1rem,\n        lg: 1.125rem,\n        xl: 1.25rem,\n        '2xl': 1.5rem,\n        '3xl': 1.875rem\n      ),\n      font-weights: (\n        normal: 400,\n        medium: 500,\n        semibold: 600,\n        bold: 700\n      )\n    ),\n    shadows: (\n      sm: 0 1px 2px 0 rgba(0, 0, 0, 0.3),\n      base: 0 1px 3px 0 rgba(0, 0, 0, 0.4),\n      md: 0 4px 6px -1px rgba(0, 0, 0, 0.4),\n      lg: 0 10px 15px -3px rgba(0, 0, 0, 0.4),\n      xl: 0 20px 25px -5px rgba(0, 0, 0, 0.4)\n    )\n  )\n);\n\n// Theme utility functions\n@function theme-get($keys...) {\n  $value: $themes;\n  \n  @each $key in $keys {\n    @if type-of($value) == 'map' and map-has-key($value, $key) {\n      $value: map-get($value, $key);\n    } @else {\n      @return null;\n    }\n  }\n  \n  @return $value;\n}\n\n@function theme-color($color-name, $tone: base, $theme: light) {\n  @return theme-get($theme, colors, $color-name, $tone);\n}\n\n@function theme-font-size($size-name) {\n  @return theme-get(light, typography, font-sizes, $size-name);\n}\n\n@function theme-shadow($shadow-name) {\n  @return theme-get(light, shadows, $shadow-name);\n}\n\n// Generate CSS custom properties for runtime theming\n@mixin generate-theme-variables($theme-name) {\n  $theme: map-get($themes, $theme-name);\n  $colors: map-get($theme, colors);\n  $typography: map-get($theme, typography);\n  $shadows: map-get($theme, shadows);\n  \n  // Generate color variables\n  @each $color-name, $color-map in $colors {\n    @each $tone-name, $tone-value in $color-map {\n      --color-#{$color-name}-#{$tone-name}: #{$tone-value};\n    }\n  }\n  \n  // Generate typography variables\n  $font-sizes: map-get($typography, font-sizes);\n  $font-weights: map-get($typography, font-weights);\n  \n  @each $size-name, $size-value in $font-sizes {\n    --font-size-#{$size-name}: #{$size-value};\n  }\n  \n  @each $weight-name, $weight-value in $font-weights {\n    --font-weight-#{$weight-name}: #{$weight-value};\n  }\n  \n  // Generate shadow variables\n  @each $shadow-name, $shadow-value in $shadows {\n    --shadow-#{$shadow-name}: #{$shadow-value};\n  }\n}\n\n// Theme root classes\n[data-theme=\"light\"] {\n  @include generate-theme-variables(light);\n}\n\n[data-theme=\"dark\"] {\n  @include generate-theme-variables(dark);\n}\n\n// Component theming example\n.button {\n  // Base styles using CSS custom properties\n  background-color: var(--color-primary-base);\n  color: var(--color-primary-contrast);\n  border: none;\n  border-radius: 4px;\n  padding: 0.5rem 1rem;\n  font-size: var(--font-size-base);\n  font-weight: var(--font-weight-medium);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  // Sass fallbacks for older browsers\n  background-color: theme-color(primary, base, light);\n  color: theme-color(primary, contrast, light);\n  \n  &:hover {\n    background-color: var(--color-primary-dark);\n    box-shadow: var(--shadow-md);\n    \n    // Sass fallback\n    background-color: theme-color(primary, dark, light);\n  }\n  \n  // Variant modifiers\n  &--secondary {\n    background-color: var(--color-secondary-base);\n    color: var(--color-secondary-contrast);\n    \n    // Sass fallback\n    background-color: theme-color(secondary, base, light);\n    color: theme-color(secondary, contrast, light);\n    \n    &:hover {\n      background-color: var(--color-secondary-dark);\n      \n      // Sass fallback\n      background-color: theme-color(secondary, dark, light);\n    }\n  }\n  \n  // Size modifiers\n  &--small {\n    padding: 0.25rem 0.75rem;\n    font-size: var(--font-size-sm);\n  }\n  \n  &--large {\n    padding: 0.75rem 1.5rem;\n    font-size: var(--font-size-lg);\n  }\n}\n\n// Theme switching JavaScript\n/*\nconst themeToggle = document.getElementById('theme-toggle');\nconst currentTheme = localStorage.getItem('theme') || 'light';\n\ndocument.documentElement.setAttribute('data-theme', currentTheme);\n\nthemeToggle.addEventListener('click', () => {\n  const current = document.documentElement.getAttribute('data-theme');\n  const next = current === 'light' ? 'dark' : 'light';\n  \n  document.documentElement.setAttribute('data-theme', next);\n  localStorage.setItem('theme', next);\n});\n*/",
      "explanation": "This example demonstrates a comprehensive theming system that combines Sass maps and functions with CSS custom properties. The system provides both compile-time flexibility through Sass and runtime customization through CSS variables. Key features include:\n\n1. Nested theme maps for organizing design tokens\n2. Utility functions for accessing theme values\n3. Mixins for generating CSS custom properties\n4. Component examples with theme-aware styling\n5. JavaScript for theme switching\n\nThe implementation allows for seamless theme switching while maintaining performance through Sass compilation and providing runtime flexibility through CSS variables.",
      "language": "scss"
    },
    "pitfalls": [
      {
        "mistake": "Overcomplicating theme structures with too many nested maps",
        "solution": "Keep theme structures flat and organized by category, use clear naming conventions",
        "severity": "medium"
      },
      {
        "mistake": "Not providing fallbacks for older browsers that don't support CSS custom properties",
        "solution": "Use Sass variables as fallbacks and implement feature detection",
        "severity": "high"
      },
      {
        "mistake": "Hardcoding theme values in components instead of using the theme system",
        "solution": "Always reference theme tokens through the established system",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Build a Comprehensive Theme System",
        "description": "Create a complete theme system for a design system with multiple color palettes, typography scales, and spacing systems",
        "checkpoints": [
          "Define theme tokens using Sass maps for light and dark themes",
          "Implement utility functions for accessing theme values",
          "Create mixins for generating CSS custom properties",
          "Build themeable components with proper fallbacks",
          "Implement theme switching with localStorage persistence"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 45,
    "difficulty": "Advanced",
    "tags": [
      "Theming",
      "Customization",
      "Design Systems",
      "Sass Maps",
      "CSS Custom Properties",
      "Accessibility"
    ],
    "lastUpdated": "2025-10-03T10:00:00Z",
    "version": "1.0.0"
  }
]
