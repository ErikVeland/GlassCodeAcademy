{
  "moduleSlug": "dotnet-fundamentals",
  "title": ".NET Fundamentals Assessment",
  "description": "Comprehensive assessment covering key concepts from the .NET Fundamentals module",
  "totalQuestions": 45,
  "passingScore": 70,
  "timeLimit": 30,
  "questions": [
    {
      "id": 3,
      "question": "What is the primary difference between .NET Framework and modern .NET (Core)?",
      "topic": ".NET Platform",
      "difficulty": "Beginner",
      "choices": [
        "Modern .NET is cross-platform and open-source, while .NET Framework is Windows-only",
        "Modern .NET is only for web applications, while .NET Framework supports all application types",
        "There is no difference - they are the same platform with different names",
        ".NET Framework is newer and has better performance than modern .NET"
      ],
      "correctIndex": 0,
      "explanation": "Modern .NET (formerly .NET Core) is cross-platform and open-source, running on Windows, macOS, and Linux. .NET Framework is Windows-only and in maintenance mode. Modern .NET also has better performance and is the focus of ongoing development.",
      "industryContext": "Understanding the evolution of .NET platforms is crucial for making informed decisions about technology stacks in enterprise applications. Modern .NET development focuses on cross-platform capabilities and cloud-native development.",
      "tags": [
        "beginner",
        ".net",
        "platforms"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 4,
      "question": "Which keyword is used to declare an immutable variable in C#?",
      "topic": "C# Fundamentals",
      "difficulty": "Beginner",
      "choices": [
        "const",
        "readonly",
        "static",
        "final"
      ],
      "correctIndex": 0,
      "explanation": "The 'const' keyword is used to declare compile-time constants in C#. These values must be assigned at declaration and cannot be changed. Constants are implicitly static and their values are embedded directly into the IL code.",
      "industryContext": "Constants are essential for defining values that should never change throughout the application lifecycle, such as mathematical constants, configuration values, or API endpoints.",
      "tags": [
        "beginner",
        "csharp",
        "variables"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 5,
      "question": "What is the correct way to declare a nullable integer in C#?",
      "topic": "Data Types",
      "difficulty": "Beginner",
      "choices": [
        "int?",
        "int!",
        "nullable<int>",
        "int*"
      ],
      "correctIndex": 0,
      "explanation": "int? is the shorthand syntax for Nullable<int>, which allows value types to hold null values. This is particularly useful when working with databases or APIs that may return null values for numeric fields.",
      "industryContext": "Nullable types are essential when working with databases, web APIs, and scenarios where the absence of a value is meaningful. They help prevent runtime exceptions and make code more robust.",
      "tags": [
        "beginner",
        "csharp",
        "datatypes"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 8,
      "question": "Which access modifier makes a member accessible only within the same class?",
      "topic": "Object-Oriented Programming",
      "difficulty": "Beginner",
      "choices": [
        "private",
        "protected",
        "internal",
        "public"
      ],
      "correctIndex": 0,
      "explanation": "The 'private' access modifier restricts access to the member only within the same class where it's declared. This is the most restrictive access level and is the default for class members if no modifier is specified.",
      "industryContext": "Proper use of access modifiers is fundamental to encapsulation, which is a core principle of object-oriented programming. Encapsulation helps maintain data integrity and reduces coupling between components.",
      "tags": [
        "beginner",
        "oop",
        "access-modifiers"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 9,
      "question": "What does the 'virtual' keyword indicate in C#?",
      "topic": "Object-Oriented Programming",
      "difficulty": "Intermediate",
      "choices": [
        "The method can be overridden in derived classes",
        "The method cannot be overridden",
        "The method is static",
        "The method is abstract"
      ],
      "correctIndex": 0,
      "explanation": "The 'virtual' keyword allows a method to be overridden in derived classes using the 'override' keyword, enabling polymorphism. This is a key feature of object-oriented programming that allows derived classes to provide specific implementations of base class methods.",
      "industryContext": "Polymorphism through virtual methods is essential for creating flexible and extensible code architectures. It allows frameworks and libraries to provide default behavior while enabling customization through inheritance.",
      "tags": [
        "intermediate",
        "oop",
        "polymorphism"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 10,
      "question": "Which LINQ method would you use to filter a collection based on a condition?",
      "topic": "LINQ",
      "difficulty": "Intermediate",
      "choices": [
        "Where",
        "Select",
        "OrderBy",
        "GroupBy"
      ],
      "correctIndex": 0,
      "explanation": "The 'Where' method is used to filter collections based on a specified condition, returning only elements that match the criteria. It's one of the most commonly used LINQ methods for data filtering operations.",
      "industryContext": "LINQ (Language Integrated Query) is a powerful feature in C# that allows developers to query collections using SQL-like syntax. Filtering data is one of the most common operations in data processing applications.",
      "tags": [
        "intermediate",
        "linq",
        "data-processing"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 11,
      "question": "What is the primary purpose of the 'using' statement in C#?",
      "topic": "Resource Management",
      "difficulty": "Beginner",
      "choices": [
        "Ensures proper disposal of IDisposable objects",
        "Imports namespaces",
        "Creates aliases for types",
        "Defines code regions"
      ],
      "correctIndex": 0,
      "explanation": "The 'using' statement ensures that IDisposable objects are properly disposed of when they go out of scope, even if an exception occurs. This is crucial for managing resources like file handles, database connections, and network streams.",
      "industryContext": "Proper resource management is critical for application performance and stability. Failure to dispose of resources properly can lead to memory leaks, file locking issues, and database connection pool exhaustion.",
      "tags": [
        "beginner",
        "resources",
        "idisposable"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 13,
      "question": "Which keyword is used to prevent inheritance of a class in C#?",
      "topic": "Object-Oriented Programming",
      "difficulty": "Beginner",
      "choices": [
        "sealed",
        "final",
        "static",
        "abstract"
      ],
      "correctIndex": 0,
      "explanation": "The 'sealed' keyword prevents a class from being inherited by other classes, making it the final class in the inheritance hierarchy. This is useful when you want to ensure that a class cannot be extended, which can be important for security or design reasons.",
      "industryContext": "Sealing classes is an important design decision that affects the extensibility of your code. It's commonly used in framework development to prevent unintended inheritance that could break functionality or security assumptions.",
      "tags": [
        "beginner",
        "oop",
        "inheritance"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 14,
      "question": "What is the difference between IEnumerable and IQueryable?",
      "topic": "LINQ",
      "difficulty": "Intermediate",
      "choices": [
        "IEnumerable executes queries in-memory while IQueryable can translate queries to other formats like SQL",
        "IEnumerable is for databases while IQueryable is for collections",
        "IEnumerable is faster than IQueryable",
        "There is no difference, they are interchangeable"
      ],
      "correctIndex": 0,
      "explanation": "IEnumerable is for in-memory collections and executes queries locally, while IQueryable is designed for remote data sources and can translate queries to other formats like SQL. This makes IQueryable more efficient for database queries as filtering happens on the database server.",
      "industryContext": "Understanding the difference between IEnumerable and IQueryable is crucial for performance optimization when working with Entity Framework and other ORM tools. Using the wrong interface can result in retrieving entire tables into memory.",
      "tags": [
        "intermediate",
        "linq",
        "performance"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 75,
      "correctAnswer": 0
    },
    {
      "id": 15,
      "question": "In async programming, what does 'await' do?",
      "topic": "Asynchronous Programming",
      "difficulty": "Intermediate",
      "choices": [
        "Asynchronously waits for a task to complete without blocking the calling thread",
        "Blocks the calling thread until the task completes",
        "Cancels the current task",
        "Creates a new thread to execute the task"
      ],
      "correctIndex": 0,
      "explanation": "'await' asynchronously waits for the task to complete, returning control to the caller and resuming execution when the task finishes, without blocking the thread. This enables responsive UI applications and efficient resource utilization in server applications.",
      "industryContext": "Asynchronous programming is essential for building responsive user interfaces and scalable server applications. Proper use of async/await prevents thread pool starvation and improves application throughput.",
      "tags": [
        "intermediate",
        "async",
        "performance"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 16,
      "question": "What is the purpose of the 'yield' keyword in C#?",
      "topic": "Collections",
      "difficulty": "Intermediate",
      "choices": [
        "To create iterator methods that return sequences lazily",
        "To break out of a loop",
        "To return a value from a method",
        "To skip to the next iteration of a loop"
      ],
      "correctIndex": 0,
      "explanation": "The 'yield' keyword is used to create iterator methods that return IEnumerable or IEnumerator, allowing lazy evaluation of sequences. This means elements are generated on-demand rather than all at once, which can be more memory-efficient for large datasets.",
      "industryContext": "Iterator methods with 'yield' are commonly used in data processing pipelines, custom collections, and scenarios where memory efficiency is important. They enable the creation of fluent APIs and reactive programming patterns.",
      "tags": [
        "intermediate",
        "collections",
        "iterators"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 75,
      "correctAnswer": 0
    },
    {
      "id": 17,
      "question": "Which design pattern is commonly implemented by dependency injection containers?",
      "topic": "Design Patterns",
      "difficulty": "Intermediate",
      "choices": [
        "Inversion of Control",
        "Singleton",
        "Factory",
        "Observer"
      ],
      "correctIndex": 0,
      "explanation": "IoC (Inversion of Control) containers implement the Inversion of Control principle for dependency injection, managing object creation and dependency resolution automatically. This decouples components and makes code more testable and maintainable.",
      "industryContext": "Dependency injection and Inversion of Control are fundamental patterns in modern software development. They enable loose coupling, improve testability, and support the SOLID principles of object-oriented design.",
      "tags": [
        "intermediate",
        "patterns",
        "di"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 18,
      "question": "What is the difference between 'ref' and 'out' parameters?",
      "topic": "Methods",
      "difficulty": "Intermediate",
      "choices": [
        "'ref' parameters must be initialized before passing, 'out' parameters don't need initialization but must be assigned within the method",
        "'out' parameters must be initialized before passing, 'ref' parameters don't need initialization",
        "There is no difference, they are interchangeable",
        "'ref' parameters are for value types, 'out' parameters are for reference types"
      ],
      "correctIndex": 0,
      "explanation": "'ref' parameters must be initialized before being passed to a method, while 'out' parameters are considered unassigned and must be assigned a value within the method before it returns. Both allow methods to return multiple values.",
      "industryContext": "Understanding parameter passing mechanisms is important for performance optimization and API design. While ref and out parameters are still used, modern C# favors tuples and out variables for returning multiple values.",
      "tags": [
        "intermediate",
        "methods",
        "parameters"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 75,
      "correctAnswer": 0
    },
    {
      "id": 19,
      "question": "Which collection type provides the best performance for frequent insertions and deletions at arbitrary positions?",
      "topic": "Collections",
      "difficulty": "Advanced",
      "choices": [
        "LinkedList<T>",
        "List<T>",
        "Array",
        "Dictionary<TKey, TValue>"
      ],
      "correctIndex": 0,
      "explanation": "LinkedList<T> provides O(1) insertion and deletion at arbitrary positions when you have a reference to the node, unlike List<T> which requires O(n) for insertions/deletions in the middle due to element shifting.",
      "industryContext": "Choosing the right collection type is crucial for performance-critical applications. Understanding the time complexity of operations helps developers make informed decisions about data structures for specific use cases.",
      "tags": [
        "advanced",
        "collections",
        "performance"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "correctAnswer": 0
    },
    {
      "id": 20,
      "question": "What is the purpose of the 'ConfigureAwait(false)' method?",
      "topic": "Asynchronous Programming",
      "difficulty": "Intermediate",
      "choices": [
        "Prevents capturing the current synchronization context to avoid deadlocks",
        "Configures the task to run on a specific thread",
        "Cancels the current task",
        "Forces the task to complete synchronously"
      ],
      "correctIndex": 0,
      "explanation": "ConfigureAwait(false) prevents capturing the current synchronization context, which can help avoid deadlocks in library code and improve performance by allowing continuations to run on any thread pool thread.",
      "industryContext": "ConfigureAwait is essential for library developers to prevent deadlocks when calling async methods from contexts with synchronization constraints. It's less critical in application code that uses async/await throughout.",
      "tags": [
        "intermediate",
        "async",
        "deadlocks"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 75,
      "correctAnswer": 0
    },
    {
      "id": 21,
      "question": "Which attribute is used to specify that a property should be serialized with a different name in JSON?",
      "topic": "Serialization",
      "difficulty": "Intermediate",
      "choices": [
        "[JsonPropertyName]",
        "[JsonConverter]",
        "[JsonIgnore]",
        "[JsonProperty]"
      ],
      "correctIndex": 0,
      "explanation": "In System.Text.Json, [JsonPropertyName] is used to specify a different property name during JSON serialization/deserialization. This is useful when you need to match external APIs or follow different naming conventions than those used in your C# code.",
      "industryContext": "JSON serialization attributes are essential when working with REST APIs, microservices, and external systems. Proper use of serialization attributes ensures data compatibility and clean API contracts.",
      "tags": [
        "intermediate",
        "serialization",
        "json"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 22,
      "question": "What is the difference between 'var' and 'dynamic' in C#?",
      "topic": "Variables",
      "difficulty": "Intermediate",
      "choices": [
        "'var' uses compile-time type inference while 'dynamic' defers type checking to runtime",
        "'dynamic' uses compile-time type inference while 'var' defers type checking to runtime",
        "There is no difference, they are interchangeable",
        "'var' is for value types while 'dynamic' is for reference types"
      ],
      "correctIndex": 0,
      "explanation": "'var' uses compile-time type inference where the type is determined at compile time, while 'dynamic' defers type checking to runtime. This means 'dynamic' can lead to runtime exceptions if methods or properties don't exist.",
      "industryContext": "Understanding when to use 'var' vs 'dynamic' is important for code maintainability and performance. 'var' provides type safety while 'dynamic' should be used sparingly, typically when working with dynamic data structures or COM interop.",
      "tags": [
        "intermediate",
        "variables",
        "types"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 75,
      "correctAnswer": 0
    },
    {
      "id": 23,
      "question": "Which method is called when an object is about to be garbage collected?",
      "topic": "Memory Management",
      "difficulty": "Intermediate",
      "choices": [
        "Finalize()",
        "Dispose()",
        "Close()",
        "Destroy()"
      ],
      "correctIndex": 0,
      "explanation": "The Finalize() method (implemented via destructor syntax ~ClassName()) is called by the garbage collector before an object is collected. However, relying on finalizers is generally discouraged in favor of implementing IDisposable for deterministic resource cleanup.",
      "industryContext": "Understanding the .NET garbage collection lifecycle is important for memory management and resource cleanup. Proper implementation of IDisposable is preferred over finalizers for deterministic resource management.",
      "tags": [
        "intermediate",
        "memory",
        "gc"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 24,
      "question": "What is the purpose of the 'lock' statement in C#?",
      "topic": "Threading",
      "difficulty": "Intermediate",
      "choices": [
        "To provide mutual exclusion and prevent race conditions in multithreaded code",
        "To improve application performance",
        "To serialize object state",
        "To prevent memory leaks"
      ],
      "correctIndex": 0,
      "explanation": "The 'lock' statement provides mutual exclusion, ensuring that only one thread can execute the locked code block at a time, preventing race conditions. It's essential for thread-safe operations on shared resources.",
      "industryContext": "Thread synchronization is critical in multi-threaded applications, web servers, and parallel processing scenarios. Proper use of locking mechanisms prevents data corruption and ensures application reliability.",
      "tags": [
        "intermediate",
        "threading",
        "concurrency"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 25,
      "question": "Which interface should a class implement to support the 'foreach' loop?",
      "topic": "Collections",
      "difficulty": "Beginner",
      "choices": [
        "IEnumerable",
        "ICollection",
        "IList",
        "IDictionary"
      ],
      "correctIndex": 0,
      "explanation": "A class must implement IEnumerable (or IEnumerable<T>) to support iteration with foreach loops, providing the GetEnumerator() method. This is the foundation for making custom collections work with standard C# iteration syntax.",
      "industryContext": "Implementing IEnumerable is fundamental for creating custom collections that integrate seamlessly with LINQ and standard C# iteration patterns. It's a key part of the .NET collection framework design.",
      "tags": [
        "beginner",
        "collections",
        "iterators"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 26,
      "question": "What is the primary benefit of using Entity Framework in .NET applications?",
      "topic": "Entity Framework",
      "difficulty": "Beginner",
      "choices": [
        "It provides an Object-Relational Mapping (ORM) layer for database operations",
        "It improves application security",
        "It makes applications run faster",
        "It reduces memory usage"
      ],
      "correctIndex": 0,
      "explanation": "Entity Framework is an Object-Relational Mapping (ORM) framework that allows developers to work with databases using .NET objects instead of writing raw SQL queries, increasing productivity and maintainability.",
      "industryContext": "Entity Framework is widely used in enterprise .NET applications for data access, making database operations more intuitive and maintainable. It abstracts database interactions and enables LINQ-based queries.",
      "tags": [
        "beginner",
        "ef",
        "orm"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 27,
      "question": "Which C# feature allows you to define a method that can be called with a variable number of arguments?",
      "topic": "Methods",
      "difficulty": "Intermediate",
      "choices": [
        "params",
        "optional parameters",
        "method overloading",
        "extension methods"
      ],
      "correctIndex": 0,
      "explanation": "The 'params' keyword allows you to specify a method parameter that takes a variable number of arguments. The parameter must be a single-dimensional array and must be the last parameter in the method signature.",
      "industryContext": "The params keyword is commonly used in utility methods, logging functions, and APIs that need to accept flexible argument lists. It provides a clean syntax for methods that can work with varying numbers of inputs.",
      "tags": [
        "intermediate",
        "methods",
        "parameters"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 28,
      "question": "What is the purpose of the 'async' keyword in C# method declarations?",
      "topic": "Asynchronous Programming",
      "difficulty": "Beginner",
      "choices": [
        "To indicate that a method contains await expressions and returns a Task",
        "To make the method run faster",
        "To enable parallel execution",
        "To mark the method as a background thread"
      ],
      "correctIndex": 0,
      "explanation": "The 'async' keyword indicates that a method contains await expressions and returns a Task or Task<T>. It enables the method to be awaited by other code and is required when using await expressions within the method.",
      "industryContext": "The async/await pattern is fundamental to modern .NET development, enabling responsive UIs and scalable server applications. Proper use of async methods prevents blocking and improves application performance.",
      "tags": [
        "beginner",
        "async",
        "tasks"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 29,
      "question": "Which statement about value types and reference types is correct?",
      "topic": "Data Types",
      "difficulty": "Intermediate",
      "choices": [
        "Value types are stored on the stack and contain their data directly, while reference types are stored on the heap and contain references to data",
        "Value types are stored on the heap and contain references to data, while reference types are stored on the stack and contain their data directly",
        "Both value types and reference types are stored on the heap",
        "Both value types and reference types are stored on the stack"
      ],
      "correctIndex": 0,
      "explanation": "Value types (like int, bool, struct) are typically stored on the stack and contain their data directly, while reference types (like classes, arrays) are stored on the heap and variables contain references to the actual data. This affects performance and memory management.",
      "industryContext": "Understanding memory allocation differences between value and reference types is crucial for performance optimization and avoiding common pitfalls like unintended mutations in reference types.",
      "tags": [
        "intermediate",
        "datatypes",
        "memory"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 75,
      "correctAnswer": 0
    },
    {
      "id": 30,
      "question": "What is the primary purpose of the 'using' directive in C#?",
      "topic": "Namespaces",
      "difficulty": "Beginner",
      "choices": [
        "To import namespaces and avoid fully qualified type names",
        "To dispose of resources",
        "To define code regions",
        "To create aliases for assemblies"
      ],
      "correctIndex": 0,
      "explanation": "The 'using' directive imports namespaces, allowing you to use types without fully qualified names. This improves code readability and reduces verbosity when working with types from other namespaces.",
      "industryContext": "Proper namespace management through using directives is essential for code organization and readability. It's a fundamental aspect of C# development that affects code maintainability.",
      "tags": [
        "beginner",
        "namespaces",
        "organization"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 30,
      "correctAnswer": 0
    },
    {
      "id": 31,
      "question": "Which HTTP verb should be used for updating a resource in a RESTful API?",
      "topic": "Web APIs",
      "difficulty": "Beginner",
      "choices": [
        "PUT",
        "POST",
        "GET",
        "DELETE"
      ],
      "correctIndex": 0,
      "explanation": "PUT is used for updating or replacing an entire resource in RESTful APIs. It's idempotent, meaning making the same request multiple times should have the same effect as making it once.",
      "industryContext": "Following REST conventions with proper HTTP verbs is essential for creating predictable and intuitive APIs. PUT for updates, POST for creation, GET for retrieval, and DELETE for removal are standard practices.",
      "tags": [
        "beginner",
        "rest",
        "http"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 32,
      "question": "What is the purpose of middleware in ASP.NET Core?",
      "topic": "ASP.NET Core",
      "difficulty": "Intermediate",
      "choices": [
        "To handle requests and responses in the application pipeline",
        "To manage database connections",
        "To provide user authentication",
        "To generate HTML views"
      ],
      "correctIndex": 0,
      "explanation": "Middleware components form a pipeline that handles HTTP requests and responses in ASP.NET Core applications. Each middleware can examine, modify, or short-circuit the request before passing it to the next component.",
      "industryContext": "Middleware is a core concept in ASP.NET Core that enables modular and flexible request processing. Understanding middleware is crucial for implementing cross-cutting concerns like logging, authentication, and error handling.",
      "tags": [
        "intermediate",
        "aspnet",
        "middleware"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 33,
      "question": "Which service lifetime should you use for a service that should be created once per HTTP request?",
      "topic": "Dependency Injection",
      "difficulty": "Intermediate",
      "choices": [
        "Scoped",
        "Transient",
        "Singleton",
        "Request"
      ],
      "correctIndex": 0,
      "explanation": "Scoped services are created once per HTTP request (or service scope) and are shared within that scope. This is ideal for services that should maintain state within a request but not across requests.",
      "industryContext": "Choosing the correct service lifetime is crucial for application performance and correctness. Scoped services are perfect for services like Entity Framework DbContext that should be shared within a request but not across requests.",
      "tags": [
        "intermediate",
        "di",
        "lifetimes"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 34,
      "question": "What does the [ApiController] attribute provide in ASP.NET Core?",
      "topic": "Web APIs",
      "difficulty": "Intermediate",
      "choices": [
        "Automatic HTTP 400 responses for validation errors and other conveniences",
        "Built-in user authentication",
        "Automatic database connection management",
        "Automatic HTML generation"
      ],
      "correctIndex": 0,
      "explanation": "The [ApiController] attribute provides several convenience features for building APIs, including automatic HTTP 400 responses for validation errors, automatic model state validation, and inferred parameter binding sources.",
      "industryContext": "The [ApiController] attribute streamlines API development by providing conventions that reduce boilerplate code. It's a key feature for building modern, clean Web APIs in ASP.NET Core.",
      "tags": [
        "intermediate",
        "aspnet",
        "api"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 35,
      "question": "Which method in Entity Framework Core executes a query and returns results?",
      "topic": "Entity Framework",
      "difficulty": "Beginner",
      "choices": [
        "ToList()",
        "Where()",
        "Select()",
        "OrderBy()"
      ],
      "correctIndex": 0,
      "explanation": "ToList() executes the query and returns the results as a List<T>. Methods like Where(), Select(), and OrderBy() are deferred execution methods that build up the query expression but don't execute it until a method like ToList() is called.",
      "industryContext": "Understanding deferred execution in Entity Framework is crucial for performance optimization. Calling ToList() or similar methods triggers query execution and should be done thoughtfully to avoid retrieving unnecessary data.",
      "tags": [
        "beginner",
        "ef",
        "linq"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 36,
      "question": "What is the purpose of the 'ConfigureServices' method in ASP.NET Core?",
      "topic": "ASP.NET Core",
      "difficulty": "Intermediate",
      "choices": [
        "To register services with the dependency injection container",
        "To configure the HTTP request pipeline",
        "To set up routing",
        "To configure middleware"
      ],
      "correctIndex": 0,
      "explanation": "The 'ConfigureServices' method (in older versions) or the 'builder.Services' property in Program.cs is used to register services with the dependency injection container. This is where you add services like Entity Framework DbContext, custom services, and configure options.",
      "industryContext": "Service registration is a fundamental part of ASP.NET Core application setup. Understanding how to properly configure services is essential for building maintainable and testable applications.",
      "tags": [
        "intermediate",
        "aspnet",
        "di"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 37,
      "question": "Which testing framework is most commonly used for .NET unit testing?",
      "topic": "Testing",
      "difficulty": "Beginner",
      "choices": [
        "xUnit",
        "NUnit",
        "MSTest",
        "JUnit"
      ],
      "correctIndex": 0,
      "explanation": "xUnit is the most popular testing framework for .NET, especially for new projects. It's designed specifically for .NET and offers modern features like parameterized tests, test fixtures, and extensibility.",
      "industryContext": "xUnit has become the de facto standard for .NET unit testing in modern applications. Understanding xUnit is essential for maintaining code quality and following industry best practices.",
      "tags": [
        "beginner",
        "testing",
        "xunit"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 38,
      "question": "What is the primary purpose of JWT (JSON Web Tokens) in authentication?",
      "topic": "Security",
      "difficulty": "Intermediate",
      "choices": [
        "To securely transmit information between parties as a JSON object",
        "To encrypt database connections",
        "To compress HTTP responses",
        "To cache static files"
      ],
      "correctIndex": 0,
      "explanation": "JWTs are used to securely transmit information between parties as a JSON object. In authentication, they're commonly used to convey user identity and claims between a client and server in a stateless manner.",
      "industryContext": "JWT has become the standard for stateless authentication in modern web applications and APIs. Understanding JWT is crucial for implementing secure, scalable authentication systems.",
      "tags": [
        "intermediate",
        "security",
        "jwt"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 39,
      "question": "Which interface should you implement to make a class disposable in C#?",
      "topic": "Resource Management",
      "difficulty": "Beginner",
      "choices": [
        "IDisposable",
        "ICloneable",
        "IEquatable",
        "IComparable"
      ],
      "correctIndex": 0,
      "explanation": "The IDisposable interface should be implemented to make a class disposable. It contains a single method, Dispose(), which should release unmanaged resources and suppress finalization.",
      "industryContext": "Proper implementation of IDisposable is crucial for resource management in .NET applications. It's a fundamental pattern for ensuring that resources like file handles, database connections, and network streams are properly released.",
      "tags": [
        "beginner",
        "resources",
        "idisposable"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 40,
      "question": "What is the difference between AddScoped and AddTransient in ASP.NET Core DI?",
      "topic": "Dependency Injection",
      "difficulty": "Intermediate",
      "choices": [
        "Scoped services are created once per request, Transient services are created each time they're requested",
        "Transient services are created once per request, Scoped services are created each time they're requested",
        "There is no difference, they work the same way",
        "Scoped services are created once for the application lifetime, Transient services are created per request"
      ],
      "correctIndex": 0,
      "explanation": "AddScoped creates services once per HTTP request (or service scope), while AddTransient creates a new instance each time the service is requested. This affects both performance and state management in your application.",
      "industryContext": "Understanding service lifetimes is crucial for performance optimization and avoiding common pitfalls like using transient services in singleton services, which can lead to unexpected behavior and memory leaks.",
      "tags": [
        "intermediate",
        "di",
        "lifetimes"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 75,
      "correctAnswer": 0
    },
    {
      "id": 41,
      "question": "Which attribute is used to specify that a property is required in Entity Framework Core?",
      "topic": "Entity Framework",
      "difficulty": "Beginner",
      "choices": [
        "[Required]",
        "[NotNull]",
        "[Mandatory]",
        "[Validate]"
      ],
      "correctIndex": 0,
      "explanation": "The [Required] attribute from System.ComponentModel.DataAnnotations is used to specify that a property is required in Entity Framework Core. It also adds validation rules for client-side and server-side validation.",
      "industryContext": "Data annotations are essential for ensuring data integrity in Entity Framework applications. The [Required] attribute is one of the most commonly used annotations for enforcing business rules at the database level.",
      "tags": [
        "beginner",
        "ef",
        "validation"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 42,
      "question": "What is the purpose of the 'await using' statement in C#?",
      "topic": "Asynchronous Programming",
      "difficulty": "Advanced",
      "choices": [
        "To asynchronously dispose of resources that implement IAsyncDisposable",
        "To wait for multiple tasks to complete",
        "To parallelize foreach loops",
        "To await HTTP responses"
      ],
      "correctIndex": 0,
      "explanation": "The 'await using' statement is used to asynchronously dispose of resources that implement IAsyncDisposable. It's the async equivalent of the 'using' statement for resources that need to perform async cleanup operations.",
      "industryContext": "Asynchronous disposal is important for resources that perform I/O operations during cleanup, such as database connections or network streams. Using 'await using' prevents blocking the calling thread during disposal.",
      "tags": [
        "advanced",
        "async",
        "resources"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "correctAnswer": 0
    },
    {
      "id": 43,
      "question": "Which pattern is commonly used to implement configuration in ASP.NET Core?",
      "topic": "Configuration",
      "difficulty": "Intermediate",
      "choices": [
        "Options pattern",
        "Factory pattern",
        "Singleton pattern",
        "Observer pattern"
      ],
      "correctIndex": 0,
      "explanation": "The Options pattern is commonly used in ASP.NET Core to implement strongly-typed configuration. It allows you to bind configuration sections to POCO classes and inject them into services using IOptions<T>.",
      "industryContext": "The Options pattern is a core feature of ASP.NET Core that enables clean, type-safe configuration management. It's essential for building maintainable applications that can be easily configured for different environments.",
      "tags": [
        "intermediate",
        "configuration",
        "options"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 44,
      "question": "What is the primary benefit of using records in C# 9.0+?",
      "topic": "C# Language Features",
      "difficulty": "Intermediate",
      "choices": [
        "Automatic generation of value-based equality and immutability",
        "Better performance for database operations",
        "Enhanced security features",
        "Improved memory management"
      ],
      "correctIndex": 0,
      "explanation": "Records in C# 9.0+ automatically generate value-based equality, immutable properties, and useful methods like ToString() and GetHashCode(). They're ideal for data-centric classes where immutability and value semantics are important.",
      "industryContext": "Records have become increasingly popular in modern C# development for modeling immutable data. They reduce boilerplate code and make data classes more robust and predictable.",
      "tags": [
        "intermediate",
        "csharp",
        "records"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 60,
      "correctAnswer": 0
    },
    {
      "id": 45,
      "question": "Which HTTP status code should be returned when a resource is successfully created in a REST API?",
      "topic": "Web APIs",
      "difficulty": "Beginner",
      "choices": [
        "201 Created",
        "200 OK",
        "204 No Content",
        "202 Accepted"
      ],
      "correctIndex": 0,
      "explanation": "HTTP 201 Created should be returned when a resource is successfully created in a REST API. It indicates that the request was successful and a new resource was created as a result.",
      "industryContext": "Using proper HTTP status codes is essential for creating predictable and intuitive APIs. Status code 201 is specifically designated for successful resource creation and is widely recognized by API consumers.",
      "tags": [
        "beginner",
        "rest",
        "http"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 45,
      "correctAnswer": 0
    },
    {
      "id": 1,
      "question": "What is the difference between .NET Framework and .NET Core?",
      "options": [
        ".NET Core is a subset of .NET Framework",
        ".NET Framework is cross-platform while .NET Core is Windows-only",
        ".NET Core is cross-platform and open-source while .NET Framework is Windows-only",
        "There is no difference between them"
      ],
      "correctAnswer": 2,
      "difficulty": "Basic",
      "explanation": ".NET Core is a cross-platform, open-source framework that can run on Windows, macOS, and Linux, while .NET Framework is Windows-only and proprietary.",
      "correctIndex": 2
    },
    {
      "id": 2,
      "question": "Which keyword is used to declare a constant in C#?",
      "options": [
        "final",
        "const",
        "readonly",
        "static"
      ],
      "correctAnswer": 1,
      "difficulty": "Basic",
      "explanation": "The 'const' keyword is used to declare compile-time constants in C#. The value must be assigned at declaration and cannot be changed.",
      "correctIndex": 1
    },
    {
      "id": 6,
      "question": "Which LINQ method would you use to filter a collection?",
      "options": [
        "Select",
        "Where",
        "OrderBy",
        "GroupBy"
      ],
      "correctAnswer": 1,
      "difficulty": "Intermediate",
      "explanation": "The 'Where' method is used to filter collections based on a specified condition, returning only elements that match the criteria.",
      "correctIndex": 1
    },
    {
      "id": 7,
      "question": "What is the purpose of the 'using' statement in C#?",
      "options": [
        "To import namespaces only",
        "To ensure proper disposal of resources",
        "To declare variables",
        "To define aliases for types"
      ],
      "correctAnswer": 1,
      "difficulty": "Intermediate",
      "explanation": "The 'using' statement ensures that IDisposable objects are properly disposed of when they go out of scope, even if an exception occurs.",
      "correctIndex": 1
    },
    {
      "id": 12,
      "question": "Which design pattern is commonly used for dependency injection in .NET?",
      "options": [
        "Singleton Pattern",
        "Factory Pattern",
        "Inversion of Control (IoC) Container",
        "Observer Pattern"
      ],
      "correctAnswer": 2,
      "difficulty": "Advanced",
      "explanation": "IoC containers implement the Inversion of Control principle for dependency injection, managing object creation and dependency resolution automatically.",
      "correctIndex": 2
    }
  ],
  "metadata": {
    "difficulty": "Beginner",
    "estimatedTime": "30 minutes",
    "topics": [
      ".NET",
      "C#",
      "ASP.NET Core",
      "Entity Framework"
    ],
    "lastUpdated": "2025-10-09T10:00:00.000Z",
    "version": "1.0.0"
  }
}
