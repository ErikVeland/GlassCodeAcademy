{
  "moduleId": "programming-fundamentals",
  "title": "Programming Fundamentals Quiz",
  "questions": [
    {
      "id": "prog-fund-q1",
      "topic": "Variables",
      "difficulty": "Beginner",
      "question": "Which keyword is used to declare a variable that can be reassigned in JavaScript?",
      "choices": [
        "const",
        "final",
        "let",
        "static"
      ],
      "correctIndex": 2,
      "explanation": "In JavaScript, 'let' is used to declare variables that can be reassigned. 'const' is used for constants that cannot be reassigned, while 'final' and 'static' are keywords from other programming languages.",
      "industryContext": "Understanding variable declaration keywords is fundamental for writing maintainable JavaScript code and avoiding common bugs related to variable scope and reassignment."
    },
    {
      "id": "prog-fund-q2",
      "topic": "Data Types",
      "difficulty": "Beginner",
      "question": "Which of the following is NOT a primitive data type in JavaScript?",
      "choices": [
        "Number",
        "Boolean",
        "String",
        "Object"
      ],
      "correctIndex": 3,
      "explanation": "In JavaScript, Object is not a primitive data type. The primitive data types are Number, Boolean, String, Undefined, Null, Symbol, and BigInt. Objects are reference types.",
      "industryContext": "Distinguishing between primitive and reference types is crucial for understanding memory allocation and variable assignment behavior in JavaScript applications."
    },
    {
      "id": "prog-fund-q3",
      "topic": "Conditionals",
      "difficulty": "Beginner",
      "question": "What is the correct way to write an if statement in JavaScript?",
      "choices": [
        "if i == 5 then",
        "if (i == 5)",
        "if i = 5",
        "if i == 5"
      ],
      "correctIndex": 1,
      "explanation": "In JavaScript, if statements require parentheses around the condition. The correct syntax is 'if (condition) {}'. Other options either use incorrect syntax or assignment instead of comparison.",
      "industryContext": "Proper conditional syntax prevents logical errors and is essential for implementing decision-making logic in all JavaScript applications."
    },
    {
      "id": "prog-fund-q4",
      "topic": "Loops",
      "difficulty": "Beginner",
      "question": "Which loop is guaranteed to execute at least once?",
      "choices": [
        "for loop",
        "while loop",
        "do-while loop",
        "forEach loop"
      ],
      "correctIndex": 2,
      "explanation": "A do-while loop is guaranteed to execute at least once because the condition is checked after the loop body runs. In contrast, for and while loops check the condition before executing.",
      "industryContext": "Understanding loop behavior is important for implementing algorithms that require at least one execution, such as user input validation or menu systems."
    },
    {
      "id": "prog-fund-q5",
      "topic": "Functions",
      "difficulty": "Beginner",
      "question": "What does the 'return' statement do in a function?",
      "choices": [
        "Stops the function execution",
        "Sends a value back to the caller",
        "Both A and B",
        "Neither A nor B"
      ],
      "correctIndex": 2,
      "explanation": "The 'return' statement both stops the function execution and sends a value back to the caller. If no value is specified, it returns 'undefined'.",
      "industryContext": "Return statements are fundamental for creating functions that produce output and enable modular, reusable code in all programming applications."
    },
    {
      "id": "prog-fund-q6",
      "topic": "Arrays",
      "difficulty": "Beginner",
      "question": "What is the index of the first element in a JavaScript array?",
      "choices": [
        "0",
        "1",
        "-1",
        "It depends on the array"
      ],
      "correctIndex": 0,
      "explanation": "JavaScript arrays are zero-indexed, meaning the first element is at index 0, the second at index 1, and so on.",
      "industryContext": "Zero-based indexing is standard in most programming languages and understanding it correctly prevents off-by-one errors in array operations."
    },
    {
      "id": "prog-fund-q7",
      "topic": "Objects",
      "difficulty": "Beginner",
      "question": "How do you access the property 'name' of an object called 'user'?",
      "choices": [
        "user->name",
        "user.name",
        "user[name]",
        "Both B and C"
      ],
      "correctIndex": 3,
      "explanation": "Both dot notation (user.name) and bracket notation (user['name']) can be used to access object properties in JavaScript. Dot notation is more common for known property names.",
      "industryContext": "Object property access is fundamental for working with structured data in JavaScript applications, APIs, and JSON processing."
    },
    {
      "id": "prog-fund-q8",
      "topic": "Strings",
      "difficulty": "Beginner",
      "question": "Which method removes whitespace from both ends of a string?",
      "choices": [
        "trim()",
        "strip()",
        "clean()",
        "removeWhitespace()"
      ],
      "correctIndex": 0,
      "explanation": "The trim() method removes whitespace from both ends of a string. This is useful for cleaning up user input.",
      "industryContext": "String trimming is essential for data validation and cleaning user input to prevent issues with authentication, search, and data processing."
    },
    {
      "id": "prog-fund-q9",
      "topic": "Numbers",
      "difficulty": "Beginner",
      "question": "What is the result of 0.1 + 0.2 in JavaScript?",
      "choices": [
        "0.3",
        "0.30000000000000004",
        "0.29999999999999999",
        "NaN"
      ],
      "correctIndex": 1,
      "explanation": "Due to floating-point precision issues, 0.1 + 0.2 equals 0.30000000000000004 in JavaScript. This is a common gotcha in many programming languages.",
      "industryContext": "Understanding floating-point precision is crucial for financial calculations and scientific applications where accuracy is paramount."
    },
    {
      "id": "prog-fund-q10",
      "topic": "Variables",
      "difficulty": "Beginner",
      "question": "Which naming convention is recommended for JavaScript variables?",
      "choices": [
        "snake_case",
        "PascalCase",
        "camelCase",
        "kebab-case"
      ],
      "correctIndex": 2,
      "explanation": "camelCase is the recommended naming convention for JavaScript variables. It starts with a lowercase letter and capitalizes subsequent words without spaces or underscores.",
      "industryContext": "Following consistent naming conventions improves code readability and maintainability in team environments and aligns with JavaScript community standards."
    },
    {
      "id": "prog-fund-q11",
      "topic": "Functions",
      "difficulty": "Beginner",
      "question": "What is a parameter in a function?",
      "choices": [
        "A value passed to the function when it is called",
        "A variable declared inside the function",
        "The function's return value",
        "A built-in JavaScript method"
      ],
      "correctIndex": 0,
      "explanation": "Parameters are variables listed in the function definition that receive values when the function is called. The values passed are called arguments.",
      "industryContext": "Understanding parameters and arguments is essential for creating flexible, reusable functions that can operate on different data inputs."
    },
    {
      "id": "prog-fund-q12",
      "topic": "Arrays",
      "difficulty": "Beginner",
      "question": "Which method adds an element to the end of an array?",
      "choices": [
        "append()",
        "push()",
        "add()",
        "insert()"
      ],
      "correctIndex": 1,
      "explanation": "The push() method adds one or more elements to the end of an array and returns the new length of the array.",
      "industryContext": "Array manipulation methods like push() are fundamental for managing dynamic collections of data in web applications and data processing tasks."
    },
    {
      "id": "prog-fund-q13",
      "topic": "Conditionals",
      "difficulty": "Intermediate",
      "question": "What is the result of the expression: (5 > 3) && (2 < 1) || true?",
      "choices": [
        "true",
        "false",
        "undefined",
        "SyntaxError"
      ],
      "correctIndex": 0,
      "explanation": "Following operator precedence, this evaluates as ((5 > 3) && (2 < 1)) || true. (5 > 3) is true, (2 < 1) is false, so (true && false) is false. Then false || true equals true.",
      "industryContext": "Understanding logical operator precedence is crucial for writing complex conditional logic that behaves as expected in enterprise applications."
    },
    {
      "id": "prog-fund-q14",
      "topic": "Loops",
      "difficulty": "Intermediate",
      "question": "What will be the output of this code: for(let i=0; i<5; i++) { if(i===3) continue; console.log(i); }",
      "choices": [
        "0 1 2 3 4",
        "0 1 2 4",
        "0 1 2",
        "1 2 4"
      ],
      "correctIndex": 1,
      "explanation": "The continue statement skips the current iteration when i equals 3, so 3 is not printed. The loop outputs 0, 1, 2, and 4.",
      "industryContext": "Loop control statements like continue are essential for implementing efficient algorithms that need to skip certain iterations based on conditions."
    },
    {
      "id": "prog-fund-q15",
      "topic": "Functions",
      "difficulty": "Intermediate",
      "question": "What is a closure in JavaScript?",
      "choices": [
        "A function that calls itself recursively",
        "A function that has access to variables from its outer scope even after the outer function has returned",
        "A function that is defined inside another function",
        "A function that accepts another function as a parameter"
      ],
      "correctIndex": 1,
      "explanation": "A closure is a function that has access to variables from its outer (enclosing) scope even after the outer function has finished executing. This is a powerful feature in JavaScript.",
      "industryContext": "Closures are fundamental to many JavaScript patterns including module patterns, callbacks, and maintaining private state in applications."
    },
    {
      "id": "prog-fund-q16",
      "topic": "Arrays",
      "difficulty": "Intermediate",
      "question": "Which method creates a new array with the results of calling a function for every array element?",
      "choices": [
        "filter()",
        "forEach()",
        "map()",
        "reduce()"
      ],
      "correctIndex": 2,
      "explanation": "The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. It does not modify the original array.",
      "industryContext": "The map() method is essential for functional programming approaches and transforming data in modern JavaScript frameworks and data processing pipelines."
    },
    {
      "id": "prog-fund-q17",
      "topic": "Objects",
      "difficulty": "Intermediate",
      "question": "What is the value of 'this' inside a method of an object?",
      "choices": [
        "The global object",
        "The object that the method belongs to",
        "Undefined",
        "The function itself"
      ],
      "correctIndex": 1,
      "explanation": "Inside a method, 'this' refers to the object that the method belongs to. This allows methods to access and modify the object's properties.",
      "industryContext": "Understanding 'this' binding is crucial for object-oriented JavaScript programming and avoiding common pitfalls in event handlers and callback functions."
    },
    {
      "id": "prog-fund-q18",
      "topic": "Strings",
      "difficulty": "Intermediate",
      "question": "Which regular expression pattern matches a string that starts with 'Hello'?",
      "choices": [
        "/Hello/",
        "/^Hello/",
        "/Hello$/",
        "/*Hello*/"
      ],
      "correctIndex": 1,
      "explanation": "The ^ symbol in a regular expression matches the beginning of a string. So /^Hello/ matches strings that start with 'Hello'.",
      "industryContext": "Regular expressions are essential for input validation, data extraction, and text processing in web applications and backend services."
    },
    {
      "id": "prog-fund-q19",
      "topic": "Numbers",
      "difficulty": "Intermediate",
      "question": "What is the result of parseInt('10.5')?",
      "choices": [
        "10.5",
        "10",
        "NaN",
        "Error"
      ],
      "correctIndex": 1,
      "explanation": "parseInt() parses a string and returns an integer. It stops parsing at the first non-numeric character, so '10.5' becomes 10.",
      "industryContext": "Type conversion functions like parseInt() are crucial for processing user input and API data in web applications where type safety is important."
    },
    {
      "id": "prog-fund-q20",
      "topic": "Variables",
      "difficulty": "Intermediate",
      "question": "What is the scope of a variable declared with 'let' inside a block {}?",
      "choices": [
        "Global scope",
        "Function scope",
        "Block scope",
        "Module scope"
      ],
      "correctIndex": 2,
      "explanation": "Variables declared with 'let' have block scope, meaning they are only accessible within the block {} where they are defined, unlike 'var' which has function scope.",
      "industryContext": "Understanding block scope is essential for writing modern JavaScript code that avoids variable hoisting issues and maintains clean, predictable variable lifecycles."
    },
    {
      "id": "prog-fund-q21",
      "topic": "Conditionals",
      "difficulty": "Intermediate",
      "question": "Which operator is used for strict equality comparison in JavaScript?",
      "choices": [
        "==",
        "===",
        "=",
        "!=="
      ],
      "correctIndex": 1,
      "explanation": "The === operator checks for both value and type equality without type coercion. This is different from == which performs type coercion before comparison.",
      "industryContext": "Using strict equality (===) is a best practice that prevents bugs related to type coercion and makes code behavior more predictable in enterprise applications."
    },
    {
      "id": "prog-fund-q22",
      "topic": "Loops",
      "difficulty": "Intermediate",
      "question": "What is the primary difference between for...in and for...of loops?",
      "choices": [
        "for...in iterates over property names, for...of iterates over property values",
        "for...in is faster than for...of",
        "for...of only works with arrays",
        "There is no difference"
      ],
      "correctIndex": 0,
      "explanation": "for...in iterates over the enumerable property names (keys) of an object, while for...of iterates over the values of iterable objects like arrays, strings, etc.",
      "industryContext": "Choosing the right iteration method is important for performance and correctly processing different data structures in modern JavaScript applications."
    },
    {
      "id": "prog-fund-q23",
      "topic": "Functions",
      "difficulty": "Intermediate",
      "question": "What is the result of: (function() { return typeof arguments; })();",
      "choices": [
        "\"object\"",
        "\"array\"",
        "\"arguments\"",
        "\"undefined\""
      ],
      "correctIndex": 0,
      "explanation": "The 'arguments' object inside functions is array-like but is actually of type 'object'. It's not a true array, despite having a length property and indexed elements.",
      "industryContext": "Understanding the arguments object is important for creating flexible functions that can accept variable numbers of parameters, though modern JavaScript prefers rest parameters."
    },
    {
      "id": "prog-fund-q24",
      "topic": "Arrays",
      "difficulty": "Intermediate",
      "question": "Which method can be used to remove the last element from an array?",
      "choices": [
        "pop()",
        "shift()",
        "slice()",
        "splice()"
      ],
      "correctIndex": 0,
      "explanation": "The pop() method removes the last element from an array and returns that element. It modifies the original array.",
      "industryContext": "Array manipulation methods like pop() are fundamental for implementing data structures like stacks and managing dynamic collections in web applications."
    },
    {
      "id": "prog-fund-q25",
      "topic": "Objects",
      "difficulty": "Intermediate",
      "question": "How do you check if an object has a specific property?",
      "choices": [
        "obj.property !== undefined",
        "obj.hasOwnProperty('property')",
        "Both A and B",
        "Neither A nor B"
      ],
      "correctIndex": 2,
      "explanation": "Both methods can be used, but hasOwnProperty() is more reliable as it checks for the property directly on the object, not in its prototype chain.",
      "industryContext": "Property checking is essential for safely accessing object properties and preventing runtime errors in JavaScript applications that process dynamic data."
    },
    {
      "id": "prog-fund-q26",
      "topic": "Strings",
      "difficulty": "Intermediate",
      "question": "What does the match() method return when no matches are found?",
      "choices": [
        "An empty array",
        "null",
        "undefined",
        "false"
      ],
      "correctIndex": 1,
      "explanation": "The match() method returns null when no matches are found. It returns an array of matches when successful.",
      "industryContext": "Understanding return values of string methods is important for proper error handling and flow control in text processing applications."
    },
    {
      "id": "prog-fund-q27",
      "topic": "Numbers",
      "difficulty": "Intermediate",
      "question": "What is the value of Number('') (empty string)?",
      "choices": [
        "NaN",
        "0",
        "null",
        "undefined"
      ],
      "correctIndex": 1,
      "explanation": "Number('') converts an empty string to 0. This is part of JavaScript's type coercion rules, which can sometimes be surprising.",
      "industryContext": "Understanding type coercion is crucial for handling user input and API data correctly, especially in financial applications where precision is important."
    },
    {
      "id": "prog-fund-q28",
      "topic": "Variables",
      "difficulty": "Intermediate",
      "question": "What happens when you redeclare a variable with 'let' in the same scope?",
      "choices": [
        "The value is updated",
        "A new variable is created",
        "SyntaxError is thrown",
        "The declaration is ignored"
      ],
      "correctIndex": 2,
      "explanation": "Redeclaring a variable with 'let' in the same scope throws a SyntaxError. This helps catch programming errors early.",
      "industryContext": "Understanding variable redeclaration rules helps prevent bugs and makes code more predictable, which is especially important in large codebases."
    },
    {
      "id": "prog-fund-q29",
      "topic": "Conditionals",
      "difficulty": "Intermediate",
      "question": "What is the result of: Boolean('false')?",
      "choices": [
        "true",
        "false",
        "NaN",
        "undefined"
      ],
      "correctIndex": 0,
      "explanation": "Boolean('false') returns true because any non-empty string is truthy in JavaScript. Only empty strings are falsy.",
      "industryContext": "Understanding truthy and falsy values is essential for writing concise conditional logic and avoiding bugs in JavaScript applications."
    },
    {
      "id": "prog-fund-q30",
      "topic": "Loops",
      "difficulty": "Intermediate",
      "question": "What will be logged to the console: let i = 0; while(i < 3) { console.log(i); i++; }",
      "choices": [
        "0, 1, 2",
        "1, 2, 3",
        "0, 1, 2, 3",
        "1, 2"
      ],
      "correctIndex": 0,
      "explanation": "The while loop starts with i=0. It logs 0, increments to 1, logs 1, increments to 2, logs 2, increments to 3, then stops because 3 is not less than 3.",
      "industryContext": "Understanding loop execution flow is fundamental for implementing algorithms correctly and avoiding off-by-one errors in production code."
    },
    {
      "id": "prog-fund-q31",
      "topic": "Functions",
      "difficulty": "Intermediate",
      "question": "What is the value of 'this' in an arrow function?",
      "choices": [
        "The global object",
      "The object that called the function",
      "The enclosing scope's 'this' value",
      "undefined"
      ],
      "correctIndex": 2,
      "explanation": "Arrow functions do not have their own 'this'. They inherit 'this' from the enclosing scope, which makes them useful for callbacks but unsuitable for methods.",
      "industryContext": "Understanding arrow function 'this' binding is crucial for correctly using modern JavaScript features and avoiding common pitfalls in event handling and callback patterns."
    },
    {
      "id": "prog-fund-q32",
      "topic": "Arrays",
      "difficulty": "Intermediate",
      "question": "Which method creates a shallow copy of an array?",
      "choices": [
        "slice()",
        "splice()",
        "concat()",
        "copy()"
      ],
      "correctIndex": 0,
      "explanation": "The slice() method creates a shallow copy of an array. It does not modify the original array. slice() without arguments copies the entire array.",
      "industryContext": "Creating array copies is important for implementing immutable data patterns and avoiding unintended mutations in modern JavaScript frameworks."
    },
    {
      "id": "prog-fund-q33",
      "topic": "Algorithms",
      "difficulty": "Advanced",
      "question": "What is the time complexity of binary search in a sorted array?",
      "choices": [
        "O(n)",
        "O(log n)",
        "O(n log n)",
        "O(1)"
      ],
      "correctIndex": 1,
      "explanation": "Binary search has O(log n) time complexity because it eliminates half of the remaining elements with each comparison, making it very efficient for large datasets.",
      "industryContext": "Understanding algorithmic complexity is essential for optimizing performance in applications that process large amounts of data or require real-time responses."
    },
    {
      "id": "prog-fund-q34",
      "topic": "Data Structures",
      "difficulty": "Advanced",
      "question": "What is the primary advantage of using a Map over a plain object in JavaScript?",
      "choices": [
        "Maps are faster for all operations",
        "Maps preserve insertion order and can use any type as keys",
        "Maps have a smaller memory footprint",
        "Maps are easier to serialize"
      ],
      "correctIndex": 1,
      "explanation": "Maps preserve the insertion order of elements and can use any value (including objects and functions) as keys, unlike objects which convert keys to strings.",
      "industryContext": "Choosing the right data structure is critical for performance optimization and maintaining code clarity in complex applications with large datasets."
    },
    {
      "id": "prog-fund-q35",
      "topic": "Memory Management",
      "difficulty": "Advanced",
      "question": "What is a memory leak in JavaScript?",
      "choices": [
        "When memory is allocated but never freed",
        "When too much memory is used",
        "When variables are declared but not initialized",
        "When functions are called recursively"
      ],
      "correctIndex": 0,
      "explanation": "A memory leak occurs when memory that is no longer needed is not released, causing the application to consume more and more memory over time.",
      "industryContext": "Understanding memory management is crucial for building performant, scalable applications that can run for extended periods without degrading performance."
    },
    {
      "id": "prog-fund-q36",
      "topic": "Asynchronous Programming",
      "difficulty": "Advanced",
      "question": "What is the event loop in JavaScript?",
      "choices": [
        "A loop that processes events in order",
        "The mechanism that enables asynchronous operations in a single-threaded environment",
        "A function that handles user interactions",
        "A debugging tool for finding infinite loops"
      ],
      "correctIndex": 1,
      "explanation": "The event loop is JavaScript's mechanism for handling asynchronous operations in a single-threaded environment by continuously checking the call stack and callback queue.",
      "industryContext": "Understanding the event loop is fundamental for writing efficient asynchronous JavaScript code and avoiding blocking operations in web applications."
    },
    {
      "id": "prog-fund-q37",
      "topic": "Scope and Closures",
      "difficulty": "Advanced",
      "question": "What is the module pattern in JavaScript?",
      "choices": [
        "A way to organize code into separate files",
        "A design pattern that uses closures to create private variables and methods",
        "A built-in JavaScript module system",
        "A pattern for organizing CSS modules"
      ],
      "correctIndex": 1,
      "explanation": "The module pattern uses closures to create private variables and methods, providing encapsulation in JavaScript before ES6 modules were available.",
      "industryContext": "Understanding design patterns like the module pattern is important for creating maintainable, encapsulated code in large JavaScript applications."
    },
    {
      "id": "prog-fund-q38",
      "topic": "Functional Programming",
      "difficulty": "Advanced",
      "question": "What does it mean for a function to be 'pure'?",
      "choices": [
        "It returns a value",
        "It has no side effects and always returns the same output for the same input",
        "It is defined using arrow syntax",
        "It accepts other functions as parameters"
      ],
      "correctIndex": 1,
      "explanation": "A pure function has no side effects (doesn't modify external state) and always returns the same output for the same input, making it predictable and easy to test.",
      "industryContext": "Pure functions are fundamental to functional programming paradigms and contribute to code that is more testable, maintainable, and less prone to bugs."
    },
    {
      "id": "prog-fund-q39",
      "topic": "Performance Optimization",
      "difficulty": "Advanced",
      "question": "What is memoization?",
      "choices": [
        "Caching the results of expensive function calls",
        "Minifying JavaScript code",
        "Reducing the number of HTTP requests",
        "Using web workers for heavy computations"
      ],
      "correctIndex": 0,
      "explanation": "Memoization is an optimization technique that caches the results of expensive function calls and returns the cached result when the same inputs occur again.",
      "industryContext": "Memoization is a key technique for optimizing performance in applications with expensive computations or repeated function calls, especially in recursive algorithms."
    },
    {
      "id": "prog-fund-q40",
      "topic": "Error Handling",
      "difficulty": "Advanced",
      "question": "What is the difference between throw and return in JavaScript?",
      "choices": [
        "throw is for errors, return is for normal values",
        "throw exits the entire program, return exits only the function",
        "throw can only be used in try blocks, return can be used anywhere",
        "There is no difference"
      ],
      "correctIndex": 0,
      "explanation": "throw is used to raise exceptions (errors) that can be caught with try/catch, while return is used to send normal values back from functions.",
      "industryContext": "Proper error handling with throw/catch is essential for creating robust applications that gracefully handle unexpected conditions and provide meaningful feedback to users."
    }
  ]
}